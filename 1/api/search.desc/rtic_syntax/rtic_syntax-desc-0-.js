searchState.loadedDescShard("rtic_syntax", 0, "The Real-Time Interrupt-driven Concurrency (RTIC) meta …\nExecution context\nA hardware task: <code>#[exception]</code> or <code>#[interrupt]</code>\nThe <code>idle</code> context\nThe <code>init</code>-ialization function\nAn ordered map keyed by identifier\nImmutable pointer\nAn order set\nParser and optimizer configuration\nA software task: <code>#[task]</code>\nRTIC application analysis\nAbstract Syntax Tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this context has local resources\nWhether this context has shared resources\nThe identifier of this context\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this the <code>idle</code> context?\nIs this the <code>init</code>-ialization context?\nBoxes <code>x</code> making the value immutable\nWhether to “compress” priorities or not\nParses the input of the <code>#[app]</code> attribute\n<code>proc_macro2::TokenStream</code> version of <code>parse</code>\nWhether to accept the <code>binds</code> argument in <code>#[task]</code> or not\nWhether to parse <code>extern</code> interrupts (functions) or not\nWhether this context runs only once\nThe result of analyzing an RTIC application\nPriority ceiling\nA channel used to send messages\nAll channels, keyed by dispatch priority\n“Co-owned” by more than one task; all of them have the …\nContended by more than one task; the tasks have different …\nNo value.\nOwned by a single task\nResource ownership\nResource ownership\nTask priority\nResource name\nThese types must implement the <code>Send</code> trait\nSome value of type <code>T</code>.\nThese types must implement the <code>Sync</code> trait\nTask name\nLocation of all <em>used</em> local resources\nLocation of all <em>used</em> shared resources\nThe channel capacity\nSPSC message channels\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this resource is exclusively owned\nLocal resources\nWhether this resource needs to a lock at this priority …\nResource ownership\nThese types must implement the <code>Send</code> trait\nShared resources\nThese types must implement the <code>Sync</code> trait\nTasks that can be spawned on this channel\nPriority ceiling\nPriority of the task that owns this resource\nPriority of the tasks that co-own this resource\nResource access\nThe <code>#[app]</code> attribute\nThe arguments of the <code>#[app]</code> attribute\nThe local is declared in the task\n<code>[x]</code>, a mutable resource\nInterrupt that could be used to dispatch software tasks\nInterrupts used to dispatch software tasks\nThe local is declared externally (i.e. <code>#[local]</code> struct)\nA hardware task\nHardware task metadata\nThe <code>idle</code> context\n<code>idle</code> context metadata\nThe <code>init</code>-ialization function\n<code>init</code> context metadata\nA <code>static mut</code> variable local to and owned by a context\nA local resource, defined in <code>#[local]</code>\nLocal resource access/declaration list in task attribute\nMonotonic\nMonotonic metadata\n<code>[&amp;x]</code>, a static non-mutable resource\nA shared resource, defined in <code>#[shared]</code>\nShared resource properties\nShared resource access list in task attribute\nA software task\nSoftware task metadata\nA wrapper of the 2 kinds of locals that tasks can have\nThe arguments to the <code>#[app]</code> attribute\n<code>init</code> context metadata\n<code>idle</code> context metadata\nMonotonic args\nSoftware task metadata\nHardware task metadata\nAttributes that will apply to this interrupt handler\nAttributes that will apply to this <code>init</code> function\nAttributes that will apply to this <code>idle</code> function\nAttributes that will apply to this resource\nAttributes that will apply to this resource\nAttributes that will apply to this interrupt handler\nAttributes that will apply to this interrupt handler\nAttributes like <code>#[link_section]</code>\nThe interrupt or exception that this monotonic is bound to\nThe interrupt or exception that this task is bound to\nThe task capacity: the maximum number of pending messages …\n<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>\n<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>\n<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>\n<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>\n<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>\n<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>\nThe context argument\nThe context argument\nThe context argument\nThe context argument\nGet all declared local resources, i.e. …\nIf this is the default monotonic\nDevice\n<code>#[doc]</code> attributes like <code>/// this is a docstring</code>\n<code>#[doc]</code> attributes like <code>/// this is a docstring</code>\nInitial value\nInterrupts used to dispatch software tasks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHardware tasks: <code>#[task(binds = ..)]</code>s\nThe identifier of the monotonic\nThe <code>#[idle]</code> function\nThe <code>#[init]</code> function\nThe inputs of this software task\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this enum in the <code>Exclusive</code> variant?\nThe task is declared externally\nThe task is declared externally\nIs this enum in the <code>Shared</code> variant?\nTask local resources defined in <code>#[local]</code>\nLocal resources that can be accessed from this context\nLocal resources that can be accessed from this context\nLocal resources that can be accessed from this context\nLocal resources that can be accessed from this context\nA lock free (exclusive resource)\nMonotonic clocks\nThe name of the <code>const</code> item on which the <code>#[app]</code> attribute …\nThe name of the <code>#[init]</code> function\nThe name of the <code>#[idle]</code> function\nPeripherals\nThe priority of this monotonic\nThe priority of this task\nThe priority of this task\nShared resource properties\nResources shared between tasks defined in <code>#[shared]</code>\nShared resources that can be accessed from this context\nShared resources that can be accessed from this context\nShared resources that can be accessed from this context\nSoftware tasks: <code>#[task]</code>\nThe statements that make up this <code>init</code> function\nThe statements that make up this <code>idle</code> function\nThe statements that make up the task handler\nThe statements that make up the task handler\nThe type of this resource\nThe type of this resource\nThe type of this monotonic\nType\nUser code\nUser imports\nThe name of the user provided local resources struct\nThe name of the user provided shared resources struct")
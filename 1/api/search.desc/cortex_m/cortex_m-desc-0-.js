searchState.loadedDescShard("cortex_m", 0, "Low level access to Cortex-M processors\nMiscellaneous assembly instructions\nA delay driver based on SysTick.\nInterrupts\nMacro for sending a formatted string through an ITM channel\nMacro for sending a formatted string through an ITM …\nInstrumentation Trace Macrocell\nCore peripherals.\nPrelude\nProcessor core registers\nMacro to create a mutable reference to a statically …\nPuts the processor in Debug state. Debuggers can pick this …\nBootload.\nBootstrap.\nBlocks the program for <em>at least</em> <code>cycles</code> CPU cycles.\nData Memory Barrier\nData Synchronization Barrier\nInstruction Synchronization Barrier\nA no-operation. Useful to prevent delay loops from being …\nSemihosting syscall.\nSend Event\nGenerate an Undefined Instruction exception.\nWait For Event\nWait For Interrupt\nSystem timer (SysTick) as a delay provider.\nDelay using the Cortex-M systick for a certain duration, …\nDelay using the Cortex-M systick for a certain duration, …\nReleases the system timer (SysTick) resource.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the system timer (SysTick) as a delay provider.\nConfigures the system timer (SysTick) as a delay provider …\nCritical section token\nTrait for enums of external interrupt numbers.\nA “mutex” based on critical sections\nInterrupt number\nBorrows the data for the duration of the critical section\nDisables all interrupts\nEnables all the interrupts\nExecute closure <code>f</code> in an interrupt-free context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a critical section token\nCreates a new mutex\nReturns the number associated with an interrupt\nReturn the interrupt number associated with this variant.\nA wrapper type that aligns its contents on a 4-Byte …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrites a 4-byte aligned <code>buffer</code> to an ITM port.\nWrites <code>buffer</code> to an ITM port.\nWrites <code>fmt::Arguments</code> to the ITM <code>port</code>\nWrites a string to the ITM <code>port</code>\nCache and branch predictor maintenance operations\nCache and branch predictor maintenance operations. Not …\nCPUID\nCPUID\nDebug Control Block\nDebug Control Block\nData Watchpoint and Trace unit\nData Watchpoint and Trace unit\nFlash Patch and Breakpoint unit\nFlash Patch and Breakpoint unit. Not available on Armv6-M.\nFloating Point Unit\nFloating Point Unit.\nImplementation Control Block.\nImplementation Control Block.\nInstrumentation Trace Macrocell\nInstrumentation Trace Macrocell. Not available on Armv6-M …\nMemory Protection Unit\nMemory Protection Unit\nNested Vector Interrupt Controller\nNested Vector Interrupt Controller\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nCore peripherals\nSecurity Attribution Unit\nSecurity Attribution Unit\nSystem Control Block\nSystem Control Block\nSysTick: System Timer\nSysTick: System Timer\nTrace Port Interface Unit\nTrace Port Interface Unit. Not available on Armv6-M.\nBranch predictor invalidate all\nReturns log2 of the number of words in the smallest cache …\nReturns log2 of the number of words in the smallest cache …\nReturns the number of sets and ways in the selected cache\nCache and branch predictor maintenance operations\nCleans the entire D-cache.\nCleans D-cache by address.\nCleans an object from the D-cache.\nCleans a slice from D-cache.\nCleans and invalidates the entire D-cache.\nCleans and invalidates D-cache by address.\nClears current value to 0\nSet the PENDSTCLR bit in the ICSR register which will …\nSet the PENDSVCLR bit in the ICSR register which will …\nClear the SLEEPDEEP bit in the SCR register\nClear the SLEEPONEXIT bit in the SCR register\nGet the CPI count\nCPUID\nReturns the current clock cycle count\nReturns <code>true</code> if the cycle counter is enabled\nReturns whether the D-cache is currently enabled.\nDebug Control Block\nD-cache clean and invalidate by MVA to PoC\nD-cache clean and invalidate by set-way\nD-cache clean by MVA to PoC\nD-cache clean by MVA to PoU\nD-cache clean by set-way\nD-cache invalidate by MVA to PoC\nD-cache invalidate by set-way\nDisable the exception\nDisables counter\nDisables the cycle counter\nDisables D-cache if currently enabled.\nDisables I-cache if currently enabled.\nDisables SysTick interrupt\nDisables TRACE. See <code>DCB::enable_trace()</code> for more details\nData Watchpoint and Trace unit\nEnable the exception\nEnables counter\nEnables the cycle counter\nEnables D-cache if currently disabled.\nEnables I-cache if currently disabled.\nEnables SysTick interrupt\nEnables TRACE. This is for example required by the …\nGet the total cycles spent in exception processing\nGet the folded instruction count\nFlash Patch and Breakpoint unit\nFloating Point Unit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets clock source\nGets current value\nReturns the current clock cycle count\nReturns the NVIC priority of <code>interrupt</code>\nReturns the hardware priority of <code>system_handler</code>\nGets reload value\nReturns the reload value with which the counter would wrap …\nReturns <code>true</code> if the implementation supports a cycle counter\nReturns <code>true</code> if the the implementation supports sampling …\nReturns <code>true</code> if the implementation includes external match …\nReturns <code>true</code> if the implementation the profiling counters\nChecks if an external reference clock is available\nChecks if the counter wrapped (underflowed) since the last …\nReturns whether the I-cache is currently enabled.\nImplementation Control Block\nI-cache invalidate all to PoU\nI-cache invalidate by MVA to PoU\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates D-cache by address.\nInvalidates an object from the D-cache.\nInvalidates a slice from the D-cache.\nInvalidates the entire I-cache.\nIs <code>interrupt</code> active or pre-empted and stacked\nChecks if counter is enabled\nIs there a debugger attached? (see note)\nChecks if <code>interrupt</code> is enabled\nCheck if an exception is enabled\nChecks if SysTick interrupt is enabled\nChecks if <code>interrupt</code> is pending\nCheck if PENDSTSET bit in the ICSR register is set meaning …\nCheck if PENDSVSET bit in the ICSR register is set meaning …\nChecks if the calibration value is precise\nInstrumentation Trace Macrocell\nGet the additional cycles required to execute all load or …\nDisables <code>interrupt</code>\nMemory Protection Unit\nNumber of comparators implemented\nNested Vector Interrupt Controller\nForces <code>interrupt</code> into pending state\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nRequest an IRQ in software\nSystem Control Block\nSelects the current CCSIDR\nSets clock source\nSet the CPI count\nSet the cycle count\nSet the exception count\nSet the folded instruction count\nSet the lsu count\nSet the PENDSTSET bit in the ICSR register which will pend …\nSet the PENDSVSET bit in the ICSR register which will pend …\nSets the “priority” of <code>interrupt</code> to <code>prio</code>\nSets the hardware priority of <code>system_handler</code> to <code>prio</code>\nSets reload value\nSet the sleep count\nSet the SLEEPDEEP bit in the SCR register\nSet the SLEEPONEXIT bit in the SCR register\nGet the total number of cycles that the processor is …\nUnchecked version of <code>Peripherals::take</code>\nInitiate a system reset request to reset the MCU\nSysTick: System Timer\nReturns all the core peripherals <em>once</em>\nTrace Port Interface Unit;\nRemoves the software lock on the DWT\nEnables <code>interrupt</code>\nClears <code>interrupt</code>’s pending state\nReturns the active exception number\nRegister block\nBranch predictor invalidate all\nD-cache clean and invalidate by MVA to PoC\nD-cache clean and invalidate by set-way\nD-cache clean by MVA to PoC\nD-cache clean by MVA to PoU\nD-cache clean by set-way\nD-cache invalidate by MVA to PoC\nD-cache invalidate by set-way\nReturns the argument unchanged.\nI-cache invalidate all to PoU\nI-cache invalidate by MVA to PoU\nCalls <code>U::from(self)</code>.\nType of cache to select on CSSELR writes.\nSelect DCache or unified cache\nSelect ICache\nRegister block\nAuxiliary Feature (not present on Cortex-M0 variants)\nCPUID base\nCache Size ID (only present on Cortex-M7)\nCache Level ID (only present on Cortex-M7)\nCache Size Selection (only present on Cortex-M7)\nCache Type (only present on Cortex-M7)\nDebug Feature (not present on Cortex-M0 variants)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstruction Set Attribute (not present on Cortex-M0 …\nMemory Model Feature (not present on Cortex-M0 variants)\nProcessor Feature (not present on Cortex-M0 variants)\nRegister block\nDebug Core Register Data\nDebug Core Register Selector\nDebug Exception and Monitor Control\nDebug Halting Control and Status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComparator\nRegister block\nComparators\nComparator\nCPI Count\nControl\nCycle Count\nException Overhead Count\nFolded-instruction Count\nReturns the argument unchanged.\nReturns the argument unchanged.\nComparator Function\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLock Access\nLock Status\nLSU Count\nComparator Mask\nProgram Counter Sample\nSleep Count\nRegister block\nComparator\nControl\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLock Access\nLock Status\nRemap\nRegister block\nFloating Point Context Address\nFloating Point Context Control\nFloating Point Default Status Control\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMedia and FP Feature\nRegister block\nAuxiliary Control Register\nReturns the argument unchanged.\nInterrupt Controller Type Register\nCalls <code>U::from(self)</code>.\nRegister block\nStimulus Port\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the stimulus port is ready to accept more …\nLock Access\nLock Status\nStimulus Port\nTrace Control\nTrace Enable\nTrace Privilege\nWrites an <code>u16</code> payload into the stimulus port\nWrites an <code>u32</code> payload into the stimulus port\nWrites an <code>u8</code> payload into the stimulus port\nRegister block for ARMv7-M\nType\nControl\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegion Attribute and Size\nAlias 1 of RASR\nAlias 2 of RASR\nAlias 3 of RASR\nRegion Base Address\nAlias 1 of RBAR\nAlias 2 of RBAR\nAlias 3 of RBAR\nRegion Number\nRegister block\nReturns the argument unchanged.\nInterrupt Active Bit (not present on Cortex-M0 variants)\nInterrupt Clear-Enable\nInterrupt Clear-Pending\nCalls <code>U::from(self)</code>.\nInterrupt Priority\nInterrupt Set-Enable\nInterrupt Set-Pending\nSoftware Trigger Interrupt\nBus fault interrupt (not present on Cortex-M0 variants)\nBus fault interrupt (not present on Cortex-M0 variants)\nDebug monitor interrupt (not present on Cortex-M0 variants)\nDebug monitor interrupt (not present on Cortex-M0 variants)\nProcessor core exceptions (internal interrupts)\nProcessor core exception (internal interrupts)\nHard fault interrupt\nDevice specific exception (external interrupts)\nMemory management interrupt (not present on Cortex-M0 …\nMemory management interrupt (not present on Cortex-M0 …\nNon maskable interrupt\nPend SV interrupt\nPend SV interrupt\nRegister block\nSV call interrupt\nSV call interrupt\nSecure fault interrupt (only on ARMv8-M)\nSecure fault interrupt (only on ARMv8-M)\nSystem Tick interrupt\nSystem Tick interrupt\nSystem handlers, exceptions with configurable priority\nThread mode\nUsage fault interrupt (not present on Cortex-M0 variants)\nUsage fault interrupt (not present on Cortex-M0 variants)\nActive exception number\nAuxiliary Fault Status (not present on Cortex-M0 variants)\nApplication Interrupt and Reset Control\nBusFault Address (not present on Cortex-M0 variants)\nConfiguration and Control\nConfigurable Fault Status (not present on Cortex-M0 …\nCoprocessor Access Control (not present on Cortex-M0 …\nDebug Fault Status (not present on Cortex-M0 variants)\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>byte</code> into <code>VectActive</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nHardFault Status (not present on Cortex-M0 variants)\nInterrupt Control and State\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IRQ number of this <code>Exception</code>\nMemManage Fault Address (not present on Cortex-M0 variants)\nSystem Control\nSystem Handler Control and State\nSystem Handler Priority (word accessible only on Cortex-M0 …\nVector Table Offset (not present on Cortex-M0 variants)\nInterrupt number. This number is always within half open …\nCore-provided clock\nExternal reference clock\nRegister block\nSysTick clock source\nCalibration Value\nControl and Status\nCurrent Value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReload Value\nRegister block\nTPIU Type\nAsynchronous Clock Prescaler\nCurrent Parallel Port Size\nFormatter and Flush Control\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLock Access\nLock Status\nSelected Pin Control\nSupported Parallel Port Sizes\nType for the <code>duty</code> methods\nError type\nError type\nError type\nThe type of error that can occur when writing\nError type\nError type\nRead error\nWrite error\nAn enumeration of SPI errors\nThe unit of time used by this timer\nA single PWM channel / pin\nMillisecond delay\nMicrosecond delay\nBlocking read\nBlocking write\nBlocking write + read\nWrite half of a serial interface (blocking variant)\nBlocking transfer\nBlocking write\nSingle digital push-pull output pin\nRead half of a serial interface\nWrite half of a serial interface\nFull duplex (master mode)\nA count down timer\nBlock until the serial interface has sent all buffered …\nWrites a slice, blocking until everything has been written\nPauses execution for <code>ms</code> milliseconds\nPauses execution for <code>us</code> microseconds\nDisables a PWM <code>channel</code>\nEnables a PWM <code>channel</code>\nEnsures that none of the previously written words are …\nReturns the current duty cycle\nReturns the maximum duty cycle value\nReads enough bytes from slave with <code>address</code> to fill <code>buffer</code>\nReads a single word from the serial interface\nReads the word stored in the shift register\nSends a word to the slave\nSets a new duty cycle\nDrives the pin high\nDrives the pin low\nStarts a new count down\nSends <code>words</code> to the slave. Returns the <code>words</code> received from …\nNon-blockingly “waits” until the count down finishes\nWrites bytes to slave with address <code>address</code>\nSends <code>words</code> to the slave, ignoring all the incoming words\nWrites a single word to the serial interface\nWrites bytes to slave with address <code>address</code> and then reads …\nBase Priority Mask Register\nBase Priority Mask Register (conditional write)\nControl register\nFault Mask Register\nMain Stack Pointer\nPriority mask register\nProcess Stack Pointer\nReads the CPU register\nWrites to the CPU register\nWrites to BASEPRI <em>if</em>\nFloating-point context active.\nControl register\nWhether context floating-point is currently active\nMSP is the current stack pointer\nNo floating-point context active\nThread mode privilege level\nPrivileged\nPSP is the current stack pointer\nCurrently active stack pointer\nUnprivileged\nReturns the contents of the register as raw bits\nWhether context floating-point is currently active\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Control</code> value from raw bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs a floating-point context active?\nIs MSP the current stack pointer?\nIs a floating-point context not active?\nIs in privileged thread mode?\nIs PSP the current stack pointer?\nIs in unprivileged thread mode?\nThread mode privilege level\nReads the CPU register\nSets the FPCA value.\nSets the thread mode privilege level value (nPRIV).\nSets the SPSEL value.\nCurrently active stack pointer\nWrites to the CPU register.\nActive\nAll exceptions are …\nInactive, expect for NMI\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll exceptions are active\nAll exceptions, except for NMI, are inactive\nReads the CPU register\nReads the CPU register\nWrites <code>bits</code> to the CPU register\nActive\nInactive\nAll exceptions with configurable priority are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll exceptions with configurable priority are active\nAll exceptions with configurable priority are inactive\nReads the CPU register\nReads the CPU register\nWrites <code>bits</code> to the CPU register")
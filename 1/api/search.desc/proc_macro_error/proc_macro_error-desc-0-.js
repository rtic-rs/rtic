searchState.loadedDescShard("proc_macro_error", 0, "proc-macro-error\nRepresents a single diagnostic message\nA collection of methods that do not exist in …\nRepresents a diagnostic level\nThis traits expands <code>Option</code> with some handy shortcuts.\nThis traits expands <code>Result&lt;T, Into&lt;Diagnostic&gt;&gt;</code> with some …\nAbort the proc-macro’s execution and display the …\nAbort proc-macro execution right now and display the error.\nShortcut for <code>abort!(Span::call_site(), msg...)</code>. This macro …\nAbort macro execution and display all the emitted errors, …\nCreate a <code>SpanRange</code> resolving at call site.\nCollapse the range into single span, preserving as much …\nBuild <code>Diagnostic</code> instance from provided arguments.\nFacility to emit dummy implementations (or whatever) in …\nDisplay the diagnostic while not aborting macro execution.\nShortcut for <code>emit_error!(Span::call_site(), ...)</code>. This …\nShortcut for <code>emit_warning!(Span::call_site(), ...)</code>.\nEmit an error while not aborting the proc-macro right away.\nEmit a warning. Warnings are not errors and compilation won…\nBehaves like <code>Result::expect</code>: if self is <code>Ok</code> yield the …\nBehaves like <code>Option::expect</code>: if self is <code>Some</code> yield the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct span range from a <code>TokenStream</code>. This method …\nAttach a “help” note to your main message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin two span ranges. The resulting range will start at …\nThe message of main warning/error (no notes attached)\nCreate a new diagnostic message that points to …\nAttach a note to your main message\nCreate a range with the <code>first</code> and <code>last</code> spans being the …\nAdd another error message to self such that it will be …\nAttach a “help” note to your main message, the note …\nAttach a note to your main message, the note will have it…\nAdd another error message to self such that it will be …\nAttach a “help” note to your main message, the note …\nAttach a note to your main message, the note will have it…\nCreate a new diagnostic message that points to the <code>span</code>\nCreate a new diagnostic message that points to the …\nBehaves like <code>Result::unwrap</code>: if self is <code>Ok</code> yield the …\nSame as <code>set_dummy</code> but, instead of resetting, appends …\nSets dummy token stream which will be appended to …")
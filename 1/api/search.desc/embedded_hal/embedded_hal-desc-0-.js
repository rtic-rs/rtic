searchState.loadedDescShard("embedded_hal", 0, "A Hardware Abstraction Layer (HAL) for embedded systems\nType for the <code>duty</code> methods\nA single PWM channel / pin\nAnalog-digital conversion traits\nBlocking API\nController Area Network\nDigital I/O\nDisables a PWM <code>channel</code>\nEnables a PWM <code>channel</code>\nImplementation of <code>core::fmt::Write</code> for the HAL’s …\nReturns the current duty cycle\nReturns the maximum duty cycle value\nThe prelude is a collection of all the traits in this crate\nSerial interface\nSets a new duty cycle\nSerial Peripheral Interface\nTimers\nTraits for interactions with a processors watchdog timer.\nBlocking CAN API\nDelays\nBlocking I2C API\nBlocking hardware random number generator\nBlocking serial API\nBlocking SPI API\nA blocking CAN interface that is able to transmit and …\nAssociated error type.\nAssociated frame type.\nBlocks until a frame was received or an error occured.\nPuts a frame in the transmit buffer. Blocks until space is …\nMillisecond delay\nMicrosecond delay\nPauses execution for <code>ms</code> milliseconds\nPauses execution for <code>us</code> microseconds\nAddress mode (7-bit / 10-bit)\nError type\nError type\nError type\nError type\nError type\nError type\nError type\nTransactional I2C operation.\nBlocking read\nRead data into the provided buffer\n7-bit address mode type\n10-bit address mode type\nTransactional I2C interface.\nTransactional I2C interface (iterator version).\nBlocking write\nWrite data from the provided buffer\nBlocking write (iterator version)\nBlocking write (iterator version) + read\nBlocking write + read\nExecute the provided operations on the I2C bus.\nExecute the provided operations on the I2C bus (iterator …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads enough bytes from slave with <code>address</code> to fill <code>buffer</code>\nWrites bytes to slave with address <code>address</code>\nWrites bytes to slave with address <code>address</code>\nWrites bytes to slave with address <code>address</code> and then reads …\nWrites bytes to slave with address <code>address</code> and then reads …\nThe type of error that can occur when writing\nWrite half of a serial interface (blocking variant)\nBlock until the serial interface has sent all buffered …\nWrites a slice, blocking until everything has been written\nBlocking serial write\nMarker trait to opt into default blocking write …\nError type\nError type\nAssociated error type\nOperation for transactional SPI trait\nTransactional trait allows multiple actions to be executed …\nBlocking transfer\nWrite data out while reading data into the provided buffer\nBlocking write\nWrite data from the provided buffer, discarding read data\nExecute the provided transactions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlocking transfer\nSends <code>words</code> to the slave. Returns the <code>words</code> received from …\nBlocking write\nSends <code>words</code> to the slave, ignoring all the incoming words\nDefault implementation of <code>blocking::spi::Transfer&lt;W&gt;</code> for …\nDefault implementation of <code>blocking::spi::Write&lt;W&gt;</code> for …\nAn ACK  error shall be detected by a transmitter whenever …\nA bit error is detected at that bit time when the bit …\nCalculated CRC sequence does not equal the received one.\nCAN error\nCAN error kind\nExtended 29-bit Identifier (<code>0..=0x1FFF_FFFF</code>).\nExtended 29-bit CAN Identifier (<code>0..=1FFF_FFFF</code>).\nA form error shall be detected when a fixed-form bit field …\nA CAN2.0 Frame\nA CAN Identifier (standard or extended).\nCAN ID <code>0x7FF</code>, the lowest priority.\nCAN ID <code>0x1FFFFFFF</code>, the lowest priority.\nA different error occurred. The original error may contain …\nThe peripheral receive buffer was overrun.\nStandard 11-bit Identifier (<code>0..=0x7FF</code>).\nStandard 11-bit CAN Identifier (<code>0..=0x7FF</code>).\nA stuff error is detected at the bit time of the sixth …\nCAN ID <code>0</code>, the highest priority.\nCAN ID <code>0</code>, the highest priority.\nReturns this CAN Identifier as a raw 16-bit integer.\nReturns this CAN Identifier as a raw 32-bit integer.\nReturns the frame data (0..8 bytes in length).\nReturns the data length code (DLC) which is in the range …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the frame identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this frame is a data frame.\nReturns true if this frame is a extended frame.\nReturns true if this frame is a remote frame.\nReturns true if this frame is a standard frame.\nConvert error to a generic CAN error kind\nNon-blocking CAN API\nCreates a new frame.\nTries to create a <code>StandardId</code> from a raw 16-bit integer.\nTries to create a <code>ExtendedId</code> from a raw 32-bit integer.\nCreates a new remote frame (RTR bit set).\nCreates a new <code>StandardId</code> without checking if it is inside …\nCreates a new <code>ExtendedId</code> without checking if it is inside …\nReturns the Base ID part of this extended identifier.\nA CAN interface that is able to transmit and receive …\nAssociated error type.\nAssociated frame type.\nReturns a received frame if available.\nPuts a frame in the transmit buffer to be sent on the bus.\nDigital I/O\nv1 compatibility wrappers\nDigital I/O\nv2 compatibility shims\nSingle digital push-pull output pin\nDrives the pin high\nDrives the pin low\nWrapper to allow fallible <code>v2::OutputPin</code> traits to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new OldOutputPin wrapper around a <code>v2::OutputPin</code>\nError type\nHigh pin state\nLow pin state\nSingle digital push-pull output pin\nDigital output pin state\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDrives the pin high\nDrives the pin low\nDrives the pin high or low depending on the provided value\nRead error\nWrite error\nRead half of a serial interface\nWrite half of a serial interface\nEnsures that none of the previously written words are …\nReads a single word from the serial interface\nWrites a single word to the serial interface\nData in “captured” on the first clock transition\nData in “captured” on the second clock transition\nAn enumeration of SPI errors\nFull duplex (master mode)\nClock signal high when idle\nClock signal low when idle\nHelper for CPOL = 0, CPHA = 0\nHelper for CPOL = 0, CPHA = 1\nHelper for CPOL = 1, CPHA = 0\nHelper for CPOL = 1, CPHA = 1\nSPI mode\nClock phase\nClock polarity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClock phase\nClock polarity\nReads the word stored in the shift register\nSends a word to the slave\nTrait for cancelable countdowns.\nA count down timer\nError returned when a countdown can’t be canceled.\nMarker trait that indicates that a timer is periodic\nThe unit of time used by this timer\nTries to cancel this countdown.\nStarts a new count down\nNon-blockingly “waits” until the count down finishes")
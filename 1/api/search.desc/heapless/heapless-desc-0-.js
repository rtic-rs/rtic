searchState.loadedDescShard("heapless", 0, "<code>static</code> friendly data structures that don’t require …\nA fixed capacity double-ended queue.\nA view into an entry in the map\nA <code>heapless::IndexMap</code> using the default FNV hasher\nA <code>heapless::IndexSet</code> using the default FNV hasher. A list …\nA “history buffer”, similar to a write-only ring …\nFixed capacity <code>IndexMap</code>\nFixed capacity <code>IndexSet</code>.\nA fixed capacity map / dictionary that performs lookups …\nThe entry corresponding to the key <code>K</code> exists in the map\nAn occupied entry which can be manipulated\nAn iterator on the underlying buffer ordered from oldest …\nA fixed capacity <code>String</code>\nThe entry corresponding to the key <code>K</code> does not exist in the …\nA view into an empty slot in the underlying map\nA fixed capacity <code>Vec</code>\nReturns a raw pointer to the vector’s buffer, which may …\nReturns a pair of mutable slices which contain, in order, …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns a raw pointer to the vector’s buffer.\nReturns the array slice backing the buffer, without …\nExtracts a slice containing the entire vector.\nReturns a pair of slices which contain, in order, the …\nExtracts a string slice containing the entire string.\nProvides a reference to the back element, or None if the …\nProvides a mutable reference to the back element, or None …\nA priority queue implemented with a binary heap.\nReturns the maximum number of elements the deque can hold.\nReturns the capacity of the buffer, which is the length of …\nReturns the number of elements the map can hold\nReturns the number of elements the set can hold\nReturns the number of elements that the map can hold\nReturns the maximum number of elements the String can hold\nReturns the maximum number of elements the vector can hold.\nClears the deque, removing all values.\nClears the buffer, replacing every element with the …\nRemove all key-value pairs in the map, while preserving …\nClears the set, removing all values.\nClears the map, removing all key-value pairs\nTruncates this <code>String</code>, removing all contents.\nClears the vector, removing all values.\nClears the buffer, replacing every element with the given …\nReturns <code>true</code> if the set contains a value.\nReturns true if the map contains a value for the specified …\nReturns true if the map contains a value for the specified …\nVisits the values representing the difference, i.e. the …\nReturns <code>true</code> if <code>needle</code> is a suffix of the Vec.\nReturns an entry for the corresponding key\nExtends the vec from an iterator.\nClones and writes all elements in a slice to the buffer.\nClones and appends all elements in a slice to the <code>Vec</code>.\nGet the first key-value pair\nGet the first value\nGet the first key-value pair, with mutable access to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new vector with a fixed capacity of <code>N</code> and …\nProvides a reference to the front element, or None if the …\nProvides a mutable reference to the front element, or None …\nGets a reference to the value associated with this entry\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value corresponding to the key\nGets a mutable reference to the value associated with this …\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference to the value corresponding to …\nOverwrites the underlying map’s value with this entry’…\nInserts this entry into to underlying map, yields a …\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts a key-value pair into the map.\nInserts an element at position <code>index</code> within the vector, …\nVisits the values representing the intersection, i.e. the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contents of the vector as an array of length <code>M</code> …\nConverts a <code>String</code> into a byte vector.\nConsumes this entry to yield to key associated with it\nConsumes this entry and yields a reference to the …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns whether the deque is empty.\nReturns true if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns true if the map contains no elements\nReturns true if the vec is empty\nReturns whether the deque is full (i.e. if …\nReturns true if the vec is full\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nExamples\nReturns an iterator over the deque.\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the values of the set, in their …\nAn iterator visiting all key-value pairs in arbitrary …\nReturns an iterator that allows modifying each value.\nReturn an iterator over the key-value pairs of the map, in …\nAn iterator visiting all key-value pairs in arbitrary …\nGets a reference to the key that this entity corresponds to\nGet the key associated with this entry\nReturn an iterator over the keys of the map, in their order\nAn iterator visiting all keys in arbitrary order\nGet the last key-value pair\nGet the last value\nGet the last key-value pair, with mutable access to the …\nReturns the number of elements currently in the deque.\nReturns the current fill level of the buffer.\nReturn the number of key-value pairs in the map.\nReturns the number of elements in the set.\nReturns the number of elements in this map\nA fixed capacity Multiple-Producer Multiple-Consumer …\nConstructs a new, empty deque with a fixed capacity of <code>N</code>\nConstructs a new history buffer.\nCreates an empty <code>IndexMap</code>.\nCreates an empty <code>IndexSet</code>\nCreates an empty <code>LinearMap</code>\nConstructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …\nConstructs a new, empty vector with a fixed capacity of <code>N</code>\nConstructs a new history buffer, where every element is …\nReturns an iterator for iterating over the buffer from …\nA heap-less, interrupt-safe, lock-free memory pool (*)\nRemoves the last character from the string buffer and …\nRemoves the last element from a vector and returns it, or …\nRemoves the item from the back of the deque and returns …\nRemoves an item from the back of the deque and returns it, …\nRemoves the item from the front of the deque and returns …\nRemoves an item from the front of the deque and returns …\nRemoves the last element from a vector and returns it\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends an <code>item</code> to the back of the collection\nAppends an <code>item</code> to the back of the deque\nAppends an <code>item</code> to the back of the deque\nAppends an <code>item</code> to the front of the deque\nAppends an <code>item</code> to the front of the deque\nAppends a given string slice onto the end of this <code>String</code>.\nAppends an <code>item</code> to the back of the collection\nReturns a reference to the most recently written value.\nRemoves this entry from the map and yields its value\nSame as <code>swap_remove</code>\nRemoves a value from the set. Returns <code>true</code> if the value …\nRemoves a key from the map, returning the value at the key …\nRemoves and returns the element at position <code>index</code> within …\nRemoves this entry from the map and yields its …\nResizes the Vec in-place so that len is equal to new_len.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nA fixed sorted priority linked list, similar to <code>BinaryHeap</code> …\nFixed capacity Single Producer Single Consumer (SPSC) queue\nReturns <code>true</code> if <code>needle</code> is a prefix of the Vec.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemoves an element from the vector and returns it.\nRemoves an element from the vector and returns it.\nVisits the values representing the symmetric difference, …\nShortens this <code>String</code> to the specified length.\nShortens the vector, keeping the first <code>len</code> elements and …\nVisits the values representing the union, i.e. all the …\nReturn an iterator over the values of the map, in their …\nAn iterator visiting all values in arbitrary order\nReturn an iterator over mutable references to the the …\nAn iterator visiting all values mutably in arbitrary order\nWrites an element to the buffer, overwriting the oldest …\nA priority queue implemented with a binary heap.\nThe binary heap kind: min-heap or max-heap\nMax-heap\nMin-heap\nStructure wrapping a mutable reference to the greatest …\nReturns the capacity of the binary heap.\nDrops all items from the binary heap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …\nChecks if the binary heap is empty.\nReturns an iterator visiting all values in the underlying …\nReturns a mutable iterator visiting all values in the …\nReturns the length of the binary heap.\nCreates an empty BinaryHeap as a $K-heap.\nReturns the <em>top</em> (greatest if max-heap, smallest if …\nReturns a mutable reference to the greatest item in the …\nRemoves the <em>top</em> (greatest if max-heap, smallest if …\nRemoves the peeked value from the heap and returns it.\nRemoves the <em>top</em> (greatest if max-heap, smallest if …\nPushes an item onto the binary heap.\nPushes an item onto the binary heap without first checking …\nMPMC queue with a capacity for N elements N must be a …\nMPMC queue with a capability for 16 elements.\nMPMC queue with a capability for 2 elements.\nMPMC queue with a capability for 32 elements.\nMPMC queue with a capability for 4 elements.\nMPMC queue with a capability for 64 elements.\nMPMC queue with a capability for 8 elements.\nReturns the item in the front of the queue, or <code>None</code> if the …\nAdds an <code>item</code> to the end of the queue\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an empty queue\nA memory block\nInitialized type state\nUnfortunate implementation detail required to use the …\nA lock-free memory pool\nUninitialized type state\nClaims a memory block from the pool\nReturns a memory block to the pool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncreases the capacity of the pool\nIncreases the capacity of the pool\nInitializes this memory block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty pool\n<code>Pool</code> as a global singleton\nA memory block that belongs to the global memory pool, <code>POOL</code>\nThe type of data that can be allocated on this pool\nA global singleton memory pool\nClaims a memory block from the pool\nLike <code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather …\nForgets the contents of this memory block without running …\n(DO NOT USE, SEE DEPRECATION) Freezes the contents of this …\nReturns the argument unchanged.\nIncreases the capacity of the pool\nIncreases the capacity of the pool\nInitializes this memory block\nCalls <code>U::from(self)</code>.\n<code>std::sync::Arc</code> but backed by a memory <code>Pool</code> rather than …\nUnfortunate implementation detail required to use the …\nThe data behind the Arc pointer\nPool of Arc pointers\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Arc</code>\nComes from <code>SortedLinkedList::find_mut</code>.\nIterator for the linked list.\nThe linked list kind: min-list or max-list\nIndex for the <code>SortedLinkedList</code> with specific backing …\nIndex for the <code>SortedLinkedList</code> with specific backing …\nIndex for the <code>SortedLinkedList</code> with specific backing …\nMarker for Max sorted <code>SortedLinkedList</code>.\nMarker for Min sorted <code>SortedLinkedList</code>.\nA node in the <code>SortedLinkedList</code>.\nThe linked list.\nTrait for defining an index for the linked list, never …\nFind an element in the list that can be changed and …\nThis will resort the element into the correct position in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the linked list is empty.\nChecks if the linked list is full.\nGet an iterator over the sorted list.\nCreate a new linked list.\nCreate a new linked list.\nCreate a new linked list.\nPeek at the first element.\nPops the first element in the list.\nThis will pop the element from the list.\nPop an element from the list without checking so the list …\nPushes an element to the linked list and sorts it into …\nPushes a value onto the list without checking if the list …\nA queue “consumer”; it can dequeue items from the queue\nAn iterator over the items of a queue\nA mutable iterator over the items of a queue\nA queue “producer”; it can enqueue items into the queue\nA statically allocated single producer single consumer …\nReturns the maximum number of elements the queue can hold\nReturns the maximum number of elements the queue can hold\nReturns the maximum number of elements the queue can hold\nReturns the item in the front of the queue, or <code>None</code> if the …\nReturns the item in the front of the queue, or <code>None</code> if the …\nReturns the item in the front of the queue, without …\nReturns the item in the front of the queue, without …\nAdds an <code>item</code> to the end of the queue\nAdds an <code>item</code> to the end of the queue, returns back the <code>item</code>…\nAdds an <code>item</code> to the end of the queue, without checking if …\nAdds an <code>item</code> to the end of the queue, without checking if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty\nReturns <code>true</code> if the queue is full\nIterates from the front of the queue to the back\nReturns an iterator that allows modifying each value\nReturns the number of elements in the queue\nReturns the number of elements in the queue\nReturns the number of elements in the queue\nCreates an empty queue with a fixed capacity of <code>N - 1</code>\nReturns a reference to the item in the front of the queue …\nReturns the item in the front of the queue without …\nReturns if there are any items to dequeue. When this …\nReturns if there is any space to enqueue a new item. When …\nSplits a queue into producer and consumer endpoints")
searchState.loadedDescShard("rtic_time", 0, "Time-related traits &amp; structs.\nThe type for duration, defining a duration of time.\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nThis indicates that there was a timeout.\nDelay for some duration of time.\nDelay to some specific time instant.\nRe-export for macros\nRe-export for macros\nReturns the argument unchanged.\nUtility to implement a race condition free half-period …\nImplements <code>embedded_hal_async::delay::DelayNs</code> for a given …\nImplements <code>embedded_hal::delay::DelayNs</code> for a given …\nCalls <code>U::from(self)</code>.\nStructs and traits surrounding the <code>Monotonic</code> trait.\nGet the current time.\nTimeout after a specific duration.\nTimeout at a specific time.\nA generic timer queue for async executors.\nBit size of the timer. Does not need to be a multiple of <code>8</code>.\nAll bits set to <code>1</code>.\nThe lowest bit set to <code>1</code>.\nOperations a type has to support in order to be used as …\nThe value of the timer’s count register.\nThe <code>+</code> operation.\nThe <code>&amp;</code> operation.\nCalculates the current time from the half period counter …\nThe <code>&lt;&lt;</code> operation.\nThe <code>^</code> operation.\nThe backend for the timer queue\nThe type for duration, defining a duration of time.\nThe type for instant, defining an instant in time.\nThe internal type of the instant\nThe internal type of the duration\nA duration that can be used in <code>TimerQueueBasedMonotonic</code>.\nAn instant that can be used in <code>TimerQueueBasedMonotonic</code>.\nA <code>Monotonic</code> that is backed by the <code>TimerQueue</code>.\nConvert from ticks to the instant\nConvert the instant to ticks\nConvert the duration to ticks\nFuture returned by <code>delay</code> and <code>delay_until</code>.\nRepresents a single tick.\nThe type for ticks.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nA generic timer queue for async executors.\nA backend definition for a monotonic clock/counter.\nThe ticks of a timer.\nClear the compare interrupt flag.\nCompares to another tick count.\nDelay for at least some duration of time.\nDelay to some specific time instant.\nOptional. This is used to save power, this is called when …\nOptional. This is used to save power, this is called when …\nOptional. This is used to save power, this is called when …\nOptional. This is used to save power, this is called when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes the initialized monotonic to initialize the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if <code>self</code> is at the same time as <code>other</code> or later.\nTrue if <code>self</code> is at the same time as <code>other</code> or later.\nMake a new queue.\nGet the current time.\nForwards the <code>Monotonic::now()</code> method.\nOptional. Runs on interrupt before any timer queue …\nOptional. Runs on interrupt before any timer queue …\nCall this in the interrupt handler of the hardware timer …\nPend the timer’s interrupt.\nSet the compare value of the timer interrupt.\nTimeout after at least a specific duration.\nTimeout at a specific time.\nReturns a reference to the underlying timer queue.\nWrapping addition.")
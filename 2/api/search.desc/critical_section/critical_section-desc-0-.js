searchState.loadedDescShard("critical_section", 0, "critical-section\nCritical section token.\nMethods required for a critical section implementation.\nA mutex based on critical sections.\nRaw, transparent “restore state”.\nOpaque “restore state”.\nAcquire a critical section in the current thread.\nAcquire the critical section.\nBorrows the data for the duration of the critical section.\nBorrow the data and call <code>RefCell::borrow</code>\nBorrow the data and call <code>RefCell::borrow_mut</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the contained value when the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the contained value, consuming the mutex.\nCreate an invalid, dummy  <code>RestoreState</code>.\nCreates a new mutex.\nCreates a critical section token.\nRelease the critical section.\nRelease the critical section.\nBorrow the data and call <code>RefCell::replace</code>\nBorrow the data and call <code>RefCell::replace_with</code>\nSet the critical section implementation.\nBorrow the data and call <code>RefCell::take</code>\nExecute closure <code>f</code> in a critical section.")
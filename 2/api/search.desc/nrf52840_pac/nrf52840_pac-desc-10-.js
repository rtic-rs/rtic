searchState.loadedDescShard("nrf52840_pac", 10, "Register block\nSCL (rw) register accessor: an alias for <code>Reg&lt;SCL_SPEC&gt;</code>\nSDA (rw) register accessor: an alias for <code>Reg&lt;SDA_SPEC&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for SCL signal\n0x00 - Pin select for SCL signal\nPin select for SDA signal\n0x04 - Pin select for SDA signal\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SCL</code> reader\nPin select for SCL signal\nRegister <code>SCL</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SDA</code> reader\nPin select for SDA signal\nRegister <code>SDA</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nLIST (rw) register accessor: an alias for <code>Reg&lt;LIST_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last transaction\n0x08 - Number of bytes transferred in the last transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEasyDMA list type\n0x0c - EasyDMA list type\nMaximum number of bytes in receive buffer\n0x04 - Maximum number of bytes in receive buffer\nData pointer\n0x00 - Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Use array list\n0: Disable EasyDMA list\nList type\nField <code>LIST</code> reader - List type\nEasyDMA list type\nField <code>LIST</code> writer - List type\nRegister <code>LIST</code> reader\nRegister <code>LIST</code> writer\nUse array list\nWrites raw bits to the register.\nDisable EasyDMA list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ARRAY_LIST</code>\nChecks if the value of the field is <code>DISABLED</code>\nBits 0:2 - List type\nBits 0:2 - List type\nGet enumerated values variant\nField <code>MAXCNT</code> reader - Maximum number of bytes in receive …\nMaximum number of bytes in receive buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in receive …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in receive buffer\nBits 0:15 - Maximum number of bytes in receive buffer\nField <code>PTR</code> reader - Data pointer\nData pointer\nField <code>PTR</code> writer - Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Data pointer\nBits 0:31 - Data pointer\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\nShortcut between LASTRX event and STARTTX task\nField <code>LASTRX_STARTTX</code> reader - Shortcut between LASTRX …\nField <code>LASTRX_STARTTX</code> writer - Shortcut between LASTRX …\nShortcut between LASTRX event and STOP task\nField <code>LASTRX_STOP</code> reader - Shortcut between LASTRX event …\nField <code>LASTRX_STOP</code> writer - Shortcut between LASTRX event …\nShortcut between LASTRX event and SUSPEND task\nField <code>LASTRX_SUSPEND</code> reader - Shortcut between LASTRX …\nField <code>LASTRX_SUSPEND</code> writer - Shortcut between LASTRX …\nShortcut between LASTTX event and STARTRX task\nField <code>LASTTX_STARTRX</code> reader - Shortcut between LASTTX …\nField <code>LASTTX_STARTRX</code> writer - Shortcut between LASTTX …\nShortcut between LASTTX event and STOP task\nField <code>LASTTX_STOP</code> reader - Shortcut between LASTTX event …\nField <code>LASTTX_STOP</code> writer - Shortcut between LASTTX event …\nShortcut between LASTTX event and SUSPEND task\nField <code>LASTTX_SUSPEND</code> reader - Shortcut between LASTTX …\nField <code>LASTTX_SUSPEND</code> writer - Shortcut between LASTTX …\nRegister <code>SHORTS</code> reader\nShortcut register\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 10 - Shortcut between LASTRX event and STARTTX task\nBit 10 - Shortcut between LASTRX event and STARTTX task\nBit 12 - Shortcut between LASTRX event and STOP task\nBit 12 - Shortcut between LASTRX event and STOP task\nBit 11 - Shortcut between LASTRX event and SUSPEND task\nBit 11 - Shortcut between LASTRX event and SUSPEND task\nBit 7 - Shortcut between LASTTX event and STARTRX task\nBit 7 - Shortcut between LASTTX event and STARTRX task\nBit 9 - Shortcut between LASTTX event and STOP task\nBit 9 - Shortcut between LASTTX event and STOP task\nBit 8 - Shortcut between LASTTX event and SUSPEND task\nBit 8 - Shortcut between LASTTX event and SUSPEND task\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nResume TWI transaction\nField <code>TASKS_RESUME</code> writer -\nRegister <code>TASKS_RESUME</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart TWI receive sequence\nField <code>TASKS_STARTRX</code> writer -\nRegister <code>TASKS_STARTRX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart TWI transmit sequence\nField <code>TASKS_STARTTX</code> writer -\nRegister <code>TASKS_STARTTX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStop TWI transaction. Must be issued while the TWI master …\nField <code>TASKS_STOP</code> writer -\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nSuspend TWI transaction\nField <code>TASKS_SUSPEND</code> writer -\nRegister <code>TASKS_SUSPEND</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nLIST (rw) register accessor: an alias for <code>Reg&lt;LIST_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last transaction\n0x08 - Number of bytes transferred in the last transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEasyDMA list type\n0x0c - EasyDMA list type\nMaximum number of bytes in transmit buffer\n0x04 - Maximum number of bytes in transmit buffer\nData pointer\n0x00 - Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Use array list\n0: Disable EasyDMA list\nList type\nField <code>LIST</code> reader - List type\nEasyDMA list type\nField <code>LIST</code> writer - List type\nRegister <code>LIST</code> reader\nRegister <code>LIST</code> writer\nUse array list\nWrites raw bits to the register.\nDisable EasyDMA list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ARRAY_LIST</code>\nChecks if the value of the field is <code>DISABLED</code>\nBits 0:2 - List type\nBits 0:2 - List type\nGet enumerated values variant\nField <code>MAXCNT</code> reader - Maximum number of bytes in transmit …\nMaximum number of bytes in transmit buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in transmit …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in transmit buffer\nBits 0:15 - Maximum number of bytes in transmit buffer\nField <code>PTR</code> reader - Data pointer\nData pointer\nField <code>PTR</code> writer - Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Data pointer\nBits 0:31 - Data pointer\nADDRESS (rw) register accessor: an alias for …\nCONFIG (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nERRORSRC (rw) register accessor: an alias for …\nEVENTS_ERROR (rw) register accessor: an alias for …\nEVENTS_READ (rw) register accessor: an alias for …\nEVENTS_RXSTARTED (rw) register accessor: an alias for …\nEVENTS_STOPPED (rw) register accessor: an alias for …\nEVENTS_TXSTARTED (rw) register accessor: an alias for …\nEVENTS_WRITE (rw) register accessor: an alias for …\nINTEN (rw) register accessor: an alias for <code>Reg&lt;INTEN_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nMATCH (r) register accessor: an alias for <code>Reg&lt;MATCH_SPEC&gt;</code>\nORC (rw) register accessor: an alias for <code>Reg&lt;ORC_SPEC&gt;</code>\nUnspecified\nRXD EasyDMA channel\nRegister block\nSHORTS (rw) register accessor: an alias for …\nTASKS_PREPARERX (w) register accessor: an alias for …\nTASKS_PREPARETX (w) register accessor: an alias for …\nTASKS_RESUME (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nTASKS_SUSPEND (w) register accessor: an alias for …\nTXD EasyDMA channel\nDescription collection[n]: TWI slave address n\n0x588..0x590 - Description collection[n]: TWI slave …\nConfiguration register for the address match mechanism\n0x594 - Configuration register for the address match …\nEnable TWIS\n0x500 - Enable TWIS\nError source\n0x4d0 - Error source\nTWI error\n0x124 - TWI error\nRead command received\n0x168 - Read command received\nReceive sequence started\n0x14c - Receive sequence started\nTWI stopped\n0x104 - TWI stopped\nTransmit sequence started\n0x150 - Transmit sequence started\nWrite command received\n0x164 - Write command received\nReturns the argument unchanged.\nEnable or disable interrupt\n0x300 - Enable or disable interrupt\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nStatus register indicating which address had a match\n0x4d4 - Status register indicating which address had a …\nOver-read character. Character sent out in case of an …\n0x5c0 - Over-read character. Character sent out in case of …\nCluster Unspecified\n0x508..0x510 - Unspecified\nCluster RXD EasyDMA channel\n0x534..0x540 - RXD EasyDMA channel\nShortcut register\n0x200 - Shortcut register\nPrepare the TWI slave to respond to a write command\n0x30 - Prepare the TWI slave to respond to a write command\nPrepare the TWI slave to respond to a read command\n0x34 - Prepare the TWI slave to respond to a read command\nResume TWI transaction\n0x20 - Resume TWI transaction\nStop TWI transaction\n0x14 - Stop TWI transaction\nSuspend TWI transaction\n0x1c - Suspend TWI transaction\nCluster TXD EasyDMA channel\n0x544..0x550 - TXD EasyDMA channel\nField <code>ADDRESS</code> reader - TWI slave address\nDescription collection[n]: TWI slave address n\nField <code>ADDRESS</code> writer - TWI slave address\nRegister <code>ADDRESS[%s]</code> reader\nRegister <code>ADDRESS[%s]</code> writer\nBits 0:6 - TWI slave address\nBits 0:6 - TWI slave address\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable or disable address matching on ADDRESS[0]\nField <code>ADDRESS0</code> reader - Enable or disable address matching …\nField <code>ADDRESS0</code> writer - Enable or disable address matching …\nEnable or disable address matching on ADDRESS[1]\nField <code>ADDRESS1</code> reader - Enable or disable address matching …\nField <code>ADDRESS1</code> writer - Enable or disable address matching …\nConfiguration register for the address match mechanism\n0: Disabled\n0: Disabled\n1: Enabled\n1: Enabled\nRegister <code>CONFIG</code> reader\nRegister <code>CONFIG</code> writer\nBit 0 - Enable or disable address matching on ADDRESS[0]\nBit 0 - Enable or disable address matching on ADDRESS[0]\nBit 1 - Enable or disable address matching on ADDRESS[1]\nBit 1 - Enable or disable address matching on ADDRESS[1]\nWrites raw bits to the register.\nDisabled\nDisabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\n0: Disable TWIS\n9: Enable TWIS\nEnable or disable TWIS\nField <code>ENABLE</code> reader - Enable or disable TWIS\nEnable TWIS\nField <code>ENABLE</code> writer - Enable or disable TWIS\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable TWIS\nBits 0:3 - Enable or disable TWIS\nBits 0:3 - Enable or disable TWIS\nEnable TWIS\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\n1: Error occurred\n1: Error occurred\nNACK sent after receiving a data byte\nField <code>DNACK</code> reader - NACK sent after receiving a data byte\nField <code>DNACK</code> writer - NACK sent after receiving a data byte\nError source\n0: Error did not occur\n0: Error did not occur\n0: Error did not occur\nRX buffer overflow detected, and prevented\nField <code>OVERFLOW</code> reader - RX buffer overflow detected, and …\nField <code>OVERFLOW</code> writer - RX buffer overflow detected, and …\nTX buffer over-read detected, and prevented\nField <code>OVERREAD</code> reader - TX buffer over-read detected, and …\nField <code>OVERREAD</code> writer - TX buffer over-read detected, and …\nRegister <code>ERRORSRC</code> reader\n1: Error occurred\nRegister <code>ERRORSRC</code> writer\nWrites raw bits to the register.\nError occurred\nError occurred\nBit 2 - NACK sent after receiving a data byte\nBit 2 - NACK sent after receiving a data byte\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DETECTED</code>\nChecks if the value of the field is <code>DETECTED</code>\nChecks if the value of the field is <code>NOT_DETECTED</code>\nChecks if the value of the field is <code>NOT_DETECTED</code>\nChecks if the value of the field is <code>NOT_RECEIVED</code>\nChecks if the value of the field is <code>RECEIVED</code>\nError did not occur\nError did not occur\nError did not occur\nBit 0 - RX buffer overflow detected, and prevented\nBit 0 - RX buffer overflow detected, and prevented\nBit 3 - TX buffer over-read detected, and prevented\nBit 3 - TX buffer over-read detected, and prevented\nError occurred\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>EVENTS_ERROR</code> reader -\nTWI error\nField <code>EVENTS_ERROR</code> writer -\nRegister <code>EVENTS_ERROR</code> reader\nRegister <code>EVENTS_ERROR</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_READ</code> reader -\nRead command received\nField <code>EVENTS_READ</code> writer -\nRegister <code>EVENTS_READ</code> reader\nRegister <code>EVENTS_READ</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_RXSTARTED</code> reader -\nReceive sequence started\nField <code>EVENTS_RXSTARTED</code> writer -\nRegister <code>EVENTS_RXSTARTED</code> reader\nRegister <code>EVENTS_RXSTARTED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_STOPPED</code> reader -\nTWI stopped\nField <code>EVENTS_STOPPED</code> writer -\nRegister <code>EVENTS_STOPPED</code> reader\nRegister <code>EVENTS_STOPPED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_TXSTARTED</code> reader -\nTransmit sequence started\nField <code>EVENTS_TXSTARTED</code> writer -\nRegister <code>EVENTS_TXSTARTED</code> reader\nRegister <code>EVENTS_TXSTARTED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_WRITE</code> reader -\nWrite command received\nField <code>EVENTS_WRITE</code> writer -\nRegister <code>EVENTS_WRITE</code> reader\nRegister <code>EVENTS_WRITE</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nEnable or disable interrupt for ERROR event\nField <code>ERROR</code> reader - Enable or disable interrupt for ERROR …\nField <code>ERROR</code> writer - Enable or disable interrupt for ERROR …\nEnable or disable interrupt\nRegister <code>INTEN</code> reader\nEnable or disable interrupt for READ event\nField <code>READ</code> reader - Enable or disable interrupt for READ …\nField <code>READ</code> writer - Enable or disable interrupt for READ …\nEnable or disable interrupt for RXSTARTED event\nField <code>RXSTARTED</code> reader - Enable or disable interrupt for …\nField <code>RXSTARTED</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Enable or disable interrupt for …\nField <code>STOPPED</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for TXSTARTED event\nField <code>TXSTARTED</code> reader - Enable or disable interrupt for …\nField <code>TXSTARTED</code> writer - Enable or disable interrupt for …\nRegister <code>INTEN</code> writer\nEnable or disable interrupt for WRITE event\nField <code>WRITE</code> reader - Enable or disable interrupt for WRITE …\nField <code>WRITE</code> writer - Enable or disable interrupt for WRITE …\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 9 - Enable or disable interrupt for ERROR event\nBit 9 - Enable or disable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 26 - Enable or disable interrupt for READ event\nBit 26 - Enable or disable interrupt for READ event\nBit 19 - Enable or disable interrupt for RXSTARTED event\nBit 19 - Enable or disable interrupt for RXSTARTED event\nBit 1 - Enable or disable interrupt for STOPPED event\nBit 1 - Enable or disable interrupt for STOPPED event\nBit 20 - Enable or disable interrupt for TXSTARTED event\nBit 20 - Enable or disable interrupt for TXSTARTED event\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 25 - Enable or disable interrupt for WRITE event\nBit 25 - Enable or disable interrupt for WRITE event\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for ERROR event\nWrite ‘1’ to disable interrupt for ERROR event\nField <code>ERROR</code> reader - Write ‘1’ to disable interrupt …\nField <code>ERROR</code> writer - Write ‘1’ to disable interrupt …\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for READ event\nWrite ‘1’ to disable interrupt for READ event\nField <code>READ</code> reader - Write ‘1’ to disable interrupt for …\nField <code>READ</code> writer - Write ‘1’ to disable interrupt for …\nWrite ‘1’ to disable interrupt for RXSTARTED event\nWrite ‘1’ to disable interrupt for RXSTARTED event\nField <code>RXSTARTED</code> reader - Write ‘1’ to disable …\nField <code>RXSTARTED</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for STOPPED event\nWrite ‘1’ to disable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Write ‘1’ to disable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for TXSTARTED event\nWrite ‘1’ to disable interrupt for TXSTARTED event\nField <code>TXSTARTED</code> reader - Write ‘1’ to disable …\nField <code>TXSTARTED</code> writer - Write ‘1’ to disable …\nRegister <code>INTENCLR</code> writer\nWrite ‘1’ to disable interrupt for WRITE event\nWrite ‘1’ to disable interrupt for WRITE event\nField <code>WRITE</code> reader - Write ‘1’ to disable interrupt …\nField <code>WRITE</code> writer - Write ‘1’ to disable interrupt …\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 9 - Write ‘1’ to disable interrupt for ERROR event\nBit 9 - Write ‘1’ to disable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 26 - Write ‘1’ to disable interrupt for READ event\nBit 26 - Write ‘1’ to disable interrupt for READ event\nBit 19 - Write ‘1’ to disable interrupt for RXSTARTED …\nBit 19 - Write ‘1’ to disable interrupt for RXSTARTED …\nBit 1 - Write ‘1’ to disable interrupt for STOPPED …\nBit 1 - Write ‘1’ to disable interrupt for STOPPED …\nBit 20 - Write ‘1’ to disable interrupt for TXSTARTED …\nBit 20 - Write ‘1’ to disable interrupt for TXSTARTED …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 25 - Write ‘1’ to disable interrupt for WRITE event\nBit 25 - Write ‘1’ to disable interrupt for WRITE event\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for ERROR event\nWrite ‘1’ to enable interrupt for ERROR event\nField <code>ERROR</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ERROR</code> writer - Write ‘1’ to enable interrupt for …\nEnable interrupt\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for READ event\nWrite ‘1’ to enable interrupt for READ event\nField <code>READ</code> reader - Write ‘1’ to enable interrupt for …\nField <code>READ</code> writer - Write ‘1’ to enable interrupt for …\nWrite ‘1’ to enable interrupt for RXSTARTED event\nWrite ‘1’ to enable interrupt for RXSTARTED event\nField <code>RXSTARTED</code> reader - Write ‘1’ to enable interrupt …\nField <code>RXSTARTED</code> writer - Write ‘1’ to enable interrupt …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for STOPPED event\nWrite ‘1’ to enable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Write ‘1’ to enable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for TXSTARTED event\nWrite ‘1’ to enable interrupt for TXSTARTED event\nField <code>TXSTARTED</code> reader - Write ‘1’ to enable interrupt …\nField <code>TXSTARTED</code> writer - Write ‘1’ to enable interrupt …\nRegister <code>INTENSET</code> writer\nWrite ‘1’ to enable interrupt for WRITE event\nWrite ‘1’ to enable interrupt for WRITE event\nField <code>WRITE</code> reader - Write ‘1’ to enable interrupt for …\nField <code>WRITE</code> writer - Write ‘1’ to enable interrupt for …\nWrites raw bits to the register.\nBit 9 - Write ‘1’ to enable interrupt for ERROR event\nBit 9 - Write ‘1’ to enable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 26 - Write ‘1’ to enable interrupt for READ event\nBit 26 - Write ‘1’ to enable interrupt for READ event\nBit 19 - Write ‘1’ to enable interrupt for RXSTARTED …\nBit 19 - Write ‘1’ to enable interrupt for RXSTARTED …\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 1 - Write ‘1’ to enable interrupt for STOPPED event\nBit 1 - Write ‘1’ to enable interrupt for STOPPED event\nBit 20 - Write ‘1’ to enable interrupt for TXSTARTED …\nBit 20 - Write ‘1’ to enable interrupt for TXSTARTED …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 25 - Write ‘1’ to enable interrupt for WRITE event\nBit 25 - Write ‘1’ to enable interrupt for WRITE event\nField <code>MATCH</code> reader - Which of the addresses in {ADDRESS} …\nStatus register indicating which address had a match\nRegister <code>MATCH</code> reader\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Which of the addresses in {ADDRESS} matched the …\nField <code>ORC</code> reader - Over-read character. Character sent out …\nOver-read character. Character sent out in case of an …\nField <code>ORC</code> writer - Over-read character. Character sent out …\nRegister <code>ORC</code> reader\nRegister <code>ORC</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Over-read character. Character sent out in case …\nBits 0:7 - Over-read character. Character sent out in case …\nRegister block\nSCL (rw) register accessor: an alias for <code>Reg&lt;SCL_SPEC&gt;</code>\nSDA (rw) register accessor: an alias for <code>Reg&lt;SDA_SPEC&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for SCL signal\n0x00 - Pin select for SCL signal\nPin select for SDA signal\n0x04 - Pin select for SDA signal\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SCL</code> reader\nPin select for SCL signal\nRegister <code>SCL</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SDA</code> reader\nPin select for SDA signal\nRegister <code>SDA</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last RXD transaction\n0x08 - Number of bytes transferred in the last RXD …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum number of bytes in RXD buffer\n0x04 - Maximum number of bytes in RXD buffer\nRXD Data pointer\n0x00 - RXD Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last RXD transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last RXD …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>MAXCNT</code> reader - Maximum number of bytes in RXD buffer\nMaximum number of bytes in RXD buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in RXD buffer\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in RXD buffer\nBits 0:15 - Maximum number of bytes in RXD buffer\nField <code>PTR</code> reader - RXD Data pointer\nRXD Data pointer\nField <code>PTR</code> writer - RXD Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - RXD Data pointer\nBits 0:31 - RXD Data pointer\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\nRegister <code>SHORTS</code> reader\nShortcut between READ event and SUSPEND task\nField <code>READ_SUSPEND</code> reader - Shortcut between READ event …\nField <code>READ_SUSPEND</code> writer - Shortcut between READ event …\nShortcut register\nRegister <code>SHORTS</code> writer\nShortcut between WRITE event and SUSPEND task\nField <code>WRITE_SUSPEND</code> reader - Shortcut between WRITE event …\nField <code>WRITE_SUSPEND</code> writer - Shortcut between WRITE event …\nWrites raw bits to the register.\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 14 - Shortcut between READ event and SUSPEND task\nBit 14 - Shortcut between READ event and SUSPEND task\nGet enumerated values variant\nGet enumerated values variant\nBit 13 - Shortcut between WRITE event and SUSPEND task\nBit 13 - Shortcut between WRITE event and SUSPEND task\nPrepare the TWI slave to respond to a write command\nField <code>TASKS_PREPARERX</code> writer -\nRegister <code>TASKS_PREPARERX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nPrepare the TWI slave to respond to a read command\nField <code>TASKS_PREPARETX</code> writer -\nRegister <code>TASKS_PREPARETX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nResume TWI transaction\nField <code>TASKS_RESUME</code> writer -\nRegister <code>TASKS_RESUME</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStop TWI transaction\nField <code>TASKS_STOP</code> writer -\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nSuspend TWI transaction\nField <code>TASKS_SUSPEND</code> writer -\nRegister <code>TASKS_SUSPEND</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last TXD transaction\n0x08 - Number of bytes transferred in the last TXD …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum number of bytes in TXD buffer\n0x04 - Maximum number of bytes in TXD buffer\nTXD Data pointer\n0x00 - TXD Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last TXD transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last TXD …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>MAXCNT</code> reader - Maximum number of bytes in TXD buffer\nMaximum number of bytes in TXD buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in TXD buffer\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in TXD buffer\nBits 0:15 - Maximum number of bytes in TXD buffer\nField <code>PTR</code> reader - TXD Data pointer\nTXD Data pointer\nField <code>PTR</code> writer - TXD Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - TXD Data pointer\nBits 0:31 - TXD Data pointer\nBAUDRATE (rw) register accessor: an alias for …\nCONFIG (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nERRORSRC (rw) register accessor: an alias for …\nEVENTS_CTS (rw) register accessor: an alias for …\nEVENTS_ERROR (rw) register accessor: an alias for …\nEVENTS_NCTS (rw) register accessor: an alias for …\nEVENTS_RXDRDY (rw) register accessor: an alias for …\nEVENTS_RXTO (rw) register accessor: an alias for …\nEVENTS_TXDRDY (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nUnspecified\nRXD (r) register accessor: an alias for <code>Reg&lt;RXD_SPEC&gt;</code>\nRegister block\nSHORTS (rw) register accessor: an alias for …\nTASKS_STARTRX (w) register accessor: an alias for …\nTASKS_STARTTX (w) register accessor: an alias for …\nTASKS_STOPRX (w) register accessor: an alias for …\nTASKS_STOPTX (w) register accessor: an alias for …\nTASKS_SUSPEND (w) register accessor: an alias for …\nTXD (w) register accessor: an alias for <code>Reg&lt;TXD_SPEC&gt;</code>\nBaud rate. Accuracy depends on the HFCLK source selected.\n0x524 - Baud rate. Accuracy depends on the HFCLK source …\nConfiguration of parity and hardware flow control\n0x56c - Configuration of parity and hardware flow control\nEnable UART\n0x500 - Enable UART\nError source\n0x480 - Error source\nCTS is activated (set low). Clear To Send.\n0x100 - CTS is activated (set low). Clear To Send.\nError detected\n0x124 - Error detected\nCTS is deactivated (set high). Not Clear To Send.\n0x104 - CTS is deactivated (set high). Not Clear To Send.\nData received in RXD\n0x108 - Data received in RXD\nReceiver timeout\n0x144 - Receiver timeout\nData sent from TXD\n0x11c - Data sent from TXD\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nCluster Unspecified\n0x508..0x518 - Unspecified\nRXD register\n0x518 - RXD register\nShortcut register\n0x200 - Shortcut register\nStart UART receiver\n0x00 - Start UART receiver\nStart UART transmitter\n0x08 - Start UART transmitter\nStop UART receiver\n0x04 - Stop UART receiver\nStop UART transmitter\n0x0c - Stop UART transmitter\nSuspend UART\n0x1c - Suspend UART\nTXD register\n0x51c - TXD register\n30924800: 115200 baud (actual rate: 115942)\n323584: 1200 baud (actual rate: 1205)\n3866624: 14400 baud (actual rate: 14414)\n5152768: 19200 baud (actual rate: 19208)\n268435456: 1Mega baud\n61845504: 230400 baud (actual rate: 231884)\n643072: 2400 baud (actual rate: 2396)\n67108864: 250000 baud\n7729152: 28800 baud (actual rate: 28829)\n8388608: 31250 baud\n10309632: 38400 baud (actual rate: 38462)\n123695104: 460800 baud (actual rate: 470588)\n1290240: 4800 baud (actual rate: 4808)\n15007744: 56000 baud (actual rate: 55944)\n15462400: 57600 baud (actual rate: 57762)\n20615168: 76800 baud (actual rate: 76923)\n247386112: 921600 baud (actual rate: 941176)\n2576384: 9600 baud (actual rate: 9598)\nBaud rate\nField <code>BAUDRATE</code> reader - Baud rate\nBaud rate. Accuracy depends on the HFCLK source selected.\nField <code>BAUDRATE</code> writer - Baud rate\nRegister <code>BAUDRATE</code> reader\nRegister <code>BAUDRATE</code> writer\n115200 baud (actual rate: 115942)\n1200 baud (actual rate: 1205)\n14400 baud (actual rate: 14414)\n19200 baud (actual rate: 19208)\n1Mega baud\n230400 baud (actual rate: 231884)\n2400 baud (actual rate: 2396)\n250000 baud\n28800 baud (actual rate: 28829)\n31250 baud\n38400 baud (actual rate: 38462)\n460800 baud (actual rate: 470588)\n4800 baud (actual rate: 4808)\n56000 baud (actual rate: 55944)\n57600 baud (actual rate: 57762)\n76800 baud (actual rate: 76923)\n921600 baud (actual rate: 941176)\n9600 baud (actual rate: 9598)\nBits 0:31 - Baud rate\nBits 0:31 - Baud rate\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BAUD115200</code>\nChecks if the value of the field is <code>BAUD1200</code>\nChecks if the value of the field is <code>BAUD14400</code>\nChecks if the value of the field is <code>BAUD19200</code>\nChecks if the value of the field is <code>BAUD1M</code>\nChecks if the value of the field is <code>BAUD230400</code>\nChecks if the value of the field is <code>BAUD2400</code>\nChecks if the value of the field is <code>BAUD250000</code>\nChecks if the value of the field is <code>BAUD28800</code>\nChecks if the value of the field is <code>BAUD31250</code>\nChecks if the value of the field is <code>BAUD38400</code>\nChecks if the value of the field is <code>BAUD460800</code>\nChecks if the value of the field is <code>BAUD4800</code>\nChecks if the value of the field is <code>BAUD56000</code>\nChecks if the value of the field is <code>BAUD57600</code>\nChecks if the value of the field is <code>BAUD76800</code>\nChecks if the value of the field is <code>BAUD921600</code>\nChecks if the value of the field is <code>BAUD9600</code>\nGet enumerated values variant\nConfiguration of parity and hardware flow control\n0: Disabled\n1: Enabled\n0: Exclude parity bit\nHardware flow control\nField <code>HWFC</code> reader - Hardware flow control\nField <code>HWFC</code> writer - Hardware flow control\n7: Include parity bit\nParity\nField <code>PARITY</code> reader - Parity\nField <code>PARITY</code> writer - Parity\nRegister <code>CONFIG</code> reader\nRegister <code>CONFIG</code> writer\nWrites raw bits to the register.\nDisabled\nEnabled\nExclude parity bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 0 - Hardware flow control\nBit 0 - Hardware flow control\nInclude parity bit\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nBits 1:3 - Parity\nBits 1:3 - Parity\nGet enumerated values variant\nGet enumerated values variant\n0: Disable UART\n4: Enable UART\nEnable or disable UART\nField <code>ENABLE</code> reader - Enable or disable UART\nEnable UART\nField <code>ENABLE</code> writer - Enable or disable UART\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable UART\nBits 0:3 - Enable or disable UART\nBits 0:3 - Enable or disable UART\nEnable UART\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nBreak condition\nField <code>BREAK</code> reader - Break condition\nField <code>BREAK</code> writer - Break condition\nError source\nFraming error occurred\nField <code>FRAMING</code> reader - Framing error occurred\nField <code>FRAMING</code> writer - Framing error occurred\n0: Read: error not present\n0: Read: error not present\n0: Read: error not present\n0: Read: error not present\nOverrun error\nField <code>OVERRUN</code> reader - Overrun error\nField <code>OVERRUN</code> writer - Overrun error\nParity error\nField <code>PARITY</code> reader - Parity error\nField <code>PARITY</code> writer - Parity error\n1: Read: error present\n1: Read: error present\n1: Read: error present\n1: Read: error present\nRegister <code>ERRORSRC</code> reader\nRegister <code>ERRORSRC</code> writer\nWrites raw bits to the register.\nBit 3 - Break condition\nBit 3 - Break condition\nBit 2 - Framing error occurred\nBit 2 - Framing error occurred\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nRead: error not present\nRead: error not present\nRead: error not present\nRead: error not present\nBit 0 - Overrun error\nBit 0 - Overrun error\nBit 1 - Parity error\nBit 1 - Parity error\nRead: error present\nRead: error present\nRead: error present\nRead: error present\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>EVENTS_CTS</code> reader -\nCTS is activated (set low). Clear To Send.\nField <code>EVENTS_CTS</code> writer -\nRegister <code>EVENTS_CTS</code> reader\nRegister <code>EVENTS_CTS</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_ERROR</code> reader -\nError detected\nField <code>EVENTS_ERROR</code> writer -\nRegister <code>EVENTS_ERROR</code> reader\nRegister <code>EVENTS_ERROR</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_NCTS</code> reader -\nCTS is deactivated (set high). Not Clear To Send.\nField <code>EVENTS_NCTS</code> writer -\nRegister <code>EVENTS_NCTS</code> reader\nRegister <code>EVENTS_NCTS</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_RXDRDY</code> reader -\nData received in RXD\nField <code>EVENTS_RXDRDY</code> writer -\nRegister <code>EVENTS_RXDRDY</code> reader\nRegister <code>EVENTS_RXDRDY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_RXTO</code> reader -\nReceiver timeout\nField <code>EVENTS_RXTO</code> writer -\nRegister <code>EVENTS_RXTO</code> reader\nRegister <code>EVENTS_RXTO</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_TXDRDY</code> reader -\nData sent from TXD\nField <code>EVENTS_TXDRDY</code> writer -\nRegister <code>EVENTS_TXDRDY</code> reader\nRegister <code>EVENTS_TXDRDY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\nWrite ‘1’ to disable interrupt for CTS event\nWrite ‘1’ to disable interrupt for CTS event\nField <code>CTS</code> reader - Write ‘1’ to disable interrupt for …\nField <code>CTS</code> writer - Write ‘1’ to disable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for ERROR event\nWrite ‘1’ to disable interrupt for ERROR event\nField <code>ERROR</code> reader - Write ‘1’ to disable interrupt …\nField <code>ERROR</code> writer - Write ‘1’ to disable interrupt …\nDisable interrupt\nWrite ‘1’ to disable interrupt for NCTS event\nWrite ‘1’ to disable interrupt for NCTS event\nField <code>NCTS</code> reader - Write ‘1’ to disable interrupt for …\nField <code>NCTS</code> writer - Write ‘1’ to disable interrupt for …\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for RXDRDY event\nWrite ‘1’ to disable interrupt for RXDRDY event\nField <code>RXDRDY</code> reader - Write ‘1’ to disable interrupt …\nField <code>RXDRDY</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for RXTO event\nWrite ‘1’ to disable interrupt for RXTO event\nField <code>RXTO</code> reader - Write ‘1’ to disable interrupt for …\nField <code>RXTO</code> writer - Write ‘1’ to disable interrupt for …\nWrite ‘1’ to disable interrupt for TXDRDY event\nWrite ‘1’ to disable interrupt for TXDRDY event\nField <code>TXDRDY</code> reader - Write ‘1’ to disable interrupt …\nField <code>TXDRDY</code> writer - Write ‘1’ to disable interrupt …\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 0 - Write ‘1’ to disable interrupt for CTS event\nBit 0 - Write ‘1’ to disable interrupt for CTS event\nBit 9 - Write ‘1’ to disable interrupt for ERROR event\nBit 9 - Write ‘1’ to disable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to disable interrupt for NCTS event\nBit 1 - Write ‘1’ to disable interrupt for NCTS event\nBit 2 - Write ‘1’ to disable interrupt for RXDRDY event\nBit 2 - Write ‘1’ to disable interrupt for RXDRDY event\nBit 17 - Write ‘1’ to disable interrupt for RXTO event\nBit 17 - Write ‘1’ to disable interrupt for RXTO event\nBit 7 - Write ‘1’ to disable interrupt for TXDRDY event\nBit 7 - Write ‘1’ to disable interrupt for TXDRDY event\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for CTS event\nWrite ‘1’ to enable interrupt for CTS event\nField <code>CTS</code> reader - Write ‘1’ to enable interrupt for …\nField <code>CTS</code> writer - Write ‘1’ to enable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for ERROR event\nWrite ‘1’ to enable interrupt for ERROR event\nField <code>ERROR</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ERROR</code> writer - Write ‘1’ to enable interrupt for …\nEnable interrupt\nWrite ‘1’ to enable interrupt for NCTS event\nWrite ‘1’ to enable interrupt for NCTS event\nField <code>NCTS</code> reader - Write ‘1’ to enable interrupt for …\nField <code>NCTS</code> writer - Write ‘1’ to enable interrupt for …\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for RXDRDY event\nWrite ‘1’ to enable interrupt for RXDRDY event\nField <code>RXDRDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>RXDRDY</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for RXTO event\nWrite ‘1’ to enable interrupt for RXTO event\nField <code>RXTO</code> reader - Write ‘1’ to enable interrupt for …\nField <code>RXTO</code> writer - Write ‘1’ to enable interrupt for …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for TXDRDY event\nWrite ‘1’ to enable interrupt for TXDRDY event\nField <code>TXDRDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>TXDRDY</code> writer - Write ‘1’ to enable interrupt …\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 0 - Write ‘1’ to enable interrupt for CTS event\nBit 0 - Write ‘1’ to enable interrupt for CTS event\nBit 9 - Write ‘1’ to enable interrupt for ERROR event\nBit 9 - Write ‘1’ to enable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to enable interrupt for NCTS event\nBit 1 - Write ‘1’ to enable interrupt for NCTS event\nBit 2 - Write ‘1’ to enable interrupt for RXDRDY event\nBit 2 - Write ‘1’ to enable interrupt for RXDRDY event\nBit 17 - Write ‘1’ to enable interrupt for RXTO event\nBit 17 - Write ‘1’ to enable interrupt for RXTO event\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 7 - Write ‘1’ to enable interrupt for TXDRDY event\nBit 7 - Write ‘1’ to enable interrupt for TXDRDY event\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nCTS (rw) register accessor: an alias for <code>Reg&lt;CTS_SPEC&gt;</code>\nRegister block\nRTS (rw) register accessor: an alias for <code>Reg&lt;RTS_SPEC&gt;</code>\nRXD (rw) register accessor: an alias for <code>Reg&lt;RXD_SPEC&gt;</code>\nTXD (rw) register accessor: an alias for <code>Reg&lt;TXD_SPEC&gt;</code>\nPin select for CTS\n0x08 - Pin select for CTS\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for RTS\n0x00 - Pin select for RTS\nPin select for RXD\n0x0c - Pin select for RXD\nPin select for TXD\n0x04 - Pin select for TXD\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\nPin select for CTS\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>CTS</code> reader\nRegister <code>CTS</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>RTS</code> reader\nPin select for RTS\nRegister <code>RTS</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>RXD</code> reader\nPin select for RXD\nRegister <code>RXD</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>TXD</code> reader\nPin select for TXD\nRegister <code>TXD</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nRegister <code>RXD</code> reader\nField <code>RXD</code> reader - RX data received in previous transfers, …\nRXD register\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - RX data received in previous transfers, double …\nShortcut between CTS event and STARTRX task\nField <code>CTS_STARTRX</code> reader - Shortcut between CTS event and …\nField <code>CTS_STARTRX</code> writer - Shortcut between CTS event and …\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\nShortcut between NCTS event and STOPRX task\nField <code>NCTS_STOPRX</code> reader - Shortcut between NCTS event and …\nField <code>NCTS_STOPRX</code> writer - Shortcut between NCTS event and …\nRegister <code>SHORTS</code> reader\nShortcut register\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nBit 3 - Shortcut between CTS event and STARTRX task\nBit 3 - Shortcut between CTS event and STARTRX task\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 4 - Shortcut between NCTS event and STOPRX task\nBit 4 - Shortcut between NCTS event and STOPRX task\nGet enumerated values variant\nGet enumerated values variant\nStart UART receiver\nField <code>TASKS_STARTRX</code> writer -\nRegister <code>TASKS_STARTRX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart UART transmitter\nField <code>TASKS_STARTTX</code> writer -\nRegister <code>TASKS_STARTTX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStop UART receiver\nField <code>TASKS_STOPRX</code> writer -\nRegister <code>TASKS_STOPRX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStop UART transmitter\nField <code>TASKS_STOPTX</code> writer -\nRegister <code>TASKS_STOPTX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nSuspend UART\nField <code>TASKS_SUSPEND</code> writer -\nRegister <code>TASKS_SUSPEND</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nTXD register\nField <code>TXD</code> writer - TX data to be transferred\nRegister <code>TXD</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - TX data to be transferred\nBAUDRATE (rw) register accessor: an alias for …\nCONFIG (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nERRORSRC (rw) register accessor: an alias for …\nEVENTS_CTS (rw) register accessor: an alias for …\nEVENTS_ENDRX (rw) register accessor: an alias for …\nEVENTS_ENDTX (rw) register accessor: an alias for …\nEVENTS_ERROR (rw) register accessor: an alias for …\nEVENTS_NCTS (rw) register accessor: an alias for …\nEVENTS_RXDRDY (rw) register accessor: an alias for …\nEVENTS_RXSTARTED (rw) register accessor: an alias for …\nEVENTS_RXTO (rw) register accessor: an alias for …\nEVENTS_TXDRDY (rw) register accessor: an alias for …\nEVENTS_TXSTARTED (rw) register accessor: an alias for …\nEVENTS_TXSTOPPED (rw) register accessor: an alias for …\nINTEN (rw) register accessor: an alias for <code>Reg&lt;INTEN_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nUnspecified\nRXD EasyDMA channel\nRegister block\nSHORTS (rw) register accessor: an alias for …\nTASKS_FLUSHRX (w) register accessor: an alias for …\nTASKS_STARTRX (w) register accessor: an alias for …\nTASKS_STARTTX (w) register accessor: an alias for …\nTASKS_STOPRX (w) register accessor: an alias for …\nTASKS_STOPTX (w) register accessor: an alias for …\nTXD EasyDMA channel\nBaud rate. Accuracy depends on the HFCLK source selected.\n0x524 - Baud rate. Accuracy depends on the HFCLK source …\nConfiguration of parity and hardware flow control\n0x56c - Configuration of parity and hardware flow control\nEnable UART\n0x500 - Enable UART\nError source Note : this register is read / write one to …\n0x480 - Error source Note : this register is read / write …\nCTS is activated (set low). Clear To Send.\n0x100 - CTS is activated (set low). Clear To Send.\nReceive buffer is filled up\n0x110 - Receive buffer is filled up\nLast TX byte transmitted\n0x120 - Last TX byte transmitted\nError detected\n0x124 - Error detected\nCTS is deactivated (set high). Not Clear To Send.\n0x104 - CTS is deactivated (set high). Not Clear To Send.\nData received in RXD (but potentially not yet transferred …\n0x108 - Data received in RXD (but potentially not yet …\nUART receiver has started\n0x14c - UART receiver has started\nReceiver timeout\n0x144 - Receiver timeout\nData sent from TXD\n0x11c - Data sent from TXD\nUART transmitter has started\n0x150 - UART transmitter has started\nTransmitter stopped\n0x158 - Transmitter stopped\nReturns the argument unchanged.\nEnable or disable interrupt\n0x300 - Enable or disable interrupt\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nCluster Unspecified\n0x508..0x518 - Unspecified\nCluster RXD EasyDMA channel\n0x534..0x540 - RXD EasyDMA channel\nShortcut register\n0x200 - Shortcut register\nFlush RX FIFO into RX buffer\n0x2c - Flush RX FIFO into RX buffer\nStart UART receiver\n0x00 - Start UART receiver\nStart UART transmitter\n0x08 - Start UART transmitter\nStop UART receiver\n0x04 - Stop UART receiver\nStop UART transmitter\n0x0c - Stop UART transmitter\nCluster TXD EasyDMA channel\n0x544..0x550 - TXD EasyDMA channel\n30801920: 115200 baud (actual rate: 115108)\n323584: 1200 baud (actual rate: 1205)\n3862528: 14400 baud (actual rate: 14401)\n5152768: 19200 baud (actual rate: 19208)\n268435456: 1Mega baud\n61865984: 230400 baud (actual rate: 231884)\n643072: 2400 baud (actual rate: 2396)\n67108864: 250000 baud\n7716864: 28800 baud (actual rate: 28777)\n8388608: 31250 baud\n10289152: 38400 baud (actual rate: 38369)\n121634816: 460800 baud (actual rate: 457143)\n1290240: 4800 baud (actual rate: 4808)\n15007744: 56000 baud (actual rate: 55944)\n15400960: 57600 baud (actual rate: 57554)\n20615168: 76800 baud (actual rate: 76923)\n251658240: 921600 baud (actual rate: 941176)\n2576384: 9600 baud (actual rate: 9598)\nBaud rate\nField <code>BAUDRATE</code> reader - Baud rate\nBaud rate. Accuracy depends on the HFCLK source selected.\nField <code>BAUDRATE</code> writer - Baud rate\nRegister <code>BAUDRATE</code> reader\nRegister <code>BAUDRATE</code> writer\n115200 baud (actual rate: 115108)\n1200 baud (actual rate: 1205)\n14400 baud (actual rate: 14401)\n19200 baud (actual rate: 19208)\n1Mega baud\n230400 baud (actual rate: 231884)\n2400 baud (actual rate: 2396)\n250000 baud\n28800 baud (actual rate: 28777)\n31250 baud\n38400 baud (actual rate: 38369)\n460800 baud (actual rate: 457143)\n4800 baud (actual rate: 4808)\n56000 baud (actual rate: 55944)\n57600 baud (actual rate: 57554)\n76800 baud (actual rate: 76923)\n921600 baud (actual rate: 941176)\n9600 baud (actual rate: 9598)\nBits 0:31 - Baud rate\nBits 0:31 - Baud rate\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BAUD115200</code>\nChecks if the value of the field is <code>BAUD1200</code>\nChecks if the value of the field is <code>BAUD14400</code>\nChecks if the value of the field is <code>BAUD19200</code>\nChecks if the value of the field is <code>BAUD1M</code>\nChecks if the value of the field is <code>BAUD230400</code>\nChecks if the value of the field is <code>BAUD2400</code>\nChecks if the value of the field is <code>BAUD250000</code>\nChecks if the value of the field is <code>BAUD28800</code>\nChecks if the value of the field is <code>BAUD31250</code>\nChecks if the value of the field is <code>BAUD38400</code>\nChecks if the value of the field is <code>BAUD460800</code>\nChecks if the value of the field is <code>BAUD4800</code>\nChecks if the value of the field is <code>BAUD56000</code>\nChecks if the value of the field is <code>BAUD57600</code>\nChecks if the value of the field is <code>BAUD76800</code>\nChecks if the value of the field is <code>BAUD921600</code>\nChecks if the value of the field is <code>BAUD9600</code>\nGet enumerated values variant\nConfiguration of parity and hardware flow control\n0: Disabled\n1: Enabled\n0: Exclude parity bit\nHardware flow control\nField <code>HWFC</code> reader - Hardware flow control\nField <code>HWFC</code> writer - Hardware flow control\n7: Include even parity bit\n0: One stop bit\nParity\nField <code>PARITY</code> reader - Parity\nField <code>PARITY</code> writer - Parity\nRegister <code>CONFIG</code> reader\nStop bits\nField <code>STOP</code> reader - Stop bits\nField <code>STOP</code> writer - Stop bits\n1: Two stop bits\nRegister <code>CONFIG</code> writer\nWrites raw bits to the register.\nDisabled\nEnabled\nExclude parity bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 0 - Hardware flow control\nBit 0 - Hardware flow control\nInclude even parity bit\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>ONE</code>\nChecks if the value of the field is <code>TWO</code>\nOne stop bit\nBits 1:3 - Parity\nBits 1:3 - Parity\nBit 4 - Stop bits\nBit 4 - Stop bits\nTwo stop bits\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n0: Disable UARTE\n8: Enable UARTE\nEnable or disable UARTE\nField <code>ENABLE</code> reader - Enable or disable UARTE\nEnable UART\nField <code>ENABLE</code> writer - Enable or disable UARTE\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable UARTE\nBits 0:3 - Enable or disable UARTE\nBits 0:3 - Enable or disable UARTE\nEnable UARTE\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nBreak condition\nField <code>BREAK</code> reader - Break condition\nField <code>BREAK</code> writer - Break condition\nError source Note : this register is read / write one to …\nFraming error occurred\nField <code>FRAMING</code> reader - Framing error occurred\nField <code>FRAMING</code> writer - Framing error occurred\n0: Read: error not present\n0: Read: error not present\n0: Read: error not present\n0: Read: error not present\nOverrun error\nField <code>OVERRUN</code> reader - Overrun error\nField <code>OVERRUN</code> writer - Overrun error\nParity error\nField <code>PARITY</code> reader - Parity error\nField <code>PARITY</code> writer - Parity error\n1: Read: error present\n1: Read: error present\n1: Read: error present\n1: Read: error present\nRegister <code>ERRORSRC</code> reader\nRegister <code>ERRORSRC</code> writer\nWrites raw bits to the register.\nBit 3 - Break condition\nBit 3 - Break condition\nBit 2 - Framing error occurred\nBit 2 - Framing error occurred\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nRead: error not present\nRead: error not present\nRead: error not present\nRead: error not present\nBit 0 - Overrun error\nBit 0 - Overrun error\nBit 1 - Parity error\nBit 1 - Parity error\nRead: error present\nRead: error present\nRead: error present\nRead: error present\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>EVENTS_CTS</code> reader -\nCTS is activated (set low). Clear To Send.\nField <code>EVENTS_CTS</code> writer -\nRegister <code>EVENTS_CTS</code> reader\nRegister <code>EVENTS_CTS</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_ENDRX</code> reader -\nReceive buffer is filled up\nField <code>EVENTS_ENDRX</code> writer -\nRegister <code>EVENTS_ENDRX</code> reader\nRegister <code>EVENTS_ENDRX</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_ENDTX</code> reader -\nLast TX byte transmitted\nField <code>EVENTS_ENDTX</code> writer -\nRegister <code>EVENTS_ENDTX</code> reader\nRegister <code>EVENTS_ENDTX</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_ERROR</code> reader -\nError detected\nField <code>EVENTS_ERROR</code> writer -\nRegister <code>EVENTS_ERROR</code> reader\nRegister <code>EVENTS_ERROR</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_NCTS</code> reader -\nCTS is deactivated (set high). Not Clear To Send.\nField <code>EVENTS_NCTS</code> writer -\nRegister <code>EVENTS_NCTS</code> reader\nRegister <code>EVENTS_NCTS</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_RXDRDY</code> reader -\nData received in RXD (but potentially not yet transferred …\nField <code>EVENTS_RXDRDY</code> writer -\nRegister <code>EVENTS_RXDRDY</code> reader\nRegister <code>EVENTS_RXDRDY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_RXSTARTED</code> reader -\nUART receiver has started\nField <code>EVENTS_RXSTARTED</code> writer -\nRegister <code>EVENTS_RXSTARTED</code> reader\nRegister <code>EVENTS_RXSTARTED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_RXTO</code> reader -\nReceiver timeout\nField <code>EVENTS_RXTO</code> writer -\nRegister <code>EVENTS_RXTO</code> reader\nRegister <code>EVENTS_RXTO</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_TXDRDY</code> reader -\nData sent from TXD\nField <code>EVENTS_TXDRDY</code> writer -\nRegister <code>EVENTS_TXDRDY</code> reader\nRegister <code>EVENTS_TXDRDY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_TXSTARTED</code> reader -\nUART transmitter has started\nField <code>EVENTS_TXSTARTED</code> writer -\nRegister <code>EVENTS_TXSTARTED</code> reader\nRegister <code>EVENTS_TXSTARTED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_TXSTOPPED</code> reader -\nTransmitter stopped\nField <code>EVENTS_TXSTOPPED</code> writer -\nRegister <code>EVENTS_TXSTOPPED</code> reader\nRegister <code>EVENTS_TXSTOPPED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable or disable interrupt for CTS event\nField <code>CTS</code> reader - Enable or disable interrupt for CTS …\nField <code>CTS</code> writer - Enable or disable interrupt for CTS …\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nEnable or disable interrupt for ENDRX event\nField <code>ENDRX</code> reader - Enable or disable interrupt for ENDRX …\nField <code>ENDRX</code> writer - Enable or disable interrupt for ENDRX …\nEnable or disable interrupt for ENDTX event\nField <code>ENDTX</code> reader - Enable or disable interrupt for ENDTX …\nField <code>ENDTX</code> writer - Enable or disable interrupt for ENDTX …\nEnable or disable interrupt for ERROR event\nField <code>ERROR</code> reader - Enable or disable interrupt for ERROR …\nField <code>ERROR</code> writer - Enable or disable interrupt for ERROR …\nEnable or disable interrupt\nEnable or disable interrupt for NCTS event\nField <code>NCTS</code> reader - Enable or disable interrupt for NCTS …\nField <code>NCTS</code> writer - Enable or disable interrupt for NCTS …\nRegister <code>INTEN</code> reader\nEnable or disable interrupt for RXDRDY event\nField <code>RXDRDY</code> reader - Enable or disable interrupt for …\nField <code>RXDRDY</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for RXSTARTED event\nField <code>RXSTARTED</code> reader - Enable or disable interrupt for …\nField <code>RXSTARTED</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for RXTO event\nField <code>RXTO</code> reader - Enable or disable interrupt for RXTO …\nField <code>RXTO</code> writer - Enable or disable interrupt for RXTO …\nEnable or disable interrupt for TXDRDY event\nField <code>TXDRDY</code> reader - Enable or disable interrupt for …\nField <code>TXDRDY</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for TXSTARTED event\nField <code>TXSTARTED</code> reader - Enable or disable interrupt for …\nField <code>TXSTARTED</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for TXSTOPPED event\nField <code>TXSTOPPED</code> reader - Enable or disable interrupt for …\nField <code>TXSTOPPED</code> writer - Enable or disable interrupt for …\nRegister <code>INTEN</code> writer\nWrites raw bits to the register.\nBit 0 - Enable or disable interrupt for CTS event\nBit 0 - Enable or disable interrupt for CTS event\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 4 - Enable or disable interrupt for ENDRX event\nBit 4 - Enable or disable interrupt for ENDRX event\nBit 8 - Enable or disable interrupt for ENDTX event\nBit 8 - Enable or disable interrupt for ENDTX event\nBit 9 - Enable or disable interrupt for ERROR event\nBit 9 - Enable or disable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Enable or disable interrupt for NCTS event\nBit 1 - Enable or disable interrupt for NCTS event\nBit 2 - Enable or disable interrupt for RXDRDY event\nBit 2 - Enable or disable interrupt for RXDRDY event\nBit 19 - Enable or disable interrupt for RXSTARTED event\nBit 19 - Enable or disable interrupt for RXSTARTED event\nBit 17 - Enable or disable interrupt for RXTO event\nBit 17 - Enable or disable interrupt for RXTO event\nBit 7 - Enable or disable interrupt for TXDRDY event\nBit 7 - Enable or disable interrupt for TXDRDY event\nBit 20 - Enable or disable interrupt for TXSTARTED event\nBit 20 - Enable or disable interrupt for TXSTARTED event\nBit 22 - Enable or disable interrupt for TXSTOPPED event\nBit 22 - Enable or disable interrupt for TXSTOPPED event\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\nWrite ‘1’ to disable interrupt for CTS event\nWrite ‘1’ to disable interrupt for CTS event\nField <code>CTS</code> reader - Write ‘1’ to disable interrupt for …\nField <code>CTS</code> writer - Write ‘1’ to disable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for ENDRX event\nWrite ‘1’ to disable interrupt for ENDRX event\nField <code>ENDRX</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDRX</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for ENDTX event\nWrite ‘1’ to disable interrupt for ENDTX event\nField <code>ENDTX</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDTX</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for ERROR event\nWrite ‘1’ to disable interrupt for ERROR event\nField <code>ERROR</code> reader - Write ‘1’ to disable interrupt …\nField <code>ERROR</code> writer - Write ‘1’ to disable interrupt …\nDisable interrupt\nWrite ‘1’ to disable interrupt for NCTS event\nWrite ‘1’ to disable interrupt for NCTS event\nField <code>NCTS</code> reader - Write ‘1’ to disable interrupt for …\nField <code>NCTS</code> writer - Write ‘1’ to disable interrupt for …\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for RXDRDY event\nWrite ‘1’ to disable interrupt for RXDRDY event\nField <code>RXDRDY</code> reader - Write ‘1’ to disable interrupt …\nField <code>RXDRDY</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for RXSTARTED event\nWrite ‘1’ to disable interrupt for RXSTARTED event\nField <code>RXSTARTED</code> reader - Write ‘1’ to disable …\nField <code>RXSTARTED</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for RXTO event\nWrite ‘1’ to disable interrupt for RXTO event\nField <code>RXTO</code> reader - Write ‘1’ to disable interrupt for …\nField <code>RXTO</code> writer - Write ‘1’ to disable interrupt for …\nWrite ‘1’ to disable interrupt for TXDRDY event\nWrite ‘1’ to disable interrupt for TXDRDY event\nField <code>TXDRDY</code> reader - Write ‘1’ to disable interrupt …\nField <code>TXDRDY</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for TXSTARTED event\nWrite ‘1’ to disable interrupt for TXSTARTED event\nField <code>TXSTARTED</code> reader - Write ‘1’ to disable …\nField <code>TXSTARTED</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for TXSTOPPED event\nWrite ‘1’ to disable interrupt for TXSTOPPED event\nField <code>TXSTOPPED</code> reader - Write ‘1’ to disable …\nField <code>TXSTOPPED</code> writer - Write ‘1’ to disable …\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 0 - Write ‘1’ to disable interrupt for CTS event\nBit 0 - Write ‘1’ to disable interrupt for CTS event\nBit 4 - Write ‘1’ to disable interrupt for ENDRX event\nBit 4 - Write ‘1’ to disable interrupt for ENDRX event\nBit 8 - Write ‘1’ to disable interrupt for ENDTX event\nBit 8 - Write ‘1’ to disable interrupt for ENDTX event\nBit 9 - Write ‘1’ to disable interrupt for ERROR event\nBit 9 - Write ‘1’ to disable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to disable interrupt for NCTS event\nBit 1 - Write ‘1’ to disable interrupt for NCTS event\nBit 2 - Write ‘1’ to disable interrupt for RXDRDY event\nBit 2 - Write ‘1’ to disable interrupt for RXDRDY event\nBit 19 - Write ‘1’ to disable interrupt for RXSTARTED …\nBit 19 - Write ‘1’ to disable interrupt for RXSTARTED …\nBit 17 - Write ‘1’ to disable interrupt for RXTO event\nBit 17 - Write ‘1’ to disable interrupt for RXTO event\nBit 7 - Write ‘1’ to disable interrupt for TXDRDY event\nBit 7 - Write ‘1’ to disable interrupt for TXDRDY event\nBit 20 - Write ‘1’ to disable interrupt for TXSTARTED …\nBit 20 - Write ‘1’ to disable interrupt for TXSTARTED …\nBit 22 - Write ‘1’ to disable interrupt for TXSTOPPED …\nBit 22 - Write ‘1’ to disable interrupt for TXSTOPPED …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for CTS event\nWrite ‘1’ to enable interrupt for CTS event\nField <code>CTS</code> reader - Write ‘1’ to enable interrupt for …\nField <code>CTS</code> writer - Write ‘1’ to enable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for ENDRX event\nWrite ‘1’ to enable interrupt for ENDRX event\nField <code>ENDRX</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ENDRX</code> writer - Write ‘1’ to enable interrupt for …\nWrite ‘1’ to enable interrupt for ENDTX event\nWrite ‘1’ to enable interrupt for ENDTX event\nField <code>ENDTX</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ENDTX</code> writer - Write ‘1’ to enable interrupt for …\nWrite ‘1’ to enable interrupt for ERROR event\nWrite ‘1’ to enable interrupt for ERROR event\nField <code>ERROR</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ERROR</code> writer - Write ‘1’ to enable interrupt for …\nEnable interrupt\nWrite ‘1’ to enable interrupt for NCTS event\nWrite ‘1’ to enable interrupt for NCTS event\nField <code>NCTS</code> reader - Write ‘1’ to enable interrupt for …\nField <code>NCTS</code> writer - Write ‘1’ to enable interrupt for …\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for RXDRDY event\nWrite ‘1’ to enable interrupt for RXDRDY event\nField <code>RXDRDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>RXDRDY</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for RXSTARTED event\nWrite ‘1’ to enable interrupt for RXSTARTED event\nField <code>RXSTARTED</code> reader - Write ‘1’ to enable interrupt …\nField <code>RXSTARTED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for RXTO event\nWrite ‘1’ to enable interrupt for RXTO event\nField <code>RXTO</code> reader - Write ‘1’ to enable interrupt for …\nField <code>RXTO</code> writer - Write ‘1’ to enable interrupt for …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for TXDRDY event\nWrite ‘1’ to enable interrupt for TXDRDY event\nField <code>TXDRDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>TXDRDY</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for TXSTARTED event\nWrite ‘1’ to enable interrupt for TXSTARTED event\nField <code>TXSTARTED</code> reader - Write ‘1’ to enable interrupt …\nField <code>TXSTARTED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for TXSTOPPED event\nWrite ‘1’ to enable interrupt for TXSTOPPED event\nField <code>TXSTOPPED</code> reader - Write ‘1’ to enable interrupt …\nField <code>TXSTOPPED</code> writer - Write ‘1’ to enable interrupt …\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 0 - Write ‘1’ to enable interrupt for CTS event\nBit 0 - Write ‘1’ to enable interrupt for CTS event\nBit 4 - Write ‘1’ to enable interrupt for ENDRX event\nBit 4 - Write ‘1’ to enable interrupt for ENDRX event\nBit 8 - Write ‘1’ to enable interrupt for ENDTX event\nBit 8 - Write ‘1’ to enable interrupt for ENDTX event\nBit 9 - Write ‘1’ to enable interrupt for ERROR event\nBit 9 - Write ‘1’ to enable interrupt for ERROR event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to enable interrupt for NCTS event\nBit 1 - Write ‘1’ to enable interrupt for NCTS event\nBit 2 - Write ‘1’ to enable interrupt for RXDRDY event\nBit 2 - Write ‘1’ to enable interrupt for RXDRDY event\nBit 19 - Write ‘1’ to enable interrupt for RXSTARTED …\nBit 19 - Write ‘1’ to enable interrupt for RXSTARTED …\nBit 17 - Write ‘1’ to enable interrupt for RXTO event\nBit 17 - Write ‘1’ to enable interrupt for RXTO event\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 7 - Write ‘1’ to enable interrupt for TXDRDY event\nBit 7 - Write ‘1’ to enable interrupt for TXDRDY event\nBit 20 - Write ‘1’ to enable interrupt for TXSTARTED …\nBit 20 - Write ‘1’ to enable interrupt for TXSTARTED …\nBit 22 - Write ‘1’ to enable interrupt for TXSTOPPED …\nBit 22 - Write ‘1’ to enable interrupt for TXSTOPPED …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nCTS (rw) register accessor: an alias for <code>Reg&lt;CTS_SPEC&gt;</code>\nRegister block\nRTS (rw) register accessor: an alias for <code>Reg&lt;RTS_SPEC&gt;</code>\nRXD (rw) register accessor: an alias for <code>Reg&lt;RXD_SPEC&gt;</code>\nTXD (rw) register accessor: an alias for <code>Reg&lt;TXD_SPEC&gt;</code>\nPin select for CTS signal\n0x08 - Pin select for CTS signal\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for RTS signal\n0x00 - Pin select for RTS signal\nPin select for RXD signal\n0x0c - Pin select for RXD signal\nPin select for TXD signal\n0x04 - Pin select for TXD signal\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\nPin select for CTS signal\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>CTS</code> reader\nRegister <code>CTS</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>RTS</code> reader\nPin select for RTS signal\nRegister <code>RTS</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>RXD</code> reader\nPin select for RXD signal\nRegister <code>RXD</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>TXD</code> reader\nPin select for TXD signal\nRegister <code>TXD</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last transaction\n0x08 - Number of bytes transferred in the last transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum number of bytes in receive buffer\n0x04 - Maximum number of bytes in receive buffer\nData pointer\n0x00 - Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>MAXCNT</code> reader - Maximum number of bytes in receive …\nMaximum number of bytes in receive buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in receive …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in receive buffer\nBits 0:15 - Maximum number of bytes in receive buffer\nField <code>PTR</code> reader - Data pointer\nData pointer\nField <code>PTR</code> writer - Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Data pointer\nBits 0:31 - Data pointer\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\nShortcut between ENDRX event and STARTRX task\nField <code>ENDRX_STARTRX</code> reader - Shortcut between ENDRX event …\nField <code>ENDRX_STARTRX</code> writer - Shortcut between ENDRX event …\nShortcut between ENDRX event and STOPRX task\nField <code>ENDRX_STOPRX</code> reader - Shortcut between ENDRX event …\nField <code>ENDRX_STOPRX</code> writer - Shortcut between ENDRX event …\nRegister <code>SHORTS</code> reader\nShortcut register\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nBit 5 - Shortcut between ENDRX event and STARTRX task\nBit 5 - Shortcut between ENDRX event and STARTRX task\nBit 6 - Shortcut between ENDRX event and STOPRX task\nBit 6 - Shortcut between ENDRX event and STOPRX task\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\nFlush RX FIFO into RX buffer\nField <code>TASKS_FLUSHRX</code> writer -\nRegister <code>TASKS_FLUSHRX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart UART receiver\nField <code>TASKS_STARTRX</code> writer -\nRegister <code>TASKS_STARTRX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart UART transmitter\nField <code>TASKS_STARTTX</code> writer -\nRegister <code>TASKS_STARTTX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStop UART receiver\nField <code>TASKS_STOPRX</code> writer -\nRegister <code>TASKS_STOPRX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStop UART transmitter\nField <code>TASKS_STOPTX</code> writer -\nRegister <code>TASKS_STOPTX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last transaction\n0x08 - Number of bytes transferred in the last transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum number of bytes in transmit buffer\n0x04 - Maximum number of bytes in transmit buffer\nData pointer\n0x00 - Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>MAXCNT</code> reader - Maximum number of bytes in transmit …\nMaximum number of bytes in transmit buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in transmit …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in transmit buffer\nBits 0:15 - Maximum number of bytes in transmit buffer\nField <code>PTR</code> reader - Data pointer\nData pointer\nField <code>PTR</code> writer - Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Data pointer\nBits 0:31 - Data pointer\nAPPROTECT (rw) register accessor: an alias for …\nCUSTOMER (rw) register accessor: an alias for …\nDEBUGCTRL (rw) register accessor: an alias for …\nNFCPINS (rw) register accessor: an alias for …\nNRFFW (rw) register accessor: an alias for <code>Reg&lt;NRFFW_SPEC&gt;</code>\nNRFHW (rw) register accessor: an alias for <code>Reg&lt;NRFHW_SPEC&gt;</code>\nPSELRESET (rw) register accessor: an alias for …\nREGOUT0 (rw) register accessor: an alias for …\nRegister block\nUNUSED0 (rw) register accessor: an alias for …\nUNUSED1 (rw) register accessor: an alias for …\nUNUSED2 (rw) register accessor: an alias for …\nUNUSED3 (rw) register accessor: an alias for …\nAccess port protection\n0x208 - Access port protection\nDescription collection[n]: Reserved for customer\n0x80..0x100 - Description collection[n]: Reserved for …\nProcessor debug control\n0x210 - Processor debug control\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSetting of pins dedicated to NFC functionality: NFC …\n0x20c - Setting of pins dedicated to NFC functionality: …\nDescription collection[n]: Reserved for Nordic firmware …\n0x14..0x50 - Description collection[n]: Reserved for …\nDescription collection[n]: Reserved for Nordic hardware …\n0x50..0x80 - Description collection[n]: Reserved for …\nDescription collection[n]: Mapping of the nRESET function\n0x200..0x208 - Description collection[n]: Mapping of the …\nGPIO reference voltage / external output supply voltage in …\n0x304 - GPIO reference voltage / external output supply …\nUnspecified\n0x00 - Unspecified\nUnspecified\n0x04 - Unspecified\nUnspecified\n0x08 - Unspecified\nUnspecified\n0x10 - Unspecified\nAccess port protection\n255: Disable\n0: Enable\nEnable or disable access port protection.\nField <code>PALL</code> reader - Enable or disable access port …\nField <code>PALL</code> writer - Enable or disable access port …\nRegister <code>APPROTECT</code> reader\nRegister <code>APPROTECT</code> writer\nWrites raw bits to the register.\nDisable\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBits 0:7 - Enable or disable access port protection.\nBits 0:7 - Enable or disable access port protection.\nGet enumerated values variant\nField <code>CUSTOMER</code> reader - Reserved for customer\nDescription collection[n]: Reserved for customer\nField <code>CUSTOMER</code> writer - Reserved for customer\nRegister <code>CUSTOMER[%s]</code> reader\nRegister <code>CUSTOMER[%s]</code> writer\nWrites raw bits to the register.\nBits 0:31 - Reserved for customer\nBits 0:31 - Reserved for customer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure CPU flash patch and breakpoint (FPB) unit …\nField <code>CPUFPBEN</code> reader - Configure CPU flash patch and …\nField <code>CPUFPBEN</code> writer - Configure CPU flash patch and …\nConfigure CPU non-intrusive debug features\nField <code>CPUNIDEN</code> reader - Configure CPU non-intrusive debug …\nField <code>CPUNIDEN</code> writer - Configure CPU non-intrusive debug …\nProcessor debug control\n0: Disable CPU ITM and ETM functionality\n0: Disable CPU FPB unit. Writes into the FPB registers …\n255: Enable CPU ITM and ETM functionality (default …\n255: Enable CPU FPB unit (default behavior)\nRegister <code>DEBUGCTRL</code> reader\nRegister <code>DEBUGCTRL</code> writer\nWrites raw bits to the register.\nBits 8:15 - Configure CPU flash patch and breakpoint (FPB) …\nBits 8:15 - Configure CPU flash patch and breakpoint (FPB) …\nBits 0:7 - Configure CPU non-intrusive debug features\nBits 0:7 - Configure CPU non-intrusive debug features\nDisable CPU ITM and ETM functionality\nDisable CPU FPB unit. Writes into the FPB registers will …\nEnable CPU ITM and ETM functionality (default behavior)\nEnable CPU FPB unit (default behavior)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\n0: Operation as GPIO pins. Same protection as normal GPIO …\n1: Operation as NFC antenna pins. Configures the …\nSetting of pins dedicated to NFC functionality: NFC …\nSetting of pins dedicated to NFC functionality\nField <code>PROTECT</code> reader - Setting of pins dedicated to NFC …\nField <code>PROTECT</code> writer - Setting of pins dedicated to NFC …\nRegister <code>NFCPINS</code> reader\nRegister <code>NFCPINS</code> writer\nWrites raw bits to the register.\nOperation as GPIO pins. Same protection as normal GPIO pins\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>NFC</code>\nOperation as NFC antenna pins. Configures the protection …\nBit 0 - Setting of pins dedicated to NFC functionality\nBit 0 - Setting of pins dedicated to NFC functionality\nGet enumerated values variant\nField <code>NRFFW</code> reader - Reserved for Nordic firmware design\nDescription collection[n]: Reserved for Nordic firmware …\nField <code>NRFFW</code> writer - Reserved for Nordic firmware design\nRegister <code>NRFFW[%s]</code> reader\nRegister <code>NRFFW[%s]</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Reserved for Nordic firmware design\nBits 0:31 - Reserved for Nordic firmware design")
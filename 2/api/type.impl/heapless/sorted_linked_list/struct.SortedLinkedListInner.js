(function() {
    var type_impls = Object.fromEntries([["heapless",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#817-827\">Source</a><a href=\"#impl-Debug-for-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Idx, K, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html\" title=\"struct heapless::sorted_linked_list::SortedLinkedListInner\">SortedLinkedListInner</a>&lt;T, Idx, K, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    Idx: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>,\n    K: <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.Kind.html\" title=\"trait heapless::sorted_linked_list::Kind\">Kind</a>,\n    S: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.SortedLinkedListStorage.html\" title=\"trait heapless::sorted_linked_list::SortedLinkedListStorage\">SortedLinkedListStorage</a>&lt;T, Idx&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#824-826\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","heapless::sorted_linked_list::SortedLinkedList","heapless::sorted_linked_list::SortedLinkedListView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#829-846\">Source</a><a href=\"#impl-Drop-for-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Idx, K, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html\" title=\"struct heapless::sorted_linked_list::SortedLinkedListInner\">SortedLinkedListInner</a>&lt;T, Idx, K, S&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>,\n    S: <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.SortedLinkedListStorage.html\" title=\"trait heapless::sorted_linked_list::SortedLinkedListStorage\">SortedLinkedListStorage</a>&lt;T, Idx&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#834-845\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","heapless::sorted_linked_list::SortedLinkedList","heapless::sorted_linked_list::SortedLinkedListView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#271-329\">Source</a><a href=\"#impl-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Idx, K, S&gt; <a class=\"struct\" href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html\" title=\"struct heapless::sorted_linked_list::SortedLinkedListInner\">SortedLinkedListInner</a>&lt;T, Idx, K, S&gt;<div class=\"where\">where\n    Idx: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>,\n    S: <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.SortedLinkedListStorage.html\" title=\"trait heapless::sorted_linked_list::SortedLinkedListStorage\">SortedLinkedListStorage</a>&lt;T, Idx&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#277-279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.as_view\" class=\"fn\">as_view</a>(&amp;self) -&gt; &amp;<a class=\"type\" href=\"heapless/sorted_linked_list/type.SortedLinkedListView.html\" title=\"type heapless::sorted_linked_list::SortedLinkedListView\">SortedLinkedListView</a>&lt;T, K, Idx&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference to the <code>SortedLinkedList</code>, erasing the <code>N</code> const-generic.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#282-284\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.as_mut_view\" class=\"fn\">as_mut_view</a>(&amp;mut self) -&gt; &amp;mut <a class=\"type\" href=\"heapless/sorted_linked_list/type.SortedLinkedListView.html\" title=\"type heapless::sorted_linked_list::SortedLinkedListView\">SortedLinkedListView</a>&lt;T, K, Idx&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the <code>Vec</code>, erasing the <code>N</code> const-generic.</p>\n</div></details></div></details>",0,"heapless::sorted_linked_list::SortedLinkedList","heapless::sorted_linked_list::SortedLinkedListView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#331-529\">Source</a><a href=\"#impl-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Idx, K, S&gt; <a class=\"struct\" href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html\" title=\"struct heapless::sorted_linked_list::SortedLinkedListInner\">SortedLinkedListInner</a>&lt;T, Idx, K, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    Idx: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>,\n    K: <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.Kind.html\" title=\"trait heapless::sorted_linked_list::Kind\">Kind</a>,\n    S: <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.SortedLinkedListStorage.html\" title=\"trait heapless::sorted_linked_list::SortedLinkedListStorage\">SortedLinkedListStorage</a>&lt;T, Idx&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#345-384\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.push_unchecked\" class=\"fn\">push_unchecked</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Pushes a value onto the list without checking if the list is full.</p>\n<p>Complexity is worst-case <em>O</em>(n).</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Assumes that the list is not full.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#409-416\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Pushes an element to the linked list and sorts it into place.</p>\n<p>Complexity is worst-case <em>O</em>(n).</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::sorted_linked_list::{Max, SortedLinkedList};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll: SortedLinkedList&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\n<span class=\"comment\">// The largest value will always be first\n</span>ll.push(<span class=\"number\">1</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n\nll.push(<span class=\"number\">2</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n\nll.push(<span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n\n<span class=\"comment\">// This will not fit in the queue.\n</span><span class=\"macro\">assert_eq!</span>(ll.push(<span class=\"number\">4</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#444-448\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.peek\" class=\"fn\">peek</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Peek at the first element.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::sorted_linked_list::{Max, Min, SortedLinkedList};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll_max: SortedLinkedList&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\n<span class=\"comment\">// The largest value will always be first\n</span>ll_max.push(<span class=\"number\">1</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll_max.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\nll_max.push(<span class=\"number\">2</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll_max.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\nll_max.push(<span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll_max.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll_min: SortedLinkedList&lt;<span class=\"kw\">_</span>, Min, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\n<span class=\"comment\">// The Smallest value will always be first\n</span>ll_min.push(<span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll_min.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\nll_min.push(<span class=\"number\">2</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll_min.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\nll_min.push(<span class=\"number\">1</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll_min.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#455-463\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.pop_unchecked\" class=\"fn\">pop_unchecked</a>(&amp;mut self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Pop an element from the list without checking so the list is not empty.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Assumes that the list is not empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#482-488\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Pops the first element in the list.</p>\n<p>Complexity is worst-case <em>O</em>(1).</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::sorted_linked_list::{Max, SortedLinkedList};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll: SortedLinkedList&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\nll.push(<span class=\"number\">1</span>).unwrap();\nll.push(<span class=\"number\">2</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(ll.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(ll.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(ll.pop(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#508-510\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the linked list is full.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::sorted_linked_list::{Max, SortedLinkedList};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll: SortedLinkedList&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\n<span class=\"macro\">assert_eq!</span>(ll.is_full(), <span class=\"bool-val\">false</span>);\n\nll.push(<span class=\"number\">1</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll.is_full(), <span class=\"bool-val\">false</span>);\nll.push(<span class=\"number\">2</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll.is_full(), <span class=\"bool-val\">false</span>);\nll.push(<span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll.is_full(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#526-528\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the linked list is empty.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::sorted_linked_list::{Max, SortedLinkedList};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll: SortedLinkedList&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\n<span class=\"macro\">assert_eq!</span>(ll.is_empty(), <span class=\"bool-val\">true</span>);\n\nll.push(<span class=\"number\">1</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(ll.is_empty(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details></div></details>",0,"heapless::sorted_linked_list::SortedLinkedList","heapless::sorted_linked_list::SortedLinkedListView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#531-619\">Source</a><a href=\"#impl-SortedLinkedListInner%3CT,+Idx,+K,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Idx, K, S&gt; <a class=\"struct\" href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html\" title=\"struct heapless::sorted_linked_list::SortedLinkedListInner\">SortedLinkedListInner</a>&lt;T, Idx, K, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    Idx: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>,\n    K: <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.Kind.html\" title=\"trait heapless::sorted_linked_list::Kind\">Kind</a>,\n    S: <a class=\"trait\" href=\"heapless/sorted_linked_list/trait.SortedLinkedListStorage.html\" title=\"trait heapless::sorted_linked_list::SortedLinkedListStorage\">SortedLinkedListStorage</a>&lt;T, Idx&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#555-560\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"heapless/sorted_linked_list/struct.IterView.html\" title=\"struct heapless::sorted_linked_list::IterView\">IterView</a>&lt;'_, T, Idx, K&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterView&lt;&#39;_, T, Idx, K&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Get an iterator over the sorted list.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::sorted_linked_list::{Max, SortedLinkedList};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll: SortedLinkedList&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\nll.push(<span class=\"number\">1</span>).unwrap();\nll.push(<span class=\"number\">2</span>).unwrap();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = ll.iter();\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/sorted_linked_list.rs.html#584-618\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/sorted_linked_list/struct.SortedLinkedListInner.html#tymethod.find_mut\" class=\"fn\">find_mut</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"heapless/sorted_linked_list/struct.FindMutView.html\" title=\"struct heapless::sorted_linked_list::FindMutView\">FindMutView</a>&lt;'_, T, Idx, K&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Find an element in the list that can be changed and resorted.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::sorted_linked_list::{Max, SortedLinkedList};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ll: SortedLinkedList&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">3</span>, u8&gt; = SortedLinkedList::new_u8();\n\nll.push(<span class=\"number\">1</span>).unwrap();\nll.push(<span class=\"number\">2</span>).unwrap();\nll.push(<span class=\"number\">3</span>).unwrap();\n\n<span class=\"comment\">// Find a value and update it\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>find = ll.find_mut(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">2</span>).unwrap();\n<span class=\"kw-2\">*</span>find += <span class=\"number\">1000</span>;\nfind.finish();\n\n<span class=\"macro\">assert_eq!</span>(ll.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1002</span>));\n<span class=\"macro\">assert_eq!</span>(ll.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(ll.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(ll.pop(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"heapless::sorted_linked_list::SortedLinkedList","heapless::sorted_linked_list::SortedLinkedListView"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[25709]}
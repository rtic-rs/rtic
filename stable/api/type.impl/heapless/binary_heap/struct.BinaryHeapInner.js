(function() {
    var type_impls = Object.fromEntries([["heapless",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BinaryHeapInner%3CT,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#189-198\">Source</a><a href=\"#impl-BinaryHeapInner%3CT,+K,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, K, S: <a class=\"trait\" href=\"heapless/vec/trait.VecStorage.html\" title=\"trait heapless::vec::VecStorage\">VecStorage</a>&lt;T&gt;&gt; <a class=\"struct\" href=\"heapless/binary_heap/struct.BinaryHeapInner.html\" title=\"struct heapless::binary_heap::BinaryHeapInner\">BinaryHeapInner</a>&lt;T, K, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#191-193\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.as_view\" class=\"fn\">as_view</a>(&amp;self) -&gt; &amp;<a class=\"type\" href=\"heapless/binary_heap/type.BinaryHeapView.html\" title=\"type heapless::binary_heap::BinaryHeapView\">BinaryHeapView</a>&lt;T, K&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference to the <code>BinaryHeap</code>, erasing the <code>N</code> const-generic.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#195-197\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.as_mut_view\" class=\"fn\">as_mut_view</a>(&amp;mut self) -&gt; &amp;mut <a class=\"type\" href=\"heapless/binary_heap/type.BinaryHeapView.html\" title=\"type heapless::binary_heap::BinaryHeapView\">BinaryHeapView</a>&lt;T, K&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the <code>BinaryHeap</code>, erasing the <code>N</code> const-generic.</p>\n</div></details></div></details>",0,"heapless::binary_heap::BinaryHeap","heapless::binary_heap::BinaryHeapView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BinaryHeapInner%3CT,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#200-501\">Source</a><a href=\"#impl-BinaryHeapInner%3CT,+K,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, K, S: <a class=\"trait\" href=\"heapless/vec/trait.VecStorage.html\" title=\"trait heapless::vec::VecStorage\">VecStorage</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"heapless/binary_heap/struct.BinaryHeapInner.html\" title=\"struct heapless::binary_heap::BinaryHeapInner\">BinaryHeapInner</a>&lt;T, K, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    K: <a class=\"trait\" href=\"heapless/binary_heap/trait.Kind.html\" title=\"trait heapless::binary_heap::Kind\">Kind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#207-209\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the capacity of the binary heap.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#226-228\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Drops all items from the binary heap.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\nheap.push(<span class=\"number\">1</span>).unwrap();\nheap.push(<span class=\"number\">3</span>).unwrap();\n\n<span class=\"macro\">assert!</span>(!heap.is_empty());\n\nheap.clear();\n\n<span class=\"macro\">assert!</span>(heap.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#241-243\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of the binary heap.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\nheap.push(<span class=\"number\">1</span>).unwrap();\nheap.push(<span class=\"number\">3</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(heap.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#260-262\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the binary heap is empty.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\n\n<span class=\"macro\">assert!</span>(heap.is_empty());\n\nheap.push(<span class=\"number\">3</span>).unwrap();\nheap.push(<span class=\"number\">5</span>).unwrap();\nheap.push(<span class=\"number\">1</span>).unwrap();\n\n<span class=\"macro\">assert!</span>(!heap.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#280-282\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the binary heap is full.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">4</span>&gt; = BinaryHeap::new();\n\n<span class=\"macro\">assert!</span>(!heap.is_full());\n\nheap.push(<span class=\"number\">1</span>).unwrap();\nheap.push(<span class=\"number\">2</span>).unwrap();\nheap.push(<span class=\"number\">3</span>).unwrap();\nheap.push(<span class=\"number\">4</span>).unwrap();\n\n<span class=\"macro\">assert!</span>(heap.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#300-302\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator visiting all values in the underlying vector, in arbitrary order.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\nheap.push(<span class=\"number\">1</span>).unwrap();\nheap.push(<span class=\"number\">2</span>).unwrap();\nheap.push(<span class=\"number\">3</span>).unwrap();\nheap.push(<span class=\"number\">4</span>).unwrap();\n\n<span class=\"comment\">// Print 1, 2, 3, 4 in arbitrary order\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>heap.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#308-310\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/slice/iter/struct.IterMut.html\" title=\"struct core::slice::iter::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.</p>\n<p><strong>WARNING</strong> Mutating the items in the binary heap can leave the heap in an inconsistent\nstate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#326-328\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.peek\" class=\"fn\">peek</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <em>top</em> (greatest if max-heap, smallest if min-heap) item in the binary heap, or\nNone if it is empty.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\n<span class=\"macro\">assert_eq!</span>(heap.peek(), <span class=\"prelude-val\">None</span>);\n\nheap.push(<span class=\"number\">1</span>).unwrap();\nheap.push(<span class=\"number\">5</span>).unwrap();\nheap.push(<span class=\"number\">2</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(heap.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#356-365\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"heapless/binary_heap/struct.PeekMutInner.html\" title=\"struct heapless::binary_heap::PeekMutInner\">PeekMutInner</a>&lt;'_, T, K, S&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the greatest item in the binary heap, or\n<code>None</code> if it is empty.</p>\n<p>Note: If the <code>PeekMut</code> value is leaked, the heap may be in an\ninconsistent state.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\n<span class=\"macro\">assert!</span>(heap.peek_mut().is_none());\n\nheap.push(<span class=\"number\">1</span>);\nheap.push(<span class=\"number\">5</span>);\nheap.push(<span class=\"number\">2</span>);\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val = heap.peek_mut().unwrap();\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">0</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(heap.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#381-387\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the <em>top</em> (greatest if max-heap, smallest if min-heap) item from the binary heap and\nreturns it, or None if it is empty.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\nheap.push(<span class=\"number\">1</span>).unwrap();\nheap.push(<span class=\"number\">3</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(heap.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(heap.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(heap.pop(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#409-417\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.pop_unchecked\" class=\"fn\">pop_unchecked</a>(&amp;mut self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes the <em>top</em> (greatest if max-heap, smallest if min-heap) item from the binary heap and\nreturns it, without checking if the binary heap is empty.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">ยง</a>Safety</h5>\n<p>The binary heap must not be empty.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\nheap.push(<span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// SAFETY: We just pushed a number onto the heap, so it cannot be empty.\n</span><span class=\"kw\">let </span>val = <span class=\"kw\">unsafe </span>{ heap.pop_unchecked() };\n<span class=\"macro\">assert_eq!</span>(val, <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#432-439\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, item: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Pushes an item onto the binary heap.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\nheap.push(<span class=\"number\">3</span>).unwrap();\nheap.push(<span class=\"number\">5</span>).unwrap();\nheap.push(<span class=\"number\">1</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(heap.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(heap.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#459-463\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"heapless/binary_heap/struct.BinaryHeapInner.html#tymethod.push_unchecked\" class=\"fn\">push_unchecked</a>(&amp;mut self, item: T)</h4></section></summary><div class=\"docblock\"><p>Pushes an item onto the binary heap without first checking if itโs full.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">ยง</a>Safety</h5>\n<p>The binary heap must not be full.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::binary_heap::{BinaryHeap, Max};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>, Max, <span class=\"number\">8</span>&gt; = BinaryHeap::new();\n\n<span class=\"comment\">// SAFETY: We just created an empty heap of size 8, so it cannot be full.\n</span><span class=\"kw\">unsafe </span>{ heap.push_unchecked(<span class=\"number\">42</span>) };\n<span class=\"macro\">assert_eq!</span>(heap.len(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(heap.peek(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>));</code></pre></div>\n</div></details></div></details>",0,"heapless::binary_heap::BinaryHeap","heapless::binary_heap::BinaryHeapView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BinaryHeapInner%3CT,+K,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#682-691\">Source</a><a href=\"#impl-Debug-for-BinaryHeapInner%3CT,+K,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, K, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"heapless/binary_heap/struct.BinaryHeapInner.html\" title=\"struct heapless::binary_heap::BinaryHeapInner\">BinaryHeapInner</a>&lt;T, K, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"heapless/binary_heap/trait.Kind.html\" title=\"trait heapless::binary_heap::Kind\">Kind</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    S: <a class=\"trait\" href=\"heapless/vec/trait.VecStorage.html\" title=\"trait heapless::vec::VecStorage\">VecStorage</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/binary_heap.rs.html#688-690\">Source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","heapless::binary_heap::BinaryHeap","heapless::binary_heap::BinaryHeapView"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[22561]}
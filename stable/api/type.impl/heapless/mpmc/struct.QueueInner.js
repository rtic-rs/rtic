(function() {
    var type_impls = Object.fromEntries([["heapless",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-QueueInner%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#235-240\">Source</a><a href=\"#impl-Drop-for-QueueInner%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"heapless/storage/trait.Storage.html\" title=\"trait heapless::storage::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"heapless/mpmc/struct.QueueInner.html\" title=\"struct heapless::mpmc::QueueInner\">QueueInner</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#236-239\">Source</a><a href=\"#method.drop\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","heapless::mpmc::Queue","heapless::mpmc::QueueView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueueInner%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#157-227\">Source</a><a href=\"#impl-QueueInner%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"heapless/storage/trait.Storage.html\" title=\"trait heapless::storage::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"heapless/mpmc/struct.QueueInner.html\" title=\"struct heapless::mpmc::QueueInner\">QueueInner</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#160-162\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/mpmc/struct.QueueInner.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum number of elements the queue can hold.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#181-183\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/mpmc/struct.QueueInner.html#tymethod.as_view\" class=\"fn\">as_view</a>(&amp;self) -&gt; &amp;<a class=\"type\" href=\"heapless/mpmc/type.QueueView.html\" title=\"type heapless::mpmc::QueueView\">QueueView</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference to the <code>Queue</code>, erasing the <code>N</code> const-generic.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>queue: Queue&lt;u8, <span class=\"number\">2</span>&gt; = Queue::new();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;</span>QueueView&lt;u8&gt; = queue.as_view();</code></pre></div>\n<p>It is often preferable to do the same through type coerction, since <code>Queue&lt;T, N&gt;</code> implements <code>Unsize&lt;QueueView&lt;T&gt;&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>queue: Queue&lt;u8, <span class=\"number\">2</span>&gt; = Queue::new();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;</span>QueueView&lt;u8&gt; = <span class=\"kw-2\">&amp;</span>queue;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#201-203\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/mpmc/struct.QueueInner.html#tymethod.as_mut_view\" class=\"fn\">as_mut_view</a>(&amp;mut self) -&gt; &amp;mut <a class=\"type\" href=\"heapless/mpmc/type.QueueView.html\" title=\"type heapless::mpmc::QueueView\">QueueView</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the <code>Queue</code>, erasing the <code>N</code> const-generic.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>queue: Queue&lt;u8, <span class=\"number\">2</span>&gt; = Queue::new();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;mut </span>QueueView&lt;u8&gt; = queue.as_mut_view();</code></pre></div>\n<p>It is often preferable to do the same through type coerction, since <code>Queue&lt;T, N&gt;</code> implements <code>Unsize&lt;QueueView&lt;T&gt;&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>queue: Queue&lt;u8, <span class=\"number\">2</span>&gt; = Queue::new();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;mut </span>QueueView&lt;u8&gt; = <span class=\"kw-2\">&amp;mut </span>queue;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dequeue\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#210-212\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/mpmc/struct.QueueInner.html#tymethod.dequeue\" class=\"fn\">dequeue</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the item in the front of the queue, or <code>None</code> if the queue is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enqueue\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#217-226\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/mpmc/struct.QueueInner.html#tymethod.enqueue\" class=\"fn\">enqueue</a>(&amp;self, item: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an <code>item</code> to the end of the queue.</p>\n<p>Returns back the <code>item</code> if the queue is full.</p>\n</div></details></div></details>",0,"heapless::mpmc::Queue","heapless::mpmc::QueueView"],["<section id=\"impl-Sync-for-QueueInner%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/mpmc.rs.html#242\">Source</a><a href=\"#impl-Sync-for-QueueInner%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S: <a class=\"trait\" href=\"heapless/storage/trait.Storage.html\" title=\"trait heapless::storage::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"heapless/mpmc/struct.QueueInner.html\" title=\"struct heapless::mpmc::QueueInner\">QueueInner</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Sync","heapless::mpmc::Queue","heapless::mpmc::QueueView"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[7934]}
(function() {
    var type_impls = Object.fromEntries([["heapless",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-LinearMapInner%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#515-523\">Source</a><a href=\"#impl-Debug-for-LinearMapInner%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S: <a class=\"trait\" href=\"heapless/linear_map/trait.LinearMapStorage.html\" title=\"trait heapless::linear_map::LinearMapStorage\">LinearMapStorage</a>&lt;K, V&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#520-522\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","heapless::linear_map::LinearMap","heapless::linear_map::LinearMapView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C%26Q%3E-for-LinearMapInner%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#472-482\">Source</a><a href=\"#impl-Index%3C%26Q%3E-for-LinearMapInner%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, Q, S: <a class=\"trait\" href=\"heapless/linear_map/trait.LinearMapStorage.html\" title=\"trait heapless::linear_map::LinearMapStorage\">LinearMapStorage</a>&lt;K, V&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#477\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#479-481\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;V</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<&Q>","heapless::linear_map::LinearMap","heapless::linear_map::LinearMapView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C%26Q%3E-for-LinearMapInner%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#484-492\">Source</a><a href=\"#impl-IndexMut%3C%26Q%3E-for-LinearMapInner%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, Q, S: <a class=\"trait\" href=\"heapless/linear_map/trait.LinearMapStorage.html\" title=\"trait heapless::linear_map::LinearMapStorage\">LinearMapStorage</a>&lt;K, V&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#489-491\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;mut V</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<&Q>","heapless::linear_map::LinearMap","heapless::linear_map::LinearMapView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LinearMapInner%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#124-470\">Source</a><a href=\"#impl-LinearMapInner%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S: <a class=\"trait\" href=\"heapless/linear_map/trait.LinearMapStorage.html\" title=\"trait heapless::linear_map::LinearMapStorage\">LinearMapStorage</a>&lt;K, V&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#129-131\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.as_view\" class=\"fn\">as_view</a>(&amp;self) -&gt; &amp;<a class=\"type\" href=\"heapless/linear_map/type.LinearMapView.html\" title=\"type heapless::linear_map::LinearMapView\">LinearMapView</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference to the <code>LinearMap</code>, erasing the <code>N</code> const-generic.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#134-136\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.as_mut_view\" class=\"fn\">as_mut_view</a>(&amp;mut self) -&gt; &amp;mut <a class=\"type\" href=\"heapless/linear_map/type.LinearMapView.html\" title=\"type heapless::linear_map::LinearMapView\">LinearMapView</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the <code>LinearMap</code>, erasing the <code>N</code> const-generic.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#150-152\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements that the map can hold.</p>\n<p>Computes in <em>O</em>(1) time.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span>map: LinearMap&lt;<span class=\"kw-2\">&amp;</span>str, isize, <span class=\"number\">8</span>&gt; = LinearMap::new();\n<span class=\"macro\">assert_eq!</span>(map.capacity(), <span class=\"number\">8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#168-170\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the map, removing all key-value pairs.</p>\n<p>Computes in <em>O</em>(1) time.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\nmap.clear();\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#186-188\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.contains_key\" class=\"fn\">contains_key</a>(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;K</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the map contains a value for the specified key.</p>\n<p>Computes in <em>O</em>(n) time.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#204-212\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key.</p>\n<p>Computes in <em>O</em>(n) time.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#230-238\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;mut V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value corresponding to the key.</p>\n<p>Computes in <em>O</em>(n) time.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = map.get_mut(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>) {\n    <span class=\"kw-2\">*</span>x = <span class=\"string\">\"b\"</span>;\n}\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"string\">\"b\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#254-256\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in this map.</p>\n<p>Computes in <em>O</em>(1) time.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">0</span>);\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#279-287\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, key: K, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.tuple.html\">(K, V)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into the map.</p>\n<p>If the map did not have this key present, <code>None</code> is returned.</p>\n<p>If the map did have this key present, the value is updated, and the old value is returned.</p>\n<p>Computes in <em>O</em>(n) time</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"number\">37</span>, <span class=\"string\">\"a\"</span>).unwrap(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.is_empty(), <span class=\"bool-val\">false</span>);\n\nmap.insert(<span class=\"number\">37</span>, <span class=\"string\">\"b\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"number\">37</span>, <span class=\"string\">\"c\"</span>).unwrap(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>));\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"kw-2\">&amp;</span><span class=\"number\">37</span>], <span class=\"string\">\"c\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#303-305\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the map contains no elements.</p>\n<p>Computes in <em>O</em>(1) time.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\n<span class=\"macro\">assert!</span>(a.is_empty());\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\n<span class=\"macro\">assert!</span>(!a.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#324-326\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the map is full.</p>\n<p>Computes in <em>O</em>(1) time.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt; = LinearMap::new();\n<span class=\"macro\">assert!</span>(!a.is_full());\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>).unwrap();\na.insert(<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>).unwrap();\na.insert(<span class=\"number\">4</span>, <span class=\"string\">\"d\"</span>).unwrap();\n<span class=\"macro\">assert!</span>(a.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#344-348\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"heapless/linear_map/struct.Iter.html\" title=\"struct heapless::linear_map::Iter\">Iter</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, K, V&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>).unwrap();\nmap.insert(<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>).unwrap();\nmap.insert(<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>).unwrap();\n\n<span class=\"kw\">for </span>(key, val) <span class=\"kw\">in </span>map.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {} val: {}\"</span>, key, val);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#372-376\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"heapless/linear_map/struct.IterMut.html\" title=\"struct heapless::linear_map::IterMut\">IterMut</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut&lt;&#39;_, K, V&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>).unwrap();\nmap.insert(<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>).unwrap();\nmap.insert(<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>).unwrap();\n\n<span class=\"comment\">// Update all values\n</span><span class=\"kw\">for </span>(<span class=\"kw\">_</span>, val) <span class=\"kw\">in </span>map.iter_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">2</span>;\n}\n\n<span class=\"kw\">for </span>(key, val) <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>map {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {} val: {}\"</span>, key, val);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#394-396\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.keys\" class=\"fn\">keys</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;K</a>&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all keys in arbitrary order.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>).unwrap();\nmap.insert(<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>).unwrap();\nmap.insert(<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>).unwrap();\n\n<span class=\"kw\">for </span>key <span class=\"kw\">in </span>map.keys() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, key);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#413-425\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the value at\nthe key if the key was previously in the map.</p>\n<p>Computes in <em>O</em>(n) time</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#443-445\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.values\" class=\"fn\">values</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;V</a>&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values in arbitrary order.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>).unwrap();\nmap.insert(<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>).unwrap();\nmap.insert(<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>).unwrap();\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span>map.values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, val);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#467-469\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/linear_map/struct.LinearMapInner.html#tymethod.values_mut\" class=\"fn\">values_mut</a>(&amp;mut self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;mut V</a>&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values mutably in arbitrary order.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::LinearMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: LinearMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = LinearMap::new();\nmap.insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>).unwrap();\nmap.insert(<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>).unwrap();\nmap.insert(<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>).unwrap();\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span>map.values_mut() {\n    <span class=\"kw-2\">*</span>val += <span class=\"number\">10</span>;\n}\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span>map.values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, val);\n}</code></pre></div>\n</div></details></div></details>",0,"heapless::linear_map::LinearMap","heapless::linear_map::LinearMapView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CLinearMapInner%3CK,+V2,+S2%3E%3E-for-LinearMapInner%3CK,+V1,+S1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#617-629\">Source</a><a href=\"#impl-PartialEq%3CLinearMapInner%3CK,+V2,+S2%3E%3E-for-LinearMapInner%3CK,+V1,+S1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V1, V2, S1: <a class=\"trait\" href=\"heapless/linear_map/trait.LinearMapStorage.html\" title=\"trait heapless::linear_map::LinearMapStorage\">LinearMapStorage</a>&lt;K, V1&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, S2: <a class=\"trait\" href=\"heapless/linear_map/trait.LinearMapStorage.html\" title=\"trait heapless::linear_map::LinearMapStorage\">LinearMapStorage</a>&lt;K, V2&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V2, S2&gt;&gt; for <a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V1, S1&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V1: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;V2&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#623-628\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V2, S2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#263\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<LinearMapInner<K, V2, S2>>","heapless::linear_map::LinearMap","heapless::linear_map::LinearMapView"],["<section id=\"impl-Eq-for-LinearMapInner%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/linear_map.rs.html#631-636\">Source</a><a href=\"#impl-Eq-for-LinearMapInner%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S: <a class=\"trait\" href=\"heapless/linear_map/trait.LinearMapStorage.html\" title=\"trait heapless::linear_map::LinearMapStorage\">LinearMapStorage</a>&lt;K, V&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"heapless/linear_map/struct.LinearMapInner.html\" title=\"struct heapless::linear_map::LinearMapInner\">LinearMapInner</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section>","Eq","heapless::linear_map::LinearMap","heapless::linear_map::LinearMapView"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[41168]}
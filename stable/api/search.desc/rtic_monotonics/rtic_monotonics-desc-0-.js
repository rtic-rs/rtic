searchState.loadedDescShard("rtic_monotonics", 0, "In-tree implementations of the <code>rtic_time::Monotonic</code> …\nThe backend for the timer queue\nThe type for duration, defining a duration of time.\nThe type for duration, defining a duration of time.\nThe type for instant, defining an instant in time.\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nThe type for ticks.\nThis indicates that there was a timeout.\nA backend definition for a monotonic clock/counter.\nA <code>Monotonic</code> that is backed by the <code>TimerQueue</code>.\nClear the compare interrupt flag.\nDelay for some duration of time.\nDelay to some specific time instant.\nOptional. This is used to save power, this is called when …\nOptional. This is used to save power, this is called when …\nReturns the argument unchanged.\n<code>Monotonic</code> implementations for i.MX RT’s GPT peripherals.\nCreate a GPT1 based monotonic and register the GPT1 …\nCreate a GPT2 based monotonic and register the GPT2 …\nCalls <code>U::from(self)</code>.\nGet the current time.\nGet the current time.\n<code>Monotonic</code> implementations for the nRF series of MCUs.\nCreate an RTC0 based monotonic and register the RTC0 …\nCreate an RTC1 based monotonic and register the RTC1 …\nCreate an RTC2 based monotonic and register the RTC2 …\nCreate an Timer0 based monotonic and register the TIMER0 …\nCreate an Timer1 based monotonic and register the TIMER1 …\nCreate an Timer2 based monotonic and register the TIMER2 …\nCreate an Timer3 based monotonic and register the TIMER3 …\nCreate an Timer4 based monotonic and register the TIMER4 …\nOptional. Runs on interrupt before any timer queue …\nPend the timer’s interrupt.\n<code>Monotonic</code> implementation for RP2040’s Timer peripheral.\nCreate an RP2040 timer based monotonic and register the …\nSet the compare value of the timer interrupt.\n<code>Monotonic</code> implementations for STM32 chips.\nCreate a TIM15 based monotonic and register the TIM15 …\nCreate a TIM2 based monotonic and register the TIM2 …\nCreate a TIM3 based monotonic and register the TIM3 …\nCreate a TIM4 based monotonic and register the TIM4 …\nCreate a TIM5 based monotonic and register the TIM5 …\n<code>Monotonic</code> based on Cortex-M SysTick.\nCreate a Systick based monotonic and register the Systick …\nTimeout after a specific duration.\nTimeout at a specific time.\nReturns a reference to the underlying timer queue.\nGPT based <code>TimerQueueBackend</code>.\nGPT based <code>TimerQueueBackend</code>.\nStarts the timer.\nStarts the timer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon definitions and traits for using the i.MX RT …\nThe type for duration, defining a duration of time.\nExtension trait for simple short-hands for u64 Durations\nExtension trait for simple short-hands for u64 Durations …\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nDelay for some duration of time.\nDelay to some specific time instant.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents hours.\nCreate a GPT1 based monotonic and register the GPT1 …\nCreate a GPT2 based monotonic and register the GPT2 …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nGet the current time.\nShorthand for creating a duration which represents seconds.\nShorthand for creating a duration which represents seconds.\nTimeout after a specific duration.\nTimeout at a specific time.\n<code>Monotonic</code> implementation for the nRF Real Time Clocks …\n<code>Monotonic</code> implementation for the 32-bit timers of the nRF …\nRTC based <code>TimerQueueBackend</code>.\nRTC based <code>TimerQueueBackend</code>.\nRTC based <code>TimerQueueBackend</code>.\nStarts the timer.\nStarts the timer.\nStarts the timer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon definitions and traits for using the nRF RTC …\nThe type for duration, defining a duration of time.\nExtension trait for simple short-hands for u64 Durations\nExtension trait for simple short-hands for u64 Durations …\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nDelay for some duration of time.\nDelay to some specific time instant.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nGet the current time.\nCreate an RTC0 based monotonic and register the RTC0 …\nCreate an RTC1 based monotonic and register the RTC1 …\nCreate an RTC2 based monotonic and register the RTC2 …\nShorthand for creating a duration which represents seconds.\nShorthand for creating a duration which represents seconds.\nTimeout after a specific duration.\nTimeout at a specific time.\nTimer peripheral based <code>TimerQueueBackend</code>.\nTimer peripheral based <code>TimerQueueBackend</code>.\nTimer peripheral based <code>TimerQueueBackend</code>.\nTimer peripheral based <code>TimerQueueBackend</code>.\nTimer peripheral based <code>TimerQueueBackend</code>.\nStarts the timer.\nStarts the timer.\nStarts the timer.\nStarts the timer.\nStarts the timer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon definitions and traits for using the nRF Timer …\nThe type for duration, defining a duration of time.\nExtension trait for simple short-hands for u64 Durations\nExtension trait for simple short-hands for u64 Durations …\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nDelay for some duration of time.\nDelay to some specific time instant.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nGet the current time.\nCreate an Timer0 based monotonic and register the TIMER0 …\nCreate an Timer1 based monotonic and register the TIMER1 …\nCreate an Timer2 based monotonic and register the TIMER2 …\nCreate an Timer3 based monotonic and register the TIMER3 …\nCreate an Timer4 based monotonic and register the TIMER4 …\nShorthand for creating a duration which represents seconds.\nShorthand for creating a duration which represents seconds.\nTimeout after a specific duration.\nTimeout at a specific time.\nPointer to the register block\nPointer to the register block\nRESETS\nControls time and alarms time is a 64 bit value indicating …\nTimer implementing <code>TimerQueueBackend</code>.\nStarts the monotonic timer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon definitions and traits for using the RP2040 timer …\nReturn the pointer to the register block\nReturn the pointer to the register block\nSteal an instance of this peripheral\nSteal an instance of this peripheral\nThe type for duration, defining a duration of time.\nExtension trait for simple short-hands for u64 Durations\nExtension trait for simple short-hands for u64 Durations …\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nDelay for some duration of time.\nDelay to some specific time instant.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nGet the current time.\nCreate an RP2040 timer based monotonic and register the …\nShorthand for creating a duration which represents seconds.\nShorthand for creating a duration which represents seconds.\nTimeout after a specific duration.\nTimeout at a specific time.\nMonotonic timer backend implementation.\nMonotonic timer backend implementation.\nMonotonic timer backend implementation.\nMonotonic timer backend implementation.\nMonotonic timer backend implementation.\nStarts the timer.\nStarts the timer.\nStarts the timer.\nStarts the timer.\nStarts the timer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon definitions and traits for using the STM32 …\nThe type for duration, defining a duration of time.\nExtension trait for simple short-hands for u64 Durations\nExtension trait for simple short-hands for u64 Durations …\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nDelay for some duration of time.\nDelay to some specific time instant.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nGet the current time.\nShorthand for creating a duration which represents seconds.\nShorthand for creating a duration which represents seconds.\nCreate a TIM15 based monotonic and register the TIM15 …\nCreate a TIM2 based monotonic and register the TIM2 …\nCreate a TIM3 based monotonic and register the TIM3 …\nCreate a TIM4 based monotonic and register the TIM4 …\nCreate a TIM5 based monotonic and register the TIM5 …\nTimeout after a specific duration.\nTimeout at a specific time.\nPointer to the register block\nSysTick: System Timer\nSystick based <code>TimerQueueBackend</code>.\nStarts the monotonic timer.\nClears current value to 0\nDisables counter\nDisables SysTick interrupt\nEnables counter\nEnables SysTick interrupt\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets clock source\nGets current value\nGets reload value\nReturns the reload value with which the counter would wrap …\nChecks if an external reference clock is available\nChecks if the counter wrapped (underflowed) since the last …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if counter is enabled\nChecks if SysTick interrupt is enabled\nChecks if the calibration value is precise\nCommon definitions and traits for using the systick …\nReturns a pointer to the register block\nSets clock source\nSets reload value\nThe type for duration, defining a duration of time.\nExtension trait for simple short-hands for u32 Durations\nExtension trait for simple short-hands for u32 Durations …\nThe type for instant, defining an instant in time.\nA monotonic clock / counter definition.\nDelay for some duration of time.\nDelay to some specific time instant.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents hours.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents minutes.\nShorthand for creating a duration which represents …\nShorthand for creating a duration which represents …\nGet the current time.\nShorthand for creating a duration which represents seconds.\nShorthand for creating a duration which represents seconds.\nCreate a Systick based monotonic and register the Systick …\nTimeout after a specific duration.\nTimeout at a specific time.")
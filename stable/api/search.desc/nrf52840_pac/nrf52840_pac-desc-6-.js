searchState.loadedDescShard("nrf52840_pac", 6, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nWrite: Enable channel\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nInclude or exclude channel 0\nField <code>CH0</code> reader - Include or exclude channel 0\nField <code>CH0</code> writer - Include or exclude channel 0\nInclude or exclude channel 10\nField <code>CH10</code> reader - Include or exclude channel 10\nField <code>CH10</code> writer - Include or exclude channel 10\nInclude or exclude channel 11\nField <code>CH11</code> reader - Include or exclude channel 11\nField <code>CH11</code> writer - Include or exclude channel 11\nInclude or exclude channel 12\nField <code>CH12</code> reader - Include or exclude channel 12\nField <code>CH12</code> writer - Include or exclude channel 12\nInclude or exclude channel 13\nField <code>CH13</code> reader - Include or exclude channel 13\nField <code>CH13</code> writer - Include or exclude channel 13\nInclude or exclude channel 14\nField <code>CH14</code> reader - Include or exclude channel 14\nField <code>CH14</code> writer - Include or exclude channel 14\nInclude or exclude channel 15\nField <code>CH15</code> reader - Include or exclude channel 15\nField <code>CH15</code> writer - Include or exclude channel 15\nInclude or exclude channel 16\nField <code>CH16</code> reader - Include or exclude channel 16\nField <code>CH16</code> writer - Include or exclude channel 16\nInclude or exclude channel 17\nField <code>CH17</code> reader - Include or exclude channel 17\nField <code>CH17</code> writer - Include or exclude channel 17\nInclude or exclude channel 18\nField <code>CH18</code> reader - Include or exclude channel 18\nField <code>CH18</code> writer - Include or exclude channel 18\nInclude or exclude channel 19\nField <code>CH19</code> reader - Include or exclude channel 19\nField <code>CH19</code> writer - Include or exclude channel 19\nInclude or exclude channel 1\nField <code>CH1</code> reader - Include or exclude channel 1\nField <code>CH1</code> writer - Include or exclude channel 1\nInclude or exclude channel 20\nField <code>CH20</code> reader - Include or exclude channel 20\nField <code>CH20</code> writer - Include or exclude channel 20\nInclude or exclude channel 21\nField <code>CH21</code> reader - Include or exclude channel 21\nField <code>CH21</code> writer - Include or exclude channel 21\nInclude or exclude channel 22\nField <code>CH22</code> reader - Include or exclude channel 22\nField <code>CH22</code> writer - Include or exclude channel 22\nInclude or exclude channel 23\nField <code>CH23</code> reader - Include or exclude channel 23\nField <code>CH23</code> writer - Include or exclude channel 23\nInclude or exclude channel 24\nField <code>CH24</code> reader - Include or exclude channel 24\nField <code>CH24</code> writer - Include or exclude channel 24\nInclude or exclude channel 25\nField <code>CH25</code> reader - Include or exclude channel 25\nField <code>CH25</code> writer - Include or exclude channel 25\nInclude or exclude channel 26\nField <code>CH26</code> reader - Include or exclude channel 26\nField <code>CH26</code> writer - Include or exclude channel 26\nInclude or exclude channel 27\nField <code>CH27</code> reader - Include or exclude channel 27\nField <code>CH27</code> writer - Include or exclude channel 27\nInclude or exclude channel 28\nField <code>CH28</code> reader - Include or exclude channel 28\nField <code>CH28</code> writer - Include or exclude channel 28\nInclude or exclude channel 29\nField <code>CH29</code> reader - Include or exclude channel 29\nField <code>CH29</code> writer - Include or exclude channel 29\nInclude or exclude channel 2\nField <code>CH2</code> reader - Include or exclude channel 2\nField <code>CH2</code> writer - Include or exclude channel 2\nInclude or exclude channel 30\nField <code>CH30</code> reader - Include or exclude channel 30\nField <code>CH30</code> writer - Include or exclude channel 30\nInclude or exclude channel 31\nField <code>CH31</code> reader - Include or exclude channel 31\nField <code>CH31</code> writer - Include or exclude channel 31\nInclude or exclude channel 3\nField <code>CH3</code> reader - Include or exclude channel 3\nField <code>CH3</code> writer - Include or exclude channel 3\nInclude or exclude channel 4\nField <code>CH4</code> reader - Include or exclude channel 4\nField <code>CH4</code> writer - Include or exclude channel 4\nInclude or exclude channel 5\nField <code>CH5</code> reader - Include or exclude channel 5\nField <code>CH5</code> writer - Include or exclude channel 5\nInclude or exclude channel 6\nField <code>CH6</code> reader - Include or exclude channel 6\nField <code>CH6</code> writer - Include or exclude channel 6\nInclude or exclude channel 7\nField <code>CH7</code> reader - Include or exclude channel 7\nField <code>CH7</code> writer - Include or exclude channel 7\nInclude or exclude channel 8\nField <code>CH8</code> reader - Include or exclude channel 8\nField <code>CH8</code> writer - Include or exclude channel 8\nInclude or exclude channel 9\nField <code>CH9</code> reader - Include or exclude channel 9\nField <code>CH9</code> writer - Include or exclude channel 9\nDescription collection[n]: Channel group n\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n0: Exclude\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\n1: Include\nRegister <code>CHG[%s]</code> reader\nRegister <code>CHG[%s]</code> writer\nWrites raw bits to the register.\nBit 0 - Include or exclude channel 0\nBit 0 - Include or exclude channel 0\nBit 1 - Include or exclude channel 1\nBit 1 - Include or exclude channel 1\nBit 10 - Include or exclude channel 10\nBit 10 - Include or exclude channel 10\nBit 11 - Include or exclude channel 11\nBit 11 - Include or exclude channel 11\nBit 12 - Include or exclude channel 12\nBit 12 - Include or exclude channel 12\nBit 13 - Include or exclude channel 13\nBit 13 - Include or exclude channel 13\nBit 14 - Include or exclude channel 14\nBit 14 - Include or exclude channel 14\nBit 15 - Include or exclude channel 15\nBit 15 - Include or exclude channel 15\nBit 16 - Include or exclude channel 16\nBit 16 - Include or exclude channel 16\nBit 17 - Include or exclude channel 17\nBit 17 - Include or exclude channel 17\nBit 18 - Include or exclude channel 18\nBit 18 - Include or exclude channel 18\nBit 19 - Include or exclude channel 19\nBit 19 - Include or exclude channel 19\nBit 2 - Include or exclude channel 2\nBit 2 - Include or exclude channel 2\nBit 20 - Include or exclude channel 20\nBit 20 - Include or exclude channel 20\nBit 21 - Include or exclude channel 21\nBit 21 - Include or exclude channel 21\nBit 22 - Include or exclude channel 22\nBit 22 - Include or exclude channel 22\nBit 23 - Include or exclude channel 23\nBit 23 - Include or exclude channel 23\nBit 24 - Include or exclude channel 24\nBit 24 - Include or exclude channel 24\nBit 25 - Include or exclude channel 25\nBit 25 - Include or exclude channel 25\nBit 26 - Include or exclude channel 26\nBit 26 - Include or exclude channel 26\nBit 27 - Include or exclude channel 27\nBit 27 - Include or exclude channel 27\nBit 28 - Include or exclude channel 28\nBit 28 - Include or exclude channel 28\nBit 29 - Include or exclude channel 29\nBit 29 - Include or exclude channel 29\nBit 3 - Include or exclude channel 3\nBit 3 - Include or exclude channel 3\nBit 30 - Include or exclude channel 30\nBit 30 - Include or exclude channel 30\nBit 31 - Include or exclude channel 31\nBit 31 - Include or exclude channel 31\nBit 4 - Include or exclude channel 4\nBit 4 - Include or exclude channel 4\nBit 5 - Include or exclude channel 5\nBit 5 - Include or exclude channel 5\nBit 6 - Include or exclude channel 6\nBit 6 - Include or exclude channel 6\nBit 7 - Include or exclude channel 7\nBit 7 - Include or exclude channel 7\nBit 8 - Include or exclude channel 8\nBit 8 - Include or exclude channel 8\nBit 9 - Include or exclude channel 9\nBit 9 - Include or exclude channel 9\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nExclude\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nInclude\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>EXCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nChecks if the value of the field is <code>INCLUDED</code>\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nRegister block\nTEP (rw) register accessor: an alias for <code>Reg&lt;TEP_SPEC&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription cluster[n]: Channel n task end-point\n0x00 - Description cluster[n]: Channel n task end-point\nRegister <code>TEP</code> reader\nField <code>TEP</code> reader - Pointer to task register\nDescription cluster[n]: Channel n task end-point\nField <code>TEP</code> writer - Pointer to task register\nRegister <code>TEP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Pointer to task register\nBits 0:31 - Pointer to task register\nDIS (w) register accessor: an alias for <code>Reg&lt;DIS_SPEC&gt;</code>\nEN (w) register accessor: an alias for <code>Reg&lt;EN_SPEC&gt;</code>\nRegister block\nDescription cluster[n]: Disable channel group n\n0x04 - Description cluster[n]: Disable channel group n\nDescription cluster[n]: Enable channel group n\n0x00 - Description cluster[n]: Enable channel group n\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription cluster[n]: Disable channel group n\nField <code>DIS</code> writer -\nRegister <code>DIS</code> writer\nWrites raw bits to the register.\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescription cluster[n]: Enable channel group n\nField <code>EN</code> writer -\nRegister <code>EN</code> writer\nWrites raw bits to the register.\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCOUNTERTOP (rw) register accessor: an alias for …\nDECODER (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nEVENTS_LOOPSDONE (rw) register accessor: an alias for …\nEVENTS_PWMPERIODEND (rw) register accessor: an alias for …\nEVENTS_SEQEND (rw) register accessor: an alias for …\nEVENTS_SEQSTARTED (rw) register accessor: an alias for …\nEVENTS_STOPPED (rw) register accessor: an alias for …\nINTEN (rw) register accessor: an alias for <code>Reg&lt;INTEN_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nLOOP (rw) register accessor: an alias for <code>Reg&lt;LOOP_SPEC&gt;</code>\nMODE (rw) register accessor: an alias for <code>Reg&lt;MODE_SPEC&gt;</code>\nPRESCALER (rw) register accessor: an alias for …\nUnspecified\nRegister block\nUnspecified\nSHORTS (rw) register accessor: an alias for …\nTASKS_NEXTSTEP (w) register accessor: an alias for …\nTASKS_SEQSTART (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nValue up to which the pulse generator counter counts\n0x508 - Value up to which the pulse generator counter …\nConfiguration of the decoder\n0x510 - Configuration of the decoder\nPWM module enable register\n0x500 - PWM module enable register\nConcatenated sequences have been played the amount of …\n0x11c - Concatenated sequences have been played the amount …\nEmitted at the end of each PWM period\n0x118 - Emitted at the end of each PWM period\nDescription collection[n]: Emitted at end of every …\n0x110..0x118 - Description collection[n]: Emitted at end …\nDescription collection[n]: First PWM period started on …\n0x108..0x110 - Description collection[n]: First PWM period …\nResponse to STOP task, emitted when PWM pulses are no …\n0x104 - Response to STOP task, emitted when PWM pulses are …\nReturns the argument unchanged.\nEnable or disable interrupt\n0x300 - Enable or disable interrupt\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nNumber of playbacks of a loop\n0x514 - Number of playbacks of a loop\nSelects operating mode of the wave counter\n0x504 - Selects operating mode of the wave counter\nConfiguration for PWM_CLK\n0x50c - Configuration for PWM_CLK\nCluster Unspecified\n0x560..0x570 - Unspecified\nCluster Unspecified\n0x520..0x530 - Unspecified\n0x540..0x550 - Unspecified\nShortcut register\n0x200 - Shortcut register\nSteps by one value in the current sequence on all enabled …\n0x10 - Steps by one value in the current sequence on all …\nDescription collection[n]: Loads the first PWM value on …\n0x08..0x10 - Description collection[n]: Loads the first …\nStops PWM pulse generation on all channels at the end of …\n0x04 - Stops PWM pulse generation on all channels at the …\nField <code>COUNTERTOP</code> reader - Value up to which the pulse …\nValue up to which the pulse generator counter counts\nField <code>COUNTERTOP</code> writer - Value up to which the pulse …\nRegister <code>COUNTERTOP</code> reader\nRegister <code>COUNTERTOP</code> writer\nWrites raw bits to the register.\nBits 0:14 - Value up to which the pulse generator counter …\nBits 0:14 - Value up to which the pulse generator counter …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: 1st half word (16-bit) used in all PWM channels 0..3\nConfiguration of the decoder\n1: 1st half word (16-bit) used in channel 0..1; 2nd word …\n2: 1st half word (16-bit) in ch.0; 2nd in ch.1; …; 4th …\nHow a sequence is read from RAM and spread to the compare …\nField <code>LOAD</code> reader - How a sequence is read from RAM and …\nField <code>LOAD</code> writer - How a sequence is read from RAM and …\nSelects source for advancing the active sequence\nField <code>MODE</code> reader - Selects source for advancing the …\nField <code>MODE</code> writer - Selects source for advancing the …\n1: NEXTSTEP task causes a new value to be loaded to …\nRegister <code>DECODER</code> reader\n0: SEQ[n].REFRESH is used to determine loading internal …\nRegister <code>DECODER</code> writer\n3: 1st half word (16-bit) in ch.0; 2nd in ch.1; …; 4th …\nWrites raw bits to the register.\n1st half word (16-bit) used in all PWM channels 0..3\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n1st half word (16-bit) used in channel 0..1; 2nd word in …\n1st half word (16-bit) in ch.0; 2nd in ch.1; …; 4th in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>COMMON</code>\nChecks if the value of the field is <code>GROUPED</code>\nChecks if the value of the field is <code>INDIVIDUAL</code>\nChecks if the value of the field is <code>NEXT_STEP</code>\nChecks if the value of the field is <code>REFRESH_COUNT</code>\nChecks if the value of the field is <code>WAVE_FORM</code>\nBits 0:1 - How a sequence is read from RAM and spread to …\nBits 0:1 - How a sequence is read from RAM and spread to …\nBit 8 - Selects source for advancing the active sequence\nBit 8 - Selects source for advancing the active sequence\nNEXTSTEP task causes a new value to be loaded to internal …\nSEQ[n].REFRESH is used to determine loading internal …\nGet enumerated values variant\nGet enumerated values variant\n1st half word (16-bit) in ch.0; 2nd in ch.1; …; 4th in …\n0: Disabled\n1: Enable\nEnable or disable PWM module\nField <code>ENABLE</code> reader - Enable or disable PWM module\nPWM module enable register\nField <code>ENABLE</code> writer - Enable or disable PWM module\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisabled\nBit 0 - Enable or disable PWM module\nBit 0 - Enable or disable PWM module\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nField <code>EVENTS_LOOPSDONE</code> reader -\nConcatenated sequences have been played the amount of …\nField <code>EVENTS_LOOPSDONE</code> writer -\nRegister <code>EVENTS_LOOPSDONE</code> reader\nRegister <code>EVENTS_LOOPSDONE</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_PWMPERIODEND</code> reader -\nEmitted at the end of each PWM period\nField <code>EVENTS_PWMPERIODEND</code> writer -\nRegister <code>EVENTS_PWMPERIODEND</code> reader\nRegister <code>EVENTS_PWMPERIODEND</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_SEQEND</code> reader -\nDescription collection[n]: Emitted at end of every …\nField <code>EVENTS_SEQEND</code> writer -\nRegister <code>EVENTS_SEQEND[%s]</code> reader\nRegister <code>EVENTS_SEQEND[%s]</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_SEQSTARTED</code> reader -\nDescription collection[n]: First PWM period started on …\nField <code>EVENTS_SEQSTARTED</code> writer -\nRegister <code>EVENTS_SEQSTARTED[%s]</code> reader\nRegister <code>EVENTS_SEQSTARTED[%s]</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_STOPPED</code> reader -\nResponse to STOP task, emitted when PWM pulses are no …\nField <code>EVENTS_STOPPED</code> writer -\nRegister <code>EVENTS_STOPPED</code> reader\nRegister <code>EVENTS_STOPPED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nEnable or disable interrupt\nEnable or disable interrupt for LOOPSDONE event\nField <code>LOOPSDONE</code> reader - Enable or disable interrupt for …\nField <code>LOOPSDONE</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for PWMPERIODEND event\nField <code>PWMPERIODEND</code> reader - Enable or disable interrupt …\nField <code>PWMPERIODEND</code> writer - Enable or disable interrupt …\nRegister <code>INTEN</code> reader\nEnable or disable interrupt for SEQEND[0] event\nField <code>SEQEND0</code> reader - Enable or disable interrupt for …\nField <code>SEQEND0</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for SEQEND[1] event\nField <code>SEQEND1</code> reader - Enable or disable interrupt for …\nField <code>SEQEND1</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for SEQSTARTED[0] event\nField <code>SEQSTARTED0</code> reader - Enable or disable interrupt for …\nField <code>SEQSTARTED0</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for SEQSTARTED[1] event\nField <code>SEQSTARTED1</code> reader - Enable or disable interrupt for …\nField <code>SEQSTARTED1</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Enable or disable interrupt for …\nField <code>STOPPED</code> writer - Enable or disable interrupt for …\nRegister <code>INTEN</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 7 - Enable or disable interrupt for LOOPSDONE event\nBit 7 - Enable or disable interrupt for LOOPSDONE event\nBit 6 - Enable or disable interrupt for PWMPERIODEND event\nBit 6 - Enable or disable interrupt for PWMPERIODEND event\nBit 4 - Enable or disable interrupt for SEQEND[0] event\nBit 4 - Enable or disable interrupt for SEQEND[0] event\nBit 5 - Enable or disable interrupt for SEQEND[1] event\nBit 5 - Enable or disable interrupt for SEQEND[1] event\nBit 2 - Enable or disable interrupt for SEQSTARTED[0] event\nBit 2 - Enable or disable interrupt for SEQSTARTED[0] event\nBit 3 - Enable or disable interrupt for SEQSTARTED[1] event\nBit 3 - Enable or disable interrupt for SEQSTARTED[1] event\nBit 1 - Enable or disable interrupt for STOPPED event\nBit 1 - Enable or disable interrupt for STOPPED event\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nDisable interrupt\nWrite ‘1’ to disable interrupt for LOOPSDONE event\nWrite ‘1’ to disable interrupt for LOOPSDONE event\nField <code>LOOPSDONE</code> reader - Write ‘1’ to disable …\nField <code>LOOPSDONE</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for PWMPERIODEND event\nWrite ‘1’ to disable interrupt for PWMPERIODEND event\nField <code>PWMPERIODEND</code> reader - Write ‘1’ to disable …\nField <code>PWMPERIODEND</code> writer - Write ‘1’ to disable …\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for SEQEND[0] event\nWrite ‘1’ to disable interrupt for SEQEND[0] event\nField <code>SEQEND0</code> reader - Write ‘1’ to disable interrupt …\nField <code>SEQEND0</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for SEQEND[1] event\nWrite ‘1’ to disable interrupt for SEQEND[1] event\nField <code>SEQEND1</code> reader - Write ‘1’ to disable interrupt …\nField <code>SEQEND1</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for SEQSTARTED[0] event\nWrite ‘1’ to disable interrupt for SEQSTARTED[0] event\nField <code>SEQSTARTED0</code> reader - Write ‘1’ to disable …\nField <code>SEQSTARTED0</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for SEQSTARTED[1] event\nWrite ‘1’ to disable interrupt for SEQSTARTED[1] event\nField <code>SEQSTARTED1</code> reader - Write ‘1’ to disable …\nField <code>SEQSTARTED1</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for STOPPED event\nWrite ‘1’ to disable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Write ‘1’ to disable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to disable interrupt …\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 7 - Write ‘1’ to disable interrupt for LOOPSDONE …\nBit 7 - Write ‘1’ to disable interrupt for LOOPSDONE …\nBit 6 - Write ‘1’ to disable interrupt for …\nBit 6 - Write ‘1’ to disable interrupt for …\nBit 4 - Write ‘1’ to disable interrupt for SEQEND[0] …\nBit 4 - Write ‘1’ to disable interrupt for SEQEND[0] …\nBit 5 - Write ‘1’ to disable interrupt for SEQEND[1] …\nBit 5 - Write ‘1’ to disable interrupt for SEQEND[1] …\nBit 2 - Write ‘1’ to disable interrupt for SEQSTARTED[0…\nBit 2 - Write ‘1’ to disable interrupt for SEQSTARTED[0…\nBit 3 - Write ‘1’ to disable interrupt for SEQSTARTED[1…\nBit 3 - Write ‘1’ to disable interrupt for SEQSTARTED[1…\nBit 1 - Write ‘1’ to disable interrupt for STOPPED …\nBit 1 - Write ‘1’ to disable interrupt for STOPPED …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nEnable interrupt\nWrite ‘1’ to enable interrupt for LOOPSDONE event\nWrite ‘1’ to enable interrupt for LOOPSDONE event\nField <code>LOOPSDONE</code> reader - Write ‘1’ to enable interrupt …\nField <code>LOOPSDONE</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for PWMPERIODEND event\nWrite ‘1’ to enable interrupt for PWMPERIODEND event\nField <code>PWMPERIODEND</code> reader - Write ‘1’ to enable …\nField <code>PWMPERIODEND</code> writer - Write ‘1’ to enable …\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for SEQEND[0] event\nWrite ‘1’ to enable interrupt for SEQEND[0] event\nField <code>SEQEND0</code> reader - Write ‘1’ to enable interrupt …\nField <code>SEQEND0</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for SEQEND[1] event\nWrite ‘1’ to enable interrupt for SEQEND[1] event\nField <code>SEQEND1</code> reader - Write ‘1’ to enable interrupt …\nField <code>SEQEND1</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for SEQSTARTED[0] event\nWrite ‘1’ to enable interrupt for SEQSTARTED[0] event\nField <code>SEQSTARTED0</code> reader - Write ‘1’ to enable …\nField <code>SEQSTARTED0</code> writer - Write ‘1’ to enable …\nWrite ‘1’ to enable interrupt for SEQSTARTED[1] event\nWrite ‘1’ to enable interrupt for SEQSTARTED[1] event\nField <code>SEQSTARTED1</code> reader - Write ‘1’ to enable …\nField <code>SEQSTARTED1</code> writer - Write ‘1’ to enable …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for STOPPED event\nWrite ‘1’ to enable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Write ‘1’ to enable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to enable interrupt …\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 7 - Write ‘1’ to enable interrupt for LOOPSDONE …\nBit 7 - Write ‘1’ to enable interrupt for LOOPSDONE …\nBit 6 - Write ‘1’ to enable interrupt for PWMPERIODEND …\nBit 6 - Write ‘1’ to enable interrupt for PWMPERIODEND …\nBit 4 - Write ‘1’ to enable interrupt for SEQEND[0] …\nBit 4 - Write ‘1’ to enable interrupt for SEQEND[0] …\nBit 5 - Write ‘1’ to enable interrupt for SEQEND[1] …\nBit 5 - Write ‘1’ to enable interrupt for SEQEND[1] …\nBit 2 - Write ‘1’ to enable interrupt for SEQSTARTED[0]\nBit 2 - Write ‘1’ to enable interrupt for SEQSTARTED[0]\nBit 3 - Write ‘1’ to enable interrupt for SEQSTARTED[1]\nBit 3 - Write ‘1’ to enable interrupt for SEQSTARTED[1]\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 1 - Write ‘1’ to enable interrupt for STOPPED event\nBit 1 - Write ‘1’ to enable interrupt for STOPPED event\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nNumber of playbacks of pattern cycles\nField <code>CNT</code> reader - Number of playbacks of pattern cycles\nField <code>CNT</code> writer - Number of playbacks of pattern cycles\n0: Looping disabled (stop at the end of the sequence)\nNumber of playbacks of a loop\nRegister <code>LOOP</code> reader\nRegister <code>LOOP</code> writer\nWrites raw bits to the register.\nBits 0:15 - Number of playbacks of pattern cycles\nBits 0:15 - Number of playbacks of pattern cycles\nLooping disabled (stop at the end of the sequence)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nGet enumerated values variant\nSelects operating mode of the wave counter\nRegister <code>MODE</code> reader\n0: Up counter, edge-aligned PWM duty cycle\nSelects up mode or up-and-down mode for the counter\nField <code>UPDOWN</code> reader - Selects up mode or up-and-down mode …\nField <code>UPDOWN</code> writer - Selects up mode or up-and-down mode …\n1: Up and down counter, center-aligned PWM duty cycle\nRegister <code>MODE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>UP</code>\nChecks if the value of the field is <code>UP_AND_DOWN</code>\nUp counter, edge-aligned PWM duty cycle\nUp and down counter, center-aligned PWM duty cycle\nBit 0 - Selects up mode or up-and-down mode for the counter\nBit 0 - Selects up mode or up-and-down mode for the counter\nGet enumerated values variant\n0: Divide by 1 (16 MHz)\n7: Divide by 128 (125 kHz)\n4: Divide by 16 (1 MHz)\n1: Divide by 2 (8 MHz)\n5: Divide by 32 (500 kHz)\n2: Divide by 4 (4 MHz)\n6: Divide by 64 (250 kHz)\n3: Divide by 8 (2 MHz)\nPrescaler of PWM_CLK\nField <code>PRESCALER</code> reader - Prescaler of PWM_CLK\nConfiguration for PWM_CLK\nField <code>PRESCALER</code> writer - Prescaler of PWM_CLK\nRegister <code>PRESCALER</code> reader\nRegister <code>PRESCALER</code> writer\nWrites raw bits to the register.\nDivide by 1 (16 MHz)\nDivide by 128 (125 kHz)\nDivide by 16 (1 MHz)\nDivide by 2 (8 MHz)\nDivide by 32 (500 kHz)\nDivide by 4 (4 MHz)\nDivide by 64 (250 kHz)\nDivide by 8 (2 MHz)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DIV_1</code>\nChecks if the value of the field is <code>DIV_128</code>\nChecks if the value of the field is <code>DIV_16</code>\nChecks if the value of the field is <code>DIV_2</code>\nChecks if the value of the field is <code>DIV_32</code>\nChecks if the value of the field is <code>DIV_4</code>\nChecks if the value of the field is <code>DIV_64</code>\nChecks if the value of the field is <code>DIV_8</code>\nBits 0:2 - Prescaler of PWM_CLK\nBits 0:2 - Prescaler of PWM_CLK\nGet enumerated values variant\nOUT (rw) register accessor: an alias for <code>Reg&lt;OUT_SPEC&gt;</code>\nRegister block\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription collection[n]: Output pin select for PWM …\n0x00..0x10 - Description collection[n]: Output pin select …\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nDescription collection[n]: Output pin select for PWM …\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>OUT[%s]</code> reader\nRegister <code>OUT[%s]</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nCNT (rw) register accessor: an alias for <code>Reg&lt;CNT_SPEC&gt;</code>\nENDDELAY (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nREFRESH (rw) register accessor: an alias for …\nRegister block\nDescription cluster[n]: Number of values (duty cycles) in …\n0x04 - Description cluster[n]: Number of values (duty …\nDescription cluster[n]: Time added after the sequence\n0x0c - Description cluster[n]: Time added after the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription cluster[n]: Beginning address in RAM of this …\n0x00 - Description cluster[n]: Beginning address in RAM of …\nDescription cluster[n]: Number of additional PWM periods …\n0x08 - Description cluster[n]: Number of additional PWM …\nNumber of values (duty cycles) in this sequence\nField <code>CNT</code> reader - Number of values (duty cycles) in this …\nDescription cluster[n]: Number of values (duty cycles) in …\nField <code>CNT</code> writer - Number of values (duty cycles) in this …\n0: Sequence is disabled, and shall not be started as it is …\nRegister <code>CNT</code> reader\nRegister <code>CNT</code> writer\nWrites raw bits to the register.\nBits 0:14 - Number of values (duty cycles) in this sequence\nBits 0:14 - Number of values (duty cycles) in this sequence\nSequence is disabled, and shall not be started as it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nGet enumerated values variant\nField <code>CNT</code> reader - Time added after the sequence in PWM …\nField <code>CNT</code> writer - Time added after the sequence in PWM …\nDescription cluster[n]: Time added after the sequence\nRegister <code>ENDDELAY</code> reader\nRegister <code>ENDDELAY</code> writer\nWrites raw bits to the register.\nBits 0:23 - Time added after the sequence in PWM periods\nBits 0:23 - Time added after the sequence in PWM periods\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>PTR</code> reader - Beginning address in RAM of this …\nDescription cluster[n]: Beginning address in RAM of this …\nField <code>PTR</code> writer - Beginning address in RAM of this …\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Beginning address in RAM of this sequence\nBits 0:31 - Beginning address in RAM of this sequence\nNumber of additional PWM periods between samples loaded …\nField <code>CNT</code> reader - Number of additional PWM periods …\nField <code>CNT</code> writer - Number of additional PWM periods …\n0: Update every PWM period\nRegister <code>REFRESH</code> reader\nDescription cluster[n]: Number of additional PWM periods …\nRegister <code>REFRESH</code> writer\nWrites raw bits to the register.\nBits 0:23 - Number of additional PWM periods between …\nBits 0:23 - Number of additional PWM periods between …\nUpdate every PWM period\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONTINUOUS</code>\nGet enumerated values variant\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\nShortcut between LOOPSDONE event and SEQSTART[0] task\nField <code>LOOPSDONE_SEQSTART0</code> reader - Shortcut between …\nField <code>LOOPSDONE_SEQSTART0</code> writer - Shortcut between …\nShortcut between LOOPSDONE event and SEQSTART[1] task\nField <code>LOOPSDONE_SEQSTART1</code> reader - Shortcut between …\nField <code>LOOPSDONE_SEQSTART1</code> writer - Shortcut between …\nShortcut between LOOPSDONE event and STOP task\nField <code>LOOPSDONE_STOP</code> reader - Shortcut between LOOPSDONE …\nField <code>LOOPSDONE_STOP</code> writer - Shortcut between LOOPSDONE …\nRegister <code>SHORTS</code> reader\nShortcut between SEQEND[0] event and STOP task\nField <code>SEQEND0_STOP</code> reader - Shortcut between SEQEND[0] …\nField <code>SEQEND0_STOP</code> writer - Shortcut between SEQEND[0] …\nShortcut between SEQEND[1] event and STOP task\nField <code>SEQEND1_STOP</code> reader - Shortcut between SEQEND[1] …\nField <code>SEQEND1_STOP</code> writer - Shortcut between SEQEND[1] …\nShortcut register\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 2 - Shortcut between LOOPSDONE event and SEQSTART[0] …\nBit 2 - Shortcut between LOOPSDONE event and SEQSTART[0] …\nBit 3 - Shortcut between LOOPSDONE event and SEQSTART[1] …\nBit 3 - Shortcut between LOOPSDONE event and SEQSTART[1] …\nBit 4 - Shortcut between LOOPSDONE event and STOP task\nBit 4 - Shortcut between LOOPSDONE event and STOP task\nBit 0 - Shortcut between SEQEND[0] event and STOP task\nBit 0 - Shortcut between SEQEND[0] event and STOP task\nBit 1 - Shortcut between SEQEND[1] event and STOP task\nBit 1 - Shortcut between SEQEND[1] event and STOP task\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nSteps by one value in the current sequence on all enabled …\nField <code>TASKS_NEXTSTEP</code> writer -\nRegister <code>TASKS_NEXTSTEP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nDescription collection[n]: Loads the first PWM value on …\nField <code>TASKS_SEQSTART</code> writer -\nRegister <code>TASKS_SEQSTART[%s]</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStops PWM pulse generation on all channels at the end of …\nField <code>TASKS_STOP</code> writer -\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nACC (r) register accessor: an alias for <code>Reg&lt;ACC_SPEC&gt;</code>\nACCDBL (r) register accessor: an alias for <code>Reg&lt;ACCDBL_SPEC&gt;</code>\nACCDBLREAD (r) register accessor: an alias for …\nACCREAD (r) register accessor: an alias for …\nDBFEN (rw) register accessor: an alias for <code>Reg&lt;DBFEN_SPEC&gt;</code>\nENABLE (rw) register accessor: an alias for …\nEVENTS_ACCOF (rw) register accessor: an alias for …\nEVENTS_DBLRDY (rw) register accessor: an alias for …\nEVENTS_REPORTRDY (rw) register accessor: an alias for …\nEVENTS_SAMPLERDY (rw) register accessor: an alias for …\nEVENTS_STOPPED (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nLEDPOL (rw) register accessor: an alias for …\nLEDPRE (rw) register accessor: an alias for …\nUnspecified\nREPORTPER (rw) register accessor: an alias for …\nRegister block\nSAMPLE (r) register accessor: an alias for <code>Reg&lt;SAMPLE_SPEC&gt;</code>\nSAMPLEPER (rw) register accessor: an alias for …\nSHORTS (rw) register accessor: an alias for …\nTASKS_RDCLRACC (w) register accessor: an alias for …\nTASKS_RDCLRDBL (w) register accessor: an alias for …\nTASKS_READCLRACC (w) register accessor: an alias for …\nTASKS_START (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nRegister accumulating the valid transitions\n0x514 - Register accumulating the valid transitions\nRegister accumulating the number of detected double …\n0x544 - Register accumulating the number of detected …\nSnapshot of the ACCDBL, updated by the READCLRACC or …\n0x548 - Snapshot of the ACCDBL, updated by the READCLRACC …\nSnapshot of the ACC register, updated by the READCLRACC or …\n0x518 - Snapshot of the ACC register, updated by the …\nEnable input debounce filters\n0x528 - Enable input debounce filters\nEnable the quadrature decoder\n0x500 - Enable the quadrature decoder\nACC or ACCDBL register overflow\n0x108 - ACC or ACCDBL register overflow\nDouble displacement(s) detected\n0x10c - Double displacement(s) detected\nNon-null report ready\n0x104 - Non-null report ready\nEvent being generated for every new sample value written …\n0x100 - Event being generated for every new sample value …\nQDEC has been stopped\n0x110 - QDEC has been stopped\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nLED output pin polarity\n0x504 - LED output pin polarity\nTime period the LED is switched ON prior to sampling\n0x540 - Time period the LED is switched ON prior to …\nCluster Unspecified\n0x51c..0x528 - Unspecified\nNumber of samples to be taken before REPORTRDY and DBLRDY …\n0x510 - Number of samples to be taken before REPORTRDY and …\nMotion sample value\n0x50c - Motion sample value\nSample period\n0x508 - Sample period\nShortcut register\n0x200 - Shortcut register\nRead and clear ACC\n0x0c - Read and clear ACC\nRead and clear ACCDBL\n0x10 - Read and clear ACCDBL\nRead and clear ACC and ACCDBL\n0x08 - Read and clear ACC and ACCDBL\nTask starting the quadrature decoder\n0x00 - Task starting the quadrature decoder\nTask stopping the quadrature decoder\n0x04 - Task stopping the quadrature decoder\nField <code>ACC</code> reader - Register accumulating all valid samples …\nRegister accumulating the valid transitions\nRegister <code>ACC</code> reader\nBits 0:31 - Register accumulating all valid samples (not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>ACCDBL</code> reader - Register accumulating the number of …\nRegister accumulating the number of detected double …\nRegister <code>ACCDBL</code> reader\nBits 0:3 - Register accumulating the number of detected …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>ACCDBLREAD</code> reader - Snapshot of the ACCDBL register. …\nSnapshot of the ACCDBL, updated by the READCLRACC or …\nRegister <code>ACCDBLREAD</code> reader\nBits 0:3 - Snapshot of the ACCDBL register. This field is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>ACCREAD</code> reader - Snapshot of the ACC register.\nSnapshot of the ACC register, updated by the READCLRACC or …\nRegister <code>ACCREAD</code> reader\nBits 0:31 - Snapshot of the ACC register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable input debounce filters\nField <code>DBFEN</code> reader - Enable input debounce filters\nEnable input debounce filters\nField <code>DBFEN</code> writer - Enable input debounce filters\n0: Debounce input filters disabled\n1: Debounce input filters enabled\nRegister <code>DBFEN</code> reader\nRegister <code>DBFEN</code> writer\nWrites raw bits to the register.\nBit 0 - Enable input debounce filters\nBit 0 - Enable input debounce filters\nDebounce input filters disabled\nDebounce input filters enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\n0: Disable\n1: Enable\nEnable or disable the quadrature decoder\nField <code>ENABLE</code> reader - Enable or disable the quadrature …\nEnable the quadrature decoder\nField <code>ENABLE</code> writer - Enable or disable the quadrature …\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable\nBit 0 - Enable or disable the quadrature decoder\nBit 0 - Enable or disable the quadrature decoder\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nField <code>EVENTS_ACCOF</code> reader -\nACC or ACCDBL register overflow\nField <code>EVENTS_ACCOF</code> writer -\nRegister <code>EVENTS_ACCOF</code> reader\nRegister <code>EVENTS_ACCOF</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_DBLRDY</code> reader -\nDouble displacement(s) detected\nField <code>EVENTS_DBLRDY</code> writer -\nRegister <code>EVENTS_DBLRDY</code> reader\nRegister <code>EVENTS_DBLRDY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_REPORTRDY</code> reader -\nNon-null report ready\nField <code>EVENTS_REPORTRDY</code> writer -\nRegister <code>EVENTS_REPORTRDY</code> reader\nRegister <code>EVENTS_REPORTRDY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_SAMPLERDY</code> reader -\nEvent being generated for every new sample value written …\nField <code>EVENTS_SAMPLERDY</code> writer -\nRegister <code>EVENTS_SAMPLERDY</code> reader\nRegister <code>EVENTS_SAMPLERDY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>EVENTS_STOPPED</code> reader -\nQDEC has been stopped\nField <code>EVENTS_STOPPED</code> writer -\nRegister <code>EVENTS_STOPPED</code> reader\nRegister <code>EVENTS_STOPPED</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite ‘1’ to disable interrupt for ACCOF event\nWrite ‘1’ to disable interrupt for ACCOF event\nField <code>ACCOF</code> reader - Write ‘1’ to disable interrupt …\nField <code>ACCOF</code> writer - Write ‘1’ to disable interrupt …\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\nWrite ‘1’ to disable interrupt for DBLRDY event\nWrite ‘1’ to disable interrupt for DBLRDY event\nField <code>DBLRDY</code> reader - Write ‘1’ to disable interrupt …\nField <code>DBLRDY</code> writer - Write ‘1’ to disable interrupt …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for REPORTRDY event\nWrite ‘1’ to disable interrupt for REPORTRDY event\nField <code>REPORTRDY</code> reader - Write ‘1’ to disable …\nField <code>REPORTRDY</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for SAMPLERDY event\nWrite ‘1’ to disable interrupt for SAMPLERDY event\nField <code>SAMPLERDY</code> reader - Write ‘1’ to disable …\nField <code>SAMPLERDY</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for STOPPED event\nWrite ‘1’ to disable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Write ‘1’ to disable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to disable interrupt …\nRegister <code>INTENCLR</code> writer\nBit 2 - Write ‘1’ to disable interrupt for ACCOF event\nBit 2 - Write ‘1’ to disable interrupt for ACCOF event\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 3 - Write ‘1’ to disable interrupt for DBLRDY event\nBit 3 - Write ‘1’ to disable interrupt for DBLRDY event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to disable interrupt for REPORTRDY …\nBit 1 - Write ‘1’ to disable interrupt for REPORTRDY …\nBit 0 - Write ‘1’ to disable interrupt for SAMPLERDY …\nBit 0 - Write ‘1’ to disable interrupt for SAMPLERDY …\nBit 4 - Write ‘1’ to disable interrupt for STOPPED …\nBit 4 - Write ‘1’ to disable interrupt for STOPPED …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for ACCOF event\nWrite ‘1’ to enable interrupt for ACCOF event\nField <code>ACCOF</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ACCOF</code> writer - Write ‘1’ to enable interrupt for …\nWrite ‘1’ to enable interrupt for DBLRDY event\nWrite ‘1’ to enable interrupt for DBLRDY event\nField <code>DBLRDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>DBLRDY</code> writer - Write ‘1’ to enable interrupt …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nEnable interrupt\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for REPORTRDY event\nWrite ‘1’ to enable interrupt for REPORTRDY event\nField <code>REPORTRDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>REPORTRDY</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for SAMPLERDY event\nWrite ‘1’ to enable interrupt for SAMPLERDY event\nField <code>SAMPLERDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>SAMPLERDY</code> writer - Write ‘1’ to enable interrupt …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for STOPPED event\nWrite ‘1’ to enable interrupt for STOPPED event\nField <code>STOPPED</code> reader - Write ‘1’ to enable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to enable interrupt …\nRegister <code>INTENSET</code> writer\nBit 2 - Write ‘1’ to enable interrupt for ACCOF event\nBit 2 - Write ‘1’ to enable interrupt for ACCOF event\nWrites raw bits to the register.\nBit 3 - Write ‘1’ to enable interrupt for DBLRDY event\nBit 3 - Write ‘1’ to enable interrupt for DBLRDY event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to enable interrupt for REPORTRDY …\nBit 1 - Write ‘1’ to enable interrupt for REPORTRDY …\nBit 0 - Write ‘1’ to enable interrupt for SAMPLERDY …\nBit 0 - Write ‘1’ to enable interrupt for SAMPLERDY …\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 4 - Write ‘1’ to enable interrupt for STOPPED event\nBit 4 - Write ‘1’ to enable interrupt for STOPPED event\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: Led active on output pin high\n0: Led active on output pin low\nLED output pin polarity\nField <code>LEDPOL</code> reader - LED output pin polarity\nLED output pin polarity\nField <code>LEDPOL</code> writer - LED output pin polarity\nRegister <code>LEDPOL</code> reader\nRegister <code>LEDPOL</code> writer\nLed active on output pin high\nLed active on output pin low\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ACTIVE_HIGH</code>\nChecks if the value of the field is <code>ACTIVE_LOW</code>\nBit 0 - LED output pin polarity\nBit 0 - LED output pin polarity\nGet enumerated values variant\nField <code>LEDPRE</code> reader - Period in us the LED is switched on …\nTime period the LED is switched ON prior to sampling\nField <code>LEDPRE</code> writer - Period in us the LED is switched on …\nRegister <code>LEDPRE</code> reader\nRegister <code>LEDPRE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:8 - Period in us the LED is switched on prior to …\nBits 0:8 - Period in us the LED is switched on prior to …\nA (rw) register accessor: an alias for <code>Reg&lt;A_SPEC&gt;</code>\nB (rw) register accessor: an alias for <code>Reg&lt;B_SPEC&gt;</code>\nLED (rw) register accessor: an alias for <code>Reg&lt;LED_SPEC&gt;</code>\nRegister block\nPin select for A signal\n0x04 - Pin select for A signal\nPin select for B signal\n0x08 - Pin select for B signal\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for LED signal\n0x00 - Pin select for LED signal\nPin select for A signal\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>A</code> reader\nRegister <code>A</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nPin select for B signal\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>B</code> reader\nRegister <code>B</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for LED signal\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>LED</code> reader\nRegister <code>LED</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nRegister <code>REPORTPER</code> reader\nSpecifies the number of samples to be accumulated in the …\nField <code>REPORTPER</code> reader - Specifies the number of samples …\nNumber of samples to be taken before REPORTRDY and DBLRDY …\nField <code>REPORTPER</code> writer - Specifies the number of samples …\nRegister <code>REPORTPER</code> writer\n0: 10 samples / report\n10 samples / report\n3: 120 samples / report\n120 samples / report\n4: 160 samples / report\n160 samples / report\n8: 1 sample / report\n1 sample / report\n5: 200 samples / report\n200 samples / report\n6: 240 samples / report\n240 samples / report\n7: 280 samples / report\n280 samples / report\n1: 40 samples / report\n40 samples / report\n2: 80 samples / report\n80 samples / report\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_10SMPL</code>\nChecks if the value of the field is <code>_120SMPL</code>\nChecks if the value of the field is <code>_160SMPL</code>\nChecks if the value of the field is <code>_1SMPL</code>\nChecks if the value of the field is <code>_200SMPL</code>\nChecks if the value of the field is <code>_240SMPL</code>\nChecks if the value of the field is <code>_280SMPL</code>\nChecks if the value of the field is <code>_40SMPL</code>\nChecks if the value of the field is <code>_80SMPL</code>\nBits 0:3 - Specifies the number of samples to be …\nBits 0:3 - Specifies the number of samples to be …\nGet enumerated values variant\nRegister <code>SAMPLE</code> reader\nField <code>SAMPLE</code> reader - Last motion sample\nMotion sample value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Last motion sample\nRegister <code>SAMPLEPER</code> reader\nSample period. The SAMPLE register will be updated for …\nField <code>SAMPLEPER</code> reader - Sample period. The SAMPLE …\nSample period\nField <code>SAMPLEPER</code> writer - Sample period. The SAMPLE …\nRegister <code>SAMPLEPER</code> writer\n3: 1024 us\n1024 us\n0: 128 us\n128 us\n10: 131072 us\n131072 us\n7: 16384 us\n16384 us\n4: 2048 us\n2048 us\n1: 256 us\n256 us\n8: 32768 us\n32768 us\n5: 4096 us\n4096 us\n2: 512 us\n512 us\n9: 65536 us\n65536 us\n6: 8192 us\n8192 us\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_1024US</code>\nChecks if the value of the field is <code>_128US</code>\nChecks if the value of the field is <code>_131MS</code>\nChecks if the value of the field is <code>_16384US</code>\nChecks if the value of the field is <code>_2048US</code>\nChecks if the value of the field is <code>_256US</code>\nChecks if the value of the field is <code>_32MS</code>\nChecks if the value of the field is <code>_4096US</code>\nChecks if the value of the field is <code>_512US</code>\nChecks if the value of the field is <code>_65MS</code>\nChecks if the value of the field is <code>_8192US</code>\nBits 0:3 - Sample period. The SAMPLE register will be …\nBits 0:3 - Sample period. The SAMPLE register will be …\nGet enumerated values variant\nShortcut between DBLRDY event and RDCLRDBL task\nField <code>DBLRDY_RDCLRDBL</code> reader - Shortcut between DBLRDY …\nField <code>DBLRDY_RDCLRDBL</code> writer - Shortcut between DBLRDY …\nShortcut between DBLRDY event and STOP task\nField <code>DBLRDY_STOP</code> reader - Shortcut between DBLRDY event …\nField <code>DBLRDY_STOP</code> writer - Shortcut between DBLRDY event …\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\nRegister <code>SHORTS</code> reader\nShortcut between REPORTRDY event and RDCLRACC task\nField <code>REPORTRDY_RDCLRACC</code> reader - Shortcut between …\nField <code>REPORTRDY_RDCLRACC</code> writer - Shortcut between …\nShortcut between REPORTRDY event and READCLRACC task\nField <code>REPORTRDY_READCLRACC</code> reader - Shortcut between …\nField <code>REPORTRDY_READCLRACC</code> writer - Shortcut between …\nShortcut between REPORTRDY event and STOP task\nField <code>REPORTRDY_STOP</code> reader - Shortcut between REPORTRDY …\nField <code>REPORTRDY_STOP</code> writer - Shortcut between REPORTRDY …\nShortcut between SAMPLERDY event and READCLRACC task\nField <code>SAMPLERDY_READCLRACC</code> reader - Shortcut between …\nField <code>SAMPLERDY_READCLRACC</code> writer - Shortcut between …\nShortcut between SAMPLERDY event and STOP task\nField <code>SAMPLERDY_STOP</code> reader - Shortcut between SAMPLERDY …\nField <code>SAMPLERDY_STOP</code> writer - Shortcut between SAMPLERDY …\nShortcut register\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nBit 4 - Shortcut between DBLRDY event and RDCLRDBL task\nBit 4 - Shortcut between DBLRDY event and RDCLRDBL task\nBit 5 - Shortcut between DBLRDY event and STOP task\nBit 5 - Shortcut between DBLRDY event and STOP task\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 2 - Shortcut between REPORTRDY event and RDCLRACC task\nBit 2 - Shortcut between REPORTRDY event and RDCLRACC task\nBit 0 - Shortcut between REPORTRDY event and READCLRACC …\nBit 0 - Shortcut between REPORTRDY event and READCLRACC …\nBit 3 - Shortcut between REPORTRDY event and STOP task\nBit 3 - Shortcut between REPORTRDY event and STOP task\nBit 6 - Shortcut between SAMPLERDY event and READCLRACC …\nBit 6 - Shortcut between SAMPLERDY event and READCLRACC …\nBit 1 - Shortcut between SAMPLERDY event and STOP task\nBit 1 - Shortcut between SAMPLERDY event and STOP task\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nRead and clear ACC\nField <code>TASKS_RDCLRACC</code> writer -\nRegister <code>TASKS_RDCLRACC</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nRead and clear ACCDBL\nField <code>TASKS_RDCLRDBL</code> writer -\nRegister <code>TASKS_RDCLRDBL</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nRead and clear ACC and ACCDBL\nField <code>TASKS_READCLRACC</code> writer -\nRegister <code>TASKS_READCLRACC</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nTask starting the quadrature decoder\nField <code>TASKS_START</code> writer -\nRegister <code>TASKS_START</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nTask stopping the quadrature decoder\nField <code>TASKS_STOP</code> writer -\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nADDRCONF (rw) register accessor: an alias for …\nCINSTRCONF (rw) register accessor: an alias for …\nCINSTRDAT0 (rw) register accessor: an alias for …\nCINSTRDAT1 (rw) register accessor: an alias for …\nDPMDUR (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nUnspecified\nEVENTS_READY (rw) register accessor: an alias for …\nIFCONFIG0 (rw) register accessor: an alias for …\nIFCONFIG1 (rw) register accessor: an alias for …\nIFTIMING (rw) register accessor: an alias for …\nINTEN (rw) register accessor: an alias for <code>Reg&lt;INTEN_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nUnspecified\nUnspecified\nRegister block\nSTATUS (r) register accessor: an alias for <code>Reg&lt;STATUS_SPEC&gt;</code>\nTASKS_ACTIVATE (w) register accessor: an alias for …\nTASKS_DEACTIVATE (w) register accessor: an alias for …\nTASKS_ERASESTART (w) register accessor: an alias for …\nTASKS_READSTART (w) register accessor: an alias for …\nTASKS_WRITESTART (w) register accessor: an alias for …\nUnspecified\nXIPOFFSET (rw) register accessor: an alias for …\nExtended address configuration.\n0x624 - Extended address configuration.\nCustom instruction configuration register.\n0x634 - Custom instruction configuration register.\nCustom instruction data register 0.\n0x638 - Custom instruction data register 0.\nCustom instruction data register 1.\n0x63c - Custom instruction data register 1.\nSet the duration required to enter/exit deep power-down …\n0x614 - Set the duration required to enter/exit deep …\nEnable QSPI peripheral and acquire the pins selected in …\n0x500 - Enable QSPI peripheral and acquire the pins …\nCluster Unspecified\n0x51c..0x524 - Unspecified\nQSPI peripheral is ready. This event will be generated as …\n0x100 - QSPI peripheral is ready. This event will be …\nReturns the argument unchanged.\nInterface configuration.\n0x544 - Interface configuration.\nInterface configuration.\n0x600 - Interface configuration.\nSPI interface timing.\n0x640 - SPI interface timing.\nEnable or disable interrupt\n0x300 - Enable or disable interrupt\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nCluster Unspecified\n0x524..0x540 - Unspecified\nCluster Unspecified\n0x504..0x510 - Unspecified\nStatus register.\n0x604 - Status register.\nActivate QSPI interface\n0x00 - Activate QSPI interface\nDeactivate QSPI interface\n0x10 - Deactivate QSPI interface\nStart external flash memory erase operation\n0x0c - Start external flash memory erase operation\nStart transfer from external flash memory to internal RAM\n0x04 - Start transfer from external flash memory to …\nStart transfer from internal RAM to external flash memory\n0x08 - Start transfer from internal RAM to external flash …\nCluster Unspecified\n0x510..0x51c - Unspecified\nAddress offset into the external memory for Execute in …\n0x540 - Address offset into the external memory for …\nExtended address configuration.\n3: Send opcode, byte0, byte1.\nField <code>BYTE0</code> reader - Byte 0 following opcode.\nField <code>BYTE0</code> writer - Byte 0 following opcode.\nField <code>BYTE1</code> reader - Byte 1 following byte 0.\nField <code>BYTE1</code> writer - Byte 1 following byte 0.\n0: No wait.\n0: Do not send WREN.\n1: Wait.\n1: Send WREN.\nExtended addressing mode.\nField <code>MODE</code> reader - Extended addressing mode.\nField <code>MODE</code> writer - Extended addressing mode.\n0: Do not send any instruction.\n1: Send opcode.\nField <code>OPCODE</code> reader - Opcode that enters the 32-bit …\nField <code>OPCODE</code> writer - Opcode that enters the 32-bit …\n2: Send opcode, byte0.\nRegister <code>ADDRCONF</code> reader\nRegister <code>ADDRCONF</code> writer\nWait for write complete before sending command.\nField <code>WIPWAIT</code> reader - Wait for write complete before …\nField <code>WIPWAIT</code> writer - Wait for write complete before …\nSend WREN (write enable opcode 0x06) before instruction.\nField <code>WREN</code> reader - Send WREN (write enable opcode 0x06) …\nField <code>WREN</code> writer - Send WREN (write enable opcode 0x06) …\nSend opcode, byte0, byte1.\nWrites raw bits to the register.\nBits 8:15 - Byte 0 following opcode.\nBits 8:15 - Byte 0 following opcode.\nBits 16:23 - Byte 1 following byte 0.\nBits 16:23 - Byte 1 following byte 0.\nNo wait.\nDo not send WREN.\nWait.\nSend WREN.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ALL</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>NO_INSTR</code>\nChecks if the value of the field is <code>OP_BYTE0</code>\nChecks if the value of the field is <code>OPCODE</code>\nBits 24:25 - Extended addressing mode.\nBits 24:25 - Extended addressing mode.\nDo not send any instruction.\nSend opcode, byte0.\nBits 0:7 - Opcode that enters the 32-bit addressing mode.\nBits 0:7 - Opcode that enters the 32-bit addressing mode.\nSend opcode.\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 26 - Wait for write complete before sending command.\nBit 26 - Wait for write complete before sending command.\nBit 27 - Send WREN (write enable opcode 0x06) before …\nBit 27 - Send WREN (write enable opcode 0x06) before …\nCustom instruction configuration register.\n0: No wait.\n0: Do not send WREN.\n0: Long frame mode disabled\n1: Wait.\n1: Send WREN.\n1: Long frame mode enabled\nLength of custom instruction in number of bytes.\nField <code>LENGTH</code> reader - Length of custom instruction in …\nField <code>LENGTH</code> writer - Length of custom instruction in …\nEnable long frame mode. When enabled, a custom instruction …\nField <code>LFEN</code> reader - Enable long frame mode. When enabled, …\nField <code>LFEN</code> writer - Enable long frame mode. When enabled, …\nStop (finalize) long frame transaction\nField <code>LFSTOP</code> reader - Stop (finalize) long frame …\nField <code>LFSTOP</code> writer - Stop (finalize) long frame …\nField <code>LIO2</code> reader - Level of the IO2 pin (if connected) …\nField <code>LIO2</code> writer - Level of the IO2 pin (if connected) …\nField <code>LIO3</code> reader - Level of the IO3 pin (if connected) …\nField <code>LIO3</code> writer - Level of the IO3 pin (if connected) …\nField <code>OPCODE</code> reader - Opcode of Custom instruction.\nField <code>OPCODE</code> writer - Opcode of Custom instruction.\nRegister <code>CINSTRCONF</code> reader\n1: Stop\nRegister <code>CINSTRCONF</code> writer\nWait for write complete before sending command.\nField <code>WIPWAIT</code> reader - Wait for write complete before …\nField <code>WIPWAIT</code> writer - Wait for write complete before …\nSend WREN (write enable opcode 0x06) before instruction.\nField <code>WREN</code> reader - Send WREN (write enable opcode 0x06) …\nField <code>WREN</code> writer - Send WREN (write enable opcode 0x06) …\n1: Send opcode only.\nSend opcode only.\n2: Send opcode, CINSTRDAT0.BYTE0.\nSend opcode, CINSTRDAT0.BYTE0.\n3: Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE1.\nSend opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE1.\n4: Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE2.\nSend opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE2.\n5: Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE3.\nSend opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE3.\n6: Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE4.\nSend opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE4.\n7: Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE5.\nSend opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE5.\n8: Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE6.\nSend opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE6.\n9: Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE7.\nSend opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE7.\nWrites raw bits to the register.\nNo wait.\nDo not send WREN.\nLong frame mode disabled\nWait.\nSend WREN.\nLong frame mode enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_1B</code>\nChecks if the value of the field is <code>_2B</code>\nChecks if the value of the field is <code>_3B</code>\nChecks if the value of the field is <code>_4B</code>\nChecks if the value of the field is <code>_5B</code>\nChecks if the value of the field is <code>_6B</code>\nChecks if the value of the field is <code>_7B</code>\nChecks if the value of the field is <code>_8B</code>\nChecks if the value of the field is <code>_9B</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>STOP</code>\nBits 8:11 - Length of custom instruction in number of …\nBits 8:11 - Length of custom instruction in number of …\nBit 16 - Enable long frame mode. When enabled, a custom …\nBit 16 - Enable long frame mode. When enabled, a custom …\nBit 17 - Stop (finalize) long frame transaction\nBit 17 - Stop (finalize) long frame transaction\nBit 12 - Level of the IO2 pin (if connected) during …\nBit 12 - Level of the IO2 pin (if connected) during …\nBit 13 - Level of the IO3 pin (if connected) during …\nBit 13 - Level of the IO3 pin (if connected) during …\nBits 0:7 - Opcode of Custom instruction.\nBits 0:7 - Opcode of Custom instruction.\nStop\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 14 - Wait for write complete before sending command.\nBit 14 - Wait for write complete before sending command.\nBit 15 - Send WREN (write enable opcode 0x06) before …\nBit 15 - Send WREN (write enable opcode 0x06) before …\nField <code>BYTE0</code> reader - Data byte 0\nField <code>BYTE0</code> writer - Data byte 0\nField <code>BYTE1</code> reader - Data byte 1\nField <code>BYTE1</code> writer - Data byte 1\nField <code>BYTE2</code> reader - Data byte 2\nField <code>BYTE2</code> writer - Data byte 2\nField <code>BYTE3</code> reader - Data byte 3\nField <code>BYTE3</code> writer - Data byte 3\nCustom instruction data register 0.\nRegister <code>CINSTRDAT0</code> reader\nRegister <code>CINSTRDAT0</code> writer\nWrites raw bits to the register.\nBits 0:7 - Data byte 0\nBits 0:7 - Data byte 0\nBits 8:15 - Data byte 1\nBits 8:15 - Data byte 1\nBits 16:23 - Data byte 2\nBits 16:23 - Data byte 2\nBits 24:31 - Data byte 3\nBits 24:31 - Data byte 3\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>BYTE4</code> reader - Data byte 4\nField <code>BYTE4</code> writer - Data byte 4\nField <code>BYTE5</code> reader - Data byte 5\nField <code>BYTE5</code> writer - Data byte 5\nField <code>BYTE6</code> reader - Data byte 6\nField <code>BYTE6</code> writer - Data byte 6\nField <code>BYTE7</code> reader - Data byte 7\nField <code>BYTE7</code> writer - Data byte 7\nCustom instruction data register 1.\nRegister <code>CINSTRDAT1</code> reader\nRegister <code>CINSTRDAT1</code> writer\nWrites raw bits to the register.\nBits 0:7 - Data byte 4\nBits 0:7 - Data byte 4\nBits 8:15 - Data byte 5\nBits 8:15 - Data byte 5\nBits 16:23 - Data byte 6\nBits 16:23 - Data byte 6\nBits 24:31 - Data byte 7\nBits 24:31 - Data byte 7\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the duration required to enter/exit deep power-down …\nField <code>ENTER</code> reader - Duration needed by external flash to …\nField <code>ENTER</code> writer - Duration needed by external flash to …\nField <code>EXIT</code> reader - Duration needed by external flash to …\nField <code>EXIT</code> writer - Duration needed by external flash to …\nRegister <code>DPMDUR</code> reader\nRegister <code>DPMDUR</code> writer\nWrites raw bits to the register.\nBits 0:15 - Duration needed by external flash to enter …\nBits 0:15 - Duration needed by external flash to enter …\nBits 16:31 - Duration needed by external flash to exit …\nBits 16:31 - Duration needed by external flash to exit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: Disable QSPI\n1: Enable QSPI\nEnable or disable QSPI\nField <code>ENABLE</code> reader - Enable or disable QSPI\nEnable QSPI peripheral and acquire the pins selected in …\nField <code>ENABLE</code> writer - Enable or disable QSPI\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable QSPI\nBit 0 - Enable or disable QSPI\nBit 0 - Enable or disable QSPI\nEnable QSPI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nRegister block\nLEN (rw) register accessor: an alias for <code>Reg&lt;LEN_SPEC&gt;</code>\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSize of block to be erased.\n0x04 - Size of block to be erased.\nStart address of flash block to be erased\n0x00 - Start address of flash block to be erased\n2: Erase all (flash command 0xC7)\nLEN\nField <code>LEN</code> reader - LEN\nSize of block to be erased.\nField <code>LEN</code> writer - LEN\nRegister <code>LEN</code> reader\nRegister <code>LEN</code> writer\n0: Erase 4 kB block (flash command 0x20)\nErase 4 kB block (flash command 0x20)\n1: Erase 64 kB block (flash command 0xD8)\nErase 64 kB block (flash command 0xD8)\nErase all (flash command 0xC7)\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_4KB</code>\nChecks if the value of the field is <code>_64KB</code>\nChecks if the value of the field is <code>ALL</code>\nBits 0:1 - LEN\nBits 0:1 - LEN\nGet enumerated values variant\nField <code>PTR</code> reader - Word-aligned start address of block to …\nStart address of flash block to be erased\nField <code>PTR</code> writer - Word-aligned start address of block to …\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Word-aligned start address of block to be …\nBits 0:31 - Word-aligned start address of block to be …\nField <code>EVENTS_READY</code> reader -\nQSPI peripheral is ready. This event will be generated as …\nField <code>EVENTS_READY</code> writer -\nRegister <code>EVENTS_READY</code> reader\nRegister <code>EVENTS_READY</code> writer\nWrites raw bits to the register.\nBit 0\nBit 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAddressing mode.\nField <code>ADDRMODE</code> reader - Addressing mode.\nField <code>ADDRMODE</code> writer - Addressing mode.\n0: Disable DPM feature.\nEnable deep power-down mode (DPM) feature.\nField <code>DPMENABLE</code> reader - Enable deep power-down mode (DPM) …\nField <code>DPMENABLE</code> writer - Enable deep power-down mode (DPM) …\n1: Enable DPM feature.\n0: Single data line SPI. FAST_READ (opcode 0x0B).\nInterface configuration.\n0: Single data line SPI. PP (opcode 0x02).\n1: Dual data line SPI. PP2O (opcode 0xA2).\n3: Quad data line SPI. PP4IO (opcode 0x38).\n2: Quad data line SPI. PP4O (opcode 0x32).\nPage size for commands PP, PP2O, PP4O and PP4IO.\nField <code>PPSIZE</code> reader - Page size for commands PP, PP2O, …\nField <code>PPSIZE</code> writer - Page size for commands PP, PP2O, …\nRegister <code>IFCONFIG0</code> reader\n2: Dual data line SPI. READ2IO (opcode 0xBB).\n1: Dual data line SPI. READ2O (opcode 0x3B).\n4: Quad data line SPI. READ4IO (opcode 0xEB).\n3: Quad data line SPI. READ4O (opcode 0x6B).\nConfigure number of data lines and opcode used for reading.\nField <code>READOC</code> reader - Configure number of data lines and …\nField <code>READOC</code> writer - Configure number of data lines and …\nRegister <code>IFCONFIG0</code> writer\nConfigure number of data lines and opcode used for writing.\nField <code>WRITEOC</code> reader - Configure number of data lines and …\nField <code>WRITEOC</code> writer - Configure number of data lines and …\n0: 24-bit addressing.\n24-bit addressing.\n0: 256 bytes.\n256 bytes.\n1: 32-bit addressing.\n32-bit addressing.\n1: 512 bytes.\n512 bytes.\nBit 6 - Addressing mode.\nBit 6 - Addressing mode.\nWrites raw bits to the register.\nDisable DPM feature.\nBit 7 - Enable deep power-down mode (DPM) feature.\nBit 7 - Enable deep power-down mode (DPM) feature.\nEnable DPM feature.\nSingle data line SPI. FAST_READ (opcode 0x0B).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_24BIT</code>\nChecks if the value of the field is <code>_256BYTES</code>\nChecks if the value of the field is <code>_32BIT</code>\nChecks if the value of the field is <code>_512BYTES</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>FASTREAD</code>\nChecks if the value of the field is <code>PP</code>\nChecks if the value of the field is <code>PP2O</code>\nChecks if the value of the field is <code>PP4IO</code>\nChecks if the value of the field is <code>PP4O</code>\nChecks if the value of the field is <code>READ2IO</code>\nChecks if the value of the field is <code>READ2O</code>\nChecks if the value of the field is <code>READ4IO</code>\nChecks if the value of the field is <code>READ4O</code>\nSingle data line SPI. PP (opcode 0x02).\nDual data line SPI. PP2O (opcode 0xA2).\nQuad data line SPI. PP4IO (opcode 0x38).\nQuad data line SPI. PP4O (opcode 0x32).\nBit 12 - Page size for commands PP, PP2O, PP4O and PP4IO.\nBit 12 - Page size for commands PP, PP2O, PP4O and PP4IO.\nDual data line SPI. READ2IO (opcode 0xBB).\nDual data line SPI. READ2O (opcode 0x3B).\nQuad data line SPI. READ4IO (opcode 0xEB).\nQuad data line SPI. READ4O (opcode 0x6B).\nBits 0:2 - Configure number of data lines and opcode used …\nBits 0:2 - Configure number of data lines and opcode used …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBits 3:5 - Configure number of data lines and opcode used …\nBits 3:5 - Configure number of data lines and opcode used …\nEnter/exit deep power-down mode (DPM) for external flash …\nField <code>DPMEN</code> reader - Enter/exit deep power-down mode (DPM) …\nField <code>DPMEN</code> writer - Enter/exit deep power-down mode (DPM) …\n1: Enter DPM.\n0: Exit DPM.\nInterface configuration.\n0: Mode 0: Data are captured on the clock rising edge and …\n1: Mode 3: Data are captured on the clock falling edge and …\nRegister <code>IFCONFIG1</code> reader\nField <code>SCKDELAY</code> reader - Minimum amount of time that the …\nField <code>SCKDELAY</code> writer - Minimum amount of time that the …\nField <code>SCKFREQ</code> reader - SCK frequency is given as 32 MHz / …\nField <code>SCKFREQ</code> writer - SCK frequency is given as 32 MHz / …\nSelect SPI mode.\nField <code>SPIMODE</code> reader - Select SPI mode.\nField <code>SPIMODE</code> writer - Select SPI mode.\nRegister <code>IFCONFIG1</code> writer\nWrites raw bits to the register.\nBit 24 - Enter/exit deep power-down mode (DPM) for …\nBit 24 - Enter/exit deep power-down mode (DPM) for …\nEnter DPM.\nExit DPM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ENTER</code>\nChecks if the value of the field is <code>EXIT</code>\nChecks if the value of the field is <code>MODE0</code>\nChecks if the value of the field is <code>MODE3</code>\nMode 0: Data are captured on the clock rising edge and …\nMode 3: Data are captured on the clock falling edge and …\nBits 0:7 - Minimum amount of time that the CSN pin must …\nBits 0:7 - Minimum amount of time that the CSN pin must …\nBits 28:31 - SCK frequency is given as 32 MHz / (SCKFREQ + …\nBits 28:31 - SCK frequency is given as 32 MHz / (SCKFREQ + …\nBit 25 - Select SPI mode.\nBit 25 - Select SPI mode.\nGet enumerated values variant\nGet enumerated values variant\nSPI interface timing.\nRegister <code>IFTIMING</code> reader\nField <code>RXDELAY</code> reader - Timing related to sampling of the …\nField <code>RXDELAY</code> writer - Timing related to sampling of the …\nRegister <code>IFTIMING</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 8:10 - Timing related to sampling of the input serial …\nBits 8:10 - Timing related to sampling of the input serial …\n0: Disable\n1: Enable\nEnable or disable interrupt\nRegister <code>INTEN</code> reader\nEnable or disable interrupt for READY event\nField <code>READY</code> reader - Enable or disable interrupt for READY …\nField <code>READY</code> writer - Enable or disable interrupt for READY …\nRegister <code>INTEN</code> writer\nWrites raw bits to the register.\nDisable\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Enable or disable interrupt for READY event\nBit 0 - Enable or disable interrupt for READY event\nGet enumerated values variant\n1: Disable\n0: Read: Disabled\n1: Read: Enabled\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for READY event\nWrite ‘1’ to disable interrupt for READY event\nField <code>READY</code> reader - Write ‘1’ to disable interrupt …\nField <code>READY</code> writer - Write ‘1’ to disable interrupt …\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Write ‘1’ to disable interrupt for READY event\nBit 0 - Write ‘1’ to disable interrupt for READY event\nGet enumerated values variant\n0: Read: Disabled\n1: Read: Enabled\nEnable interrupt\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for READY event\nWrite ‘1’ to enable interrupt for READY event\nField <code>READY</code> reader - Write ‘1’ to enable interrupt for …\nField <code>READY</code> writer - Write ‘1’ to enable interrupt for …\n1: Enable\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Write ‘1’ to enable interrupt for READY event\nBit 0 - Write ‘1’ to enable interrupt for READY event\nEnable\nGet enumerated values variant\nCSN (rw) register accessor: an alias for <code>Reg&lt;CSN_SPEC&gt;</code>\nIO0 (rw) register accessor: an alias for <code>Reg&lt;IO0_SPEC&gt;</code>\nIO1 (rw) register accessor: an alias for <code>Reg&lt;IO1_SPEC&gt;</code>\nIO2 (rw) register accessor: an alias for <code>Reg&lt;IO2_SPEC&gt;</code>\nIO3 (rw) register accessor: an alias for <code>Reg&lt;IO3_SPEC&gt;</code>\nRegister block\nSCK (rw) register accessor: an alias for <code>Reg&lt;SCK_SPEC&gt;</code>\nPin select for chip select signal CSN.\n0x04 - Pin select for chip select signal CSN.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for serial data MOSI/IO0.\n0x0c - Pin select for serial data MOSI/IO0.\nPin select for serial data MISO/IO1.\n0x10 - Pin select for serial data MISO/IO1.\nPin select for serial data IO2.\n0x14 - Pin select for serial data IO2.\nPin select for serial data IO3.\n0x18 - Pin select for serial data IO3.\nPin select for serial clock SCK\n0x00 - Pin select for serial clock SCK\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\nPin select for chip select signal CSN.\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>CSN</code> reader\nRegister <code>CSN</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for serial data MOSI/IO0.\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>IO0</code> reader\nRegister <code>IO0</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for serial data MISO/IO1.\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>IO1</code> reader\nRegister <code>IO1</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for serial data IO2.\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>IO2</code> reader\nRegister <code>IO2</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for serial data IO3.\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>IO3</code> reader\nRegister <code>IO3</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SCK</code> reader\nPin select for serial clock SCK\nRegister <code>SCK</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nCNT (rw) register accessor: an alias for <code>Reg&lt;CNT_SPEC&gt;</code>\nDST (rw) register accessor: an alias for <code>Reg&lt;DST_SPEC&gt;</code>\nRegister block\nSRC (rw) register accessor: an alias for <code>Reg&lt;SRC_SPEC&gt;</code>\nRead transfer length\n0x08 - Read transfer length\nRAM destination address\n0x04 - RAM destination address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFlash memory source address\n0x00 - Flash memory source address\nField <code>CNT</code> reader - Read transfer length in number of …\nRead transfer length\nField <code>CNT</code> writer - Read transfer length in number of …\nRegister <code>CNT</code> reader\nRegister <code>CNT</code> writer\nWrites raw bits to the register.\nBits 0:20 - Read transfer length in number of bytes. The …\nBits 0:20 - Read transfer length in number of bytes. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>DST</code> reader - Word-aligned RAM destination address.\nRAM destination address\nField <code>DST</code> writer - Word-aligned RAM destination address.\nRegister <code>DST</code> reader\nRegister <code>DST</code> writer\nWrites raw bits to the register.\nBits 0:31 - Word-aligned RAM destination address.\nBits 0:31 - Word-aligned RAM destination address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister <code>SRC</code> reader\nField <code>SRC</code> reader - Word-aligned flash memory source …\nFlash memory source address\nField <code>SRC</code> writer - Word-aligned flash memory source …\nRegister <code>SRC</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Word-aligned flash memory source address.\nBits 0:31 - Word-aligned flash memory source address.\n0: QSPI peripheral is busy. It is not allowed to trigger …\n0: External flash is not in DPM.\nDeep power-down mode (DPM) status of external flash.\nField <code>DPM</code> reader - Deep power-down mode (DPM) status of …\n1: External flash is in DPM.\nRegister <code>STATUS</code> reader\n1: QSPI peripheral is ready. It is allowed to trigger new …\nReady status.\nField <code>READY</code> reader - Ready status.\nField <code>SREG</code> reader - Value of external flash device Status …\nStatus register.\nBit 2 - Deep power-down mode (DPM) status of external …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BUSY</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>READY</code>\nBit 3 - Ready status.\nBits 24:31 - Value of external flash device Status …\nGet enumerated values variant\nGet enumerated values variant\nActivate QSPI interface\nField <code>TASKS_ACTIVATE</code> writer -\nRegister <code>TASKS_ACTIVATE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nDeactivate QSPI interface\nField <code>TASKS_DEACTIVATE</code> writer -\nRegister <code>TASKS_DEACTIVATE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart external flash memory erase operation\nField <code>TASKS_ERASESTART</code> writer -\nRegister <code>TASKS_ERASESTART</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart transfer from external flash memory to internal RAM\nField <code>TASKS_READSTART</code> writer -\nRegister <code>TASKS_READSTART</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nStart transfer from internal RAM to external flash memory\nField <code>TASKS_WRITESTART</code> writer -\nRegister <code>TASKS_WRITESTART</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0\nCNT (rw) register accessor: an alias for <code>Reg&lt;CNT_SPEC&gt;</code>\nDST (rw) register accessor: an alias for <code>Reg&lt;DST_SPEC&gt;</code>\nSRC (rw) register accessor: an alias for <code>Reg&lt;SRC_SPEC&gt;</code>\nRegister block\nWrite transfer length\n0x08 - Write transfer length\nFlash destination address\n0x00 - Flash destination address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRAM source address\n0x04 - RAM source address\nField <code>CNT</code> reader - Write transfer length in number of …\nWrite transfer length\nField <code>CNT</code> writer - Write transfer length in number of …\nRegister <code>CNT</code> reader\nRegister <code>CNT</code> writer\nWrites raw bits to the register.\nBits 0:20 - Write transfer length in number of bytes. The …\nBits 0:20 - Write transfer length in number of bytes. The …\nReturns the argument unchanged.\nReturns the argument unchanged.")
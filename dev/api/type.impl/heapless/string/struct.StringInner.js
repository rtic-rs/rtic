(function() {
    var type_impls = Object.fromEntries([["heapless",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#930-935\">Source</a><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#932-934\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.u8.html\">u8</a>]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#923-928\">Source</a><a href=\"#impl-AsRef%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#925-927\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#912-916\">Source</a><a href=\"#impl-Borrow%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#913-915\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#917-921\">Source</a><a href=\"#impl-BorrowMut%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#918-920\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.89.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<str>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#869-873\">Source</a><a href=\"#impl-Debug-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#870-872\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#898-904\">Source</a><a href=\"#impl-Deref-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#899\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#901-903\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#906-910\">Source</a><a href=\"#impl-DerefMut-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#907-909\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#875-879\">Source</a><a href=\"#impl-Display-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#876-878\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#881-886\">Source</a><a href=\"#impl-Hash-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#883-885\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, hasher: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.89.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#988-993\">Source</a><a href=\"#impl-Ord-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#990-992\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#1010-1012\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#1049-1051\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#1075-1077\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#954-959\">Source</a><a href=\"#impl-PartialEq%3C%26str%3E-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#956-958\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#263\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CStringInner%3CLenT1,+S1%3E%3E-for-StringInner%3CLenT2,+S2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#937-943\">Source</a><a href=\"#impl-PartialEq%3CStringInner%3CLenT1,+S1%3E%3E-for-StringInner%3CLenT2,+S2%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT1: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, LenT2: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S1: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, S2: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT1, S1&gt;&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT2, S2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#940-942\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT1, S1&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#263\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<StringInner<LenT1, S1>>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#946-951\">Source</a><a href=\"#impl-PartialEq%3Cstr%3E-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#948-950\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#263\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CStringInner%3CLenT1,+S1%3E%3E-for-StringInner%3CLenT2,+S2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#979-986\">Source</a><a href=\"#impl-PartialOrd%3CStringInner%3CLenT1,+S1%3E%3E-for-StringInner%3CLenT2,+S2%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT1: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, LenT2: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S1: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, S2: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT1, S1&gt;&gt; for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT2, S2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#983-985\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT1, S1&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#1384\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#1402\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#1420\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/cmp.rs.html#1438\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<StringInner<LenT1, S1>>","heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#301-803\">Source</a><a href=\"#impl-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#337-363\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"heapless/string/struct.Drain.html\" title=\"struct heapless::string::Drain\">Drain</a>&lt;'_, LenT&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain&lt;&#39;_, LenT&gt;\">ⓘ</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range from the string in bulk, returning all\nremoved characters as an iterator.</p>\n<p>The returned iterator keeps a mutable borrow on the string to optimize\nits implementation.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the starting point or end point do not lie on a <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a>\nboundary, or if they’re out of bounds.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/1.89.0/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>core::mem::forget</code></a>, for example), the string may still contain a copy\nof any drained characters, or may have lost characters arbitrarily,\nincluding characters outside the range.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::&lt;<span class=\"number\">32</span>&gt;::try_from(<span class=\"string\">\"α is alpha, β is beta\"</span>).unwrap();\n<span class=\"kw\">let </span>beta_offset = s.find(<span class=\"string\">'β'</span>).unwrap_or(s.len());\n\n<span class=\"comment\">// Remove the range up until the β from the string\n</span><span class=\"kw\">let </span>t: String&lt;<span class=\"number\">32</span>&gt; = s.drain(..beta_offset).collect();\n<span class=\"macro\">assert_eq!</span>(t, <span class=\"string\">\"α is alpha, \"</span>);\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"β is beta\"</span>);\n\n<span class=\"comment\">// A full range clears the string, like `clear()` does\n</span>s.drain(..);\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#382-384\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.as_view\" class=\"fn\">as_view</a>(&amp;self) -&gt; &amp;<a class=\"type\" href=\"heapless/string/type.StringView.html\" title=\"type heapless::string::StringView\">StringView</a>&lt;LenT&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference to the <code>String</code>, erasing the <code>N</code> const-generic.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: String&lt;<span class=\"number\">10</span>, <span class=\"kw\">_</span>&gt; = String::try_from(<span class=\"string\">\"hello\"</span>).unwrap();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;</span>StringView = s.as_view();</code></pre></div>\n<p>It is often preferable to do the same through type coerction, since <code>String&lt;N&gt;</code> implements <code>Unsize&lt;StringView&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: String&lt;<span class=\"number\">10</span>, <span class=\"kw\">_</span>&gt; = String::try_from(<span class=\"string\">\"hello\"</span>).unwrap();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;</span>StringView = <span class=\"kw-2\">&amp;</span>s;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_view\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#403-405\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.as_mut_view\" class=\"fn\">as_mut_view</a>(&amp;mut self) -&gt; &amp;mut <a class=\"type\" href=\"heapless/string/type.StringView.html\" title=\"type heapless::string::StringView\">StringView</a>&lt;LenT&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the <code>String</code>, erasing the <code>N</code> const-generic.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">10</span>&gt; = String::try_from(<span class=\"string\">\"hello\"</span>).unwrap();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;mut </span>StringView = s.as_mut_view();</code></pre></div>\n<p>It is often preferable to do the same through type coerction, since <code>String&lt;N&gt;</code> implements <code>Unsize&lt;StringView&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">10</span>&gt; = String::try_from(<span class=\"string\">\"hello\"</span>).unwrap();\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;mut </span>StringView = <span class=\"kw-2\">&amp;mut </span>s;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#424-426\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Extracts a string slice containing the entire string.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">4</span>&gt; = String::try_from(<span class=\"string\">\"ab\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(s.as_str() == <span class=\"string\">\"ab\"</span>);\n\n<span class=\"kw\">let </span>_s = s.as_str();\n<span class=\"comment\">// s.push('c'); // &lt;- cannot borrow `s` as mutable because it is also borrowed as immutable</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_str\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#443-445\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.as_mut_str\" class=\"fn\">as_mut_str</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>String</code> into a mutable string slice.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">4</span>&gt; = String::try_from(<span class=\"string\">\"ab\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>s = s.as_mut_str();\ns.make_ascii_uppercase();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#474-476\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"heapless/string/struct.StringInner.html#tymethod.as_mut_vec\" class=\"fn\">as_mut_vec</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"heapless/vec/struct.VecInner.html\" title=\"struct heapless::vec::VecInner\">VecInner</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.u8.html\">u8</a>, LenT, S&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the contents of this <code>String</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function is unsafe because it does not check that the bytes passed\nto it are valid UTF-8. If this constraint is violated, it may cause\nmemory unsafety issues with future users of the <code>String</code>, as the rest of\nthe library assumes that <code>String</code>s are valid UTF-8.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"hello\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>vec = s.as_mut_vec();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>][..], <span class=\"kw-2\">&amp;</span>vec[..]);\n\n    vec.reverse();\n}\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"olleh\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_str\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#497-499\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.push_str\" class=\"fn\">push_str</a>(&amp;mut self, string: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"heapless/struct.CapacityError.html\" title=\"struct heapless::CapacityError\">CapacityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Appends a given string slice onto the end of this <code>String</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"foo\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(s.push_str(<span class=\"string\">\"bar\"</span>).is_ok());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foobar\"</span>, s);\n\n<span class=\"macro\">assert!</span>(s.push_str(<span class=\"string\">\"tender\"</span>).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#514-516\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum number of elements the String can hold.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">4</span>&gt; = String::new();\n<span class=\"macro\">assert!</span>(s.capacity() == <span class=\"number\">4</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#539-546\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"heapless/struct.CapacityError.html\" title=\"struct heapless::CapacityError\">CapacityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Appends the given <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> to the end of this <code>String</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"abc\"</span>)<span class=\"question-mark\">?</span>;\n\ns.push(<span class=\"string\">'1'</span>).unwrap();\ns.push(<span class=\"string\">'2'</span>).unwrap();\ns.push(<span class=\"string\">'3'</span>).unwrap();\n\n<span class=\"macro\">assert!</span>(<span class=\"string\">\"abc123\" </span>== s.as_str());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abc123\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#575-580\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens this <code>String</code> to the specified length.</p>\n<p>If <code>new_len</code> is greater than the string’s current length, this has no\neffect.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the string</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>new_len</code> does not lie on a <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"hello\"</span>)<span class=\"question-mark\">?</span>;\n\ns.truncate(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"he\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#602-613\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last character from the string buffer and returns it.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if this <code>String</code> is empty.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"foo\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>));\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>));\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'f'</span>));\n\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">None</span>);\n<span class=\"prelude-val\">Ok</span>::&lt;(), heapless::CapacityError&gt;(())</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#639-653\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Removes a <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> from this <code>String</code> at a byte position and returns it.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(n).</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than or equal to the <code>String</code>’s length,\nor if it does not lie on a <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"foo\"</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">0</span>), <span class=\"string\">'f'</span>);\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">1</span>), <span class=\"string\">'o'</span>);\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">0</span>), <span class=\"string\">'o'</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#677-679\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Truncates this <code>String</code>, removing all contents.</p>\n<p>While this means the <code>String</code> will have a length of zero, it does not\ntouch its capacity.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"foo\"</span>)<span class=\"question-mark\">?</span>;\n\ns.clear();\n\n<span class=\"macro\">assert!</span>(s.is_empty());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, s.len());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">8</span>, s.capacity());\n<span class=\"prelude-val\">Ok</span>::&lt;(), heapless::CapacityError&gt;(())</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#706-741\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a>, ch: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"heapless/struct.CapacityError.html\" title=\"struct heapless::CapacityError\">CapacityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a character into this <code>String</code> at a byte position.</p>\n<p>This is an <em>O</em>(<em>n</em>) operation as it requires copying every element in the\nbuffer.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than the <code>String</code>’s length, or if it does not\nlie on a <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">4</span>&gt; = String::new();\n\ns.insert(<span class=\"number\">0</span>, <span class=\"string\">'f'</span>).unwrap();\ns.insert(<span class=\"number\">1</span>, <span class=\"string\">'o'</span>).unwrap();\ns.insert(<span class=\"number\">2</span>, <span class=\"string\">'o'</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_str\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#766-802\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heapless/string/struct.StringInner.html#tymethod.insert_str\" class=\"fn\">insert_str</a>(\n    &amp;mut self,\n    idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.usize.html\">usize</a>,\n    string: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"heapless/struct.CapacityError.html\" title=\"struct heapless::CapacityError\">CapacityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a string slice into this <code>String</code> at a byte position.</p>\n<p>This is an <em>O</em>(<em>n</em>) operation as it requires copying every element in the\nbuffer.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than the <code>String</code>’s length, or if it does not\nlie on a <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::String;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s: String&lt;<span class=\"number\">8</span>&gt; = String::try_from(<span class=\"string\">\"bar\"</span>)<span class=\"question-mark\">?</span>;\n\ns.insert_str(<span class=\"number\">0</span>, <span class=\"string\">\"foo\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foobar\"</span>, s);</code></pre></div>\n</div></details></div></details>",0,"heapless::string::String","heapless::string::StringView"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#888-896\">Source</a><a href=\"#impl-Write-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#889-891\">Source</a><a href=\"#method.write_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Write.html#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a string slice into this writer, returning whether the write\nsucceeded. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Write.html#tymethod.write_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_char\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#893-895\">Source</a><a href=\"#method.write_char\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Write.html#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a <a href=\"https://doc.rust-lang.org/1.89.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Write.html#method.write_char\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/fmt/mod.rs.html#205\">Source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Glue for usage of the <a href=\"https://doc.rust-lang.org/1.89.0/core/macro.write.html\" title=\"macro core::write\"><code>write!</code></a> macro with implementors of this trait. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details>","Write","heapless::string::String","heapless::string::StringView"],["<section id=\"impl-Eq-for-StringInner%3CLenT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/string/mod.rs.html#977\">Source</a><a href=\"#impl-Eq-for-StringInner%3CLenT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;LenT: <a class=\"trait\" href=\"heapless/trait.LenType.html\" title=\"trait heapless::LenType\">LenType</a>, S: <a class=\"trait\" href=\"heapless/string/trait.StringStorage.html\" title=\"trait heapless::string::StringStorage\">StringStorage</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"heapless/string/struct.StringInner.html\" title=\"struct heapless::string::StringInner\">StringInner</a>&lt;LenT, S&gt;</h3></section>","Eq","heapless::string::String","heapless::string::StringView"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[74437]}
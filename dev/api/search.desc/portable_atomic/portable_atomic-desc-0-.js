searchState.loadedDescShard("portable_atomic", 0, "Portable atomic types including support for 128-bit …\nA boolean type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nAdds to the current value.\nLogical “and” with a boolean value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nReturns a mutable pointer to the underlying <code>bool</code>.\nReturns a mutable pointer to the underlying pointer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nClears the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nSets the bit at the specified bit-position to 1.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nToggles the bit at the specified bit-position.\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nCreates an <code>AtomicBool</code> initialized to <code>false</code>.\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nLogical “not” with a boolean value.\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical “or” with a boolean value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nRe-export of the <code>core::hint</code> module.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nReturns <code>true</code> if operations on values of this type are …\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nNegates the current value, and sets the new value to the …\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nLogical “not” with a boolean value.\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical negates the current value, and sets the new value …\nLogical “or” with a boolean value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nSubtracts from the current value.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nLogical “xor” with a boolean value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nEmits a machine instruction to signal the processor that …")
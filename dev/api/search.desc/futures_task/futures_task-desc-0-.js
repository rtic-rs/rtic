searchState.loadedDescShard("futures_task", 0, "Tools for working with tasks.\nA custom trait object for polling futures, roughly akin to …\nA custom trait object for polling futures, roughly akin to …\nThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …\nThe <code>Spawn</code> trait allows for pushing futures onto an …\nAn error that occurred during spawning.\nA custom implementation of a future trait object for …\nDrops the future represented by the given fat pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.\nConvert an owned instance into a (conceptually owned) fat …\nCheck whether spawning failed to the executor being shut …\nCreate a <code>LocalFutureObj</code> from a custom trait object …\nCreate a <code>FutureObj</code> from a custom trait object …\nCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is …\nGet a static reference to a <code>Waker</code> which does nothing when …\nSpawning failed because the executor has been shut down.\nSpawns a future that will be run to completion.\nSpawns a future that will be run to completion.\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.")
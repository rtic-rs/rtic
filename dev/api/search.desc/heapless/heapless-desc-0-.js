searchState.loadedDescShard("heapless", 0, "<code>static</code> friendly data structures that don’t require …\nThe error type for fallible <code>Vec</code> and <code>String</code> methods.\nA sealed trait representing a valid type to use as a …\nA priority queue implemented with a binary heap.\nA fixed capacity <code>CString</code>.\nA fixed capacity double-ended queue.\nMacro that creates a fixed capacity <code>String</code>. Equivalent to …\nReturns the argument unchanged.\nA “history buffer”, similar to a write-only ring …\nA fixed-capacity hash table where the iteration order is …\nA fixed-capacity hash set where the iteration order is …\nCalls <code>U::from(self)</code>.\nA fixed capacity map/dictionary that performs lookups via …\nA fixed capacity multiple-producer, multiple-consumer …\nA fixed sorted priority linked list, similar to <code>BinaryHeap</code> …\nA fixed capacity single-producer, single-consumer (SPSC) …\n<code>Storage</code> trait defining how data is stored in a container.\nA fixed capacity <code>String</code>.\nA fixed capacity <code>Vec</code>.\nA priority queue implemented with a binary heap.\nBase struct for <code>BinaryHeap</code> and <code>BinaryHeapView</code>, generic …\nA priority queue implemented with a binary heap.\nThe binary heap kind: min-heap or max-heap\nMax-heap\nMin-heap\nStructure wrapping a mutable reference to the greatest …\nStructure wrapping a mutable reference to the greatest …\nStructure wrapping a mutable reference to the greatest …\nGet a mutable reference to the <code>BinaryHeap</code>, erasing the <code>N</code> …\nGet a reference to the <code>BinaryHeap</code>, erasing the <code>N</code> …\nReturns the capacity of the binary heap.\nDrops all items from the binary heap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …\nReturns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …\nChecks if the binary heap is empty.\nChecks if the binary heap is full.\nReturns an iterator visiting all values in the underlying …\nReturns a mutable iterator visiting all values in the …\nReturns the length of the binary heap.\nCreates an empty <code>BinaryHeap</code> as a $K-heap.\nCreates an empty <code>BinaryHeap</code> as a $K-heap.\nReturns the <em>top</em> (greatest if max-heap, smallest if …\nReturns a mutable reference to the greatest item in the …\nRemoves the <em>top</em> (greatest if max-heap, smallest if …\nRemoves the peeked value from the heap and returns it.\nRemoves the <em>top</em> (greatest if max-heap, smallest if …\nPushes an item onto the binary heap.\nPushes an item onto the binary heap without first checking …\nA fixed capacity <code>CString</code>.\nThe capacity of the <code>CString</code> is too small.\nAn error to extend <code>CString</code> with bytes.\nAn invalid interior nul byte found in a given byte slice.\nReturns the underlying byte slice excluding the trailing …\nReturns the underlying byte slice including the trailing …\nConverts the <code>CString</code> to a <code>CStr</code> slice.\nExtends the <code>CString</code> with the given bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiates a <code>CString</code> copying from the giving byte slice, …\nUnsafely creates a <code>CString</code> from a byte slice.\nBuilds a <code>CString</code> copying from a raw C string pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new C-compatible string with a terminating nul …\nA position of a nul byte.\nA fixed capacity double-ended queue.\nBase struct for <code>Deque</code> and <code>DequeView</code>, generic over the …\nA double-ended queue with dynamic capacity.\nAn iterator that moves out of a <code>Deque</code>.\nIterator over the contents of a <code>Deque</code>\nIterator over the contents of a <code>Deque</code>\nReturns a pair of mutable slices which contain, in order, …\nGet a mutable reference to the <code>Deque</code>, erasing the <code>N</code> …\nReturns a pair of slices which contain, in order, the …\nGet a reference to the <code>Deque</code>, erasing the <code>N</code> const-generic.\nProvides a reference to the back element, or None if the …\nProvides a mutable reference to the back element, or None …\nReturns the maximum number of elements the deque can hold.\nReturns the maximum number of elements the deque can hold.\nClears the deque, removing all values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a reference to the front element, or None if the …\nProvides a mutable reference to the front element, or None …\nReturns a reference to the element at the given index.\nReturns a mutable reference to the element at the given …\nReturns a reference to the element at the given index …\nReturns a mutable reference to the element at the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the deque is empty.\nReturns whether the deque is full (i.e. if …\nReturns an iterator over the deque.\nReturns an iterator that allows modifying each value.\nReturns the number of elements currently in the deque.\nReturns the number of elements currently in the deque.\nRearranges the internal storage of the <code>Deque</code> to make it …\nConstructs a new, empty deque with a fixed capacity of <code>N</code>\nConstructs a new, empty deque with a fixed capacity of <code>N</code>\nRemoves the item from the back of the deque and returns …\nRemoves an item from the back of the deque and returns it, …\nRemoves the item from the front of the deque and returns …\nRemoves an item from the front of the deque and returns …\nAppends an <code>item</code> to the back of the deque\nAppends an <code>item</code> to the back of the deque\nAppends an <code>item</code> to the front of the deque\nAppends an <code>item</code> to the front of the deque\nReturns the maximum number of elements the deque can hold.\nReturns the number of elements currently in the deque.\nSwaps elements at indices <code>i</code> and <code>j</code>.\nRemoves an element from anywhere in the deque and returns …\nRemoves an element from anywhere in the deque and returns …\nSwaps elements at indices <code>i</code> and <code>j</code> without checking that …\nA “history buffer”, similar to a write-only ring …\nBase struct for <code>HistoryBuf</code> and <code>HistoryBufView</code>, generic …\nTrait defining how data for a container is stored.\nA “view” into a <code>HistoryBuf</code>\nDouble ended iterator on the underlying buffer ordered …\nImplementation of <code>HistoryBufStorage</code> that stores the data …\nImplementation of <code>HistoryBufStorage</code> that stores the data …\nGet a mutable reference to the <code>HistoryBuf</code>, erasing the <code>N</code> …\nReturns the array slice backing the buffer, without …\nReturns a pair of slices which contain, in order, the …\nGet a reference to the <code>HistoryBuf</code>, erasing the <code>N</code> …\nReturns the capacity of the buffer, which is the length of …\nClears the buffer\nClears the buffer, replacing every element with the given …\nClones and writes all elements in a slice to the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the buffer is empty.\nReturns whether the buffer is full\nReturns the current fill level of the buffer.\nConstructs a new history buffer.\nConstructs a new history buffer.\nConstructs a new history buffer, where every element is …\nConstructs a new history buffer, where every element is …\nReturns a reference to the oldest value in the buffer.\nReturns index of the oldest value in the underlying slice.\nReturns double ended iterator for iterating over the …\nReturns a reference to the most recently written value.\nReturns index of the most recently written value in the …\nWrites an element to the buffer, overwriting the oldest …\nA view into an entry in the map\nAn <code>IndexMap</code> using the default FNV hasher.\nFixed capacity <code>IndexMap</code>\nAn owning iterator over the entries of an <code>IndexMap</code>.\nAn iterator over the items of a <code>IndexMap</code>.\nA mutable iterator over the items of a <code>IndexMap</code>.\nAn iterator over the keys of a <code>IndexMap</code>.\nThe entry corresponding to the key <code>K</code> exists in the map\nAn occupied entry which can be manipulated\nThe entry corresponding to the key <code>K</code> does not exist in the …\nA view into an empty slot in the underlying map\nAn iterator over the values of a <code>IndexMap</code>.\nA mutable iterator over the values of a <code>IndexMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the map can hold\nRemove all key-value pairs in the map, while preserving …\nReturns true if the map contains a value for the specified …\nReturns an entry for the corresponding key\nGet the first key-value pair\nGet the first key-value pair, with mutable access to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value associated with this entry\nReturns a reference to the value corresponding to the key.\nReturns a tuple of references to the key and the value …\nReturns a tuple of references to the key and the mutable …\nReturns the index of the key-value pair corresponding to …\nGets a mutable reference to the value associated with this …\nReturns a mutable reference to the value corresponding to …\nOverwrites the underlying map’s value with this entry’…\nInserts this entry into to underlying map, yields a …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this entry to yield to key associated with it\nConsumes this entry and yields a reference to the …\nReturns true if the map contains no elements.\nReturns true if the map is full.\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the key-value pairs of the map, in …\nReturns a reference to this entry’s key.\nGets a reference to the key that this entity corresponds to\nGet the key associated with this entry\nReturn an iterator over the keys of the map, in insertion …\nGet the last key-value pair\nGet the last key-value pair, with mutable access to the …\nReturn the number of key-value pairs in the map.\nCreates an empty <code>IndexMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nRemoves this entry from the map and yields its value\nSame as <code>swap_remove</code>\nRemoves this entry from the map and yields its …\nRetains only the elements specified by the predicate.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nShortens the map, keeping the first <code>len</code> elements and …\nReturn an iterator over the values of the map, in …\nReturn an iterator over mutable references to the the …\nAn iterator over the difference of two <code>IndexSet</code>s.\nAn <code>IndexSet</code> using the default FNV hasher.\nFixed capacity <code>IndexSet</code>.\nAn iterator over the intersection of two <code>IndexSet</code>s.\nAn iterator over the items of a <code>IndexSet</code>.\nReturns the number of elements the set can hold\nClears the set, removing all values.\nReturns <code>true</code> if the set contains a value.\nVisits the values representing the difference, i.e. the …\nGet the first value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a value to the set.\nVisits the values representing the intersection, i.e. the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is full.\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nExamples\nReturn an iterator over the values of the set, in …\nGet the last value\nReturns the number of elements in the set.\nCreates an empty <code>IndexSet</code>\nRemoves a value from the set. Returns <code>true</code> if the value …\nRetains only the elements specified by the predicate.\nVisits the values representing the symmetric difference, …\nVisits the values representing the union, i.e. all the …\nAn iterator that moves out of a <code>LinearMap</code>.\nAn iterator over the items of a <code>LinearMap</code>\nAn iterator over the items of a <code>LinearMap</code> that allows …\nA fixed capacity map/dictionary that performs lookups via …\nBase struct for <code>LinearMap</code> and <code>LinearMapView</code>\nTrait defining how data for a <code>LinearMap</code> is stored.\nA dynamic capacity map/dictionary that performs lookups …\nImplementation of <code>LinearMapStorage</code> that stores the data in …\nImplementation of <code>LinearMapStorage</code> that stores the data in …\nGet a mutable reference to the <code>LinearMap</code>, erasing the <code>N</code> …\nGet a reference to the <code>LinearMap</code>, erasing the <code>N</code> …\nReturns the number of elements that the map can hold.\nClears the map, removing all key-value pairs.\nReturns true if the map contains a value for the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a mutable reference to the value corresponding to …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the map contains no elements.\nReturns true if the map is full.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order.\nReturns the number of elements in this map.\nCreates an empty <code>LinearMap</code>.\nCreates an empty <code>LinearMap</code>.\nRemoves a key from the map, returning the value at the key …\nAn iterator visiting all values in arbitrary order.\nAn iterator visiting all values mutably in arbitrary order.\nA statically allocated multi-producer, multi-consumer …\nBase struct for <code>Queue</code> and <code>QueueView</code>, generic over the …\nA <code>Queue</code> with dynamic capacity.\nGet a mutable reference to the <code>Queue</code>, erasing the <code>N</code> …\nGet a reference to the <code>Queue</code>, erasing the <code>N</code> const-generic.\nReturns the maximum number of elements the queue can hold.\nReturns the item in the front of the queue, or <code>None</code> if the …\nAdds an <code>item</code> to the end of the queue.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an empty queue.\nCreates an empty queue.\nComes from <code>SortedLinkedList::find_mut</code>.\nIterator for the linked list.\nThe linked list kind: min-list or max-list\nMarker for Max sorted <code>SortedLinkedList</code>.\nMarker for Min sorted <code>SortedLinkedList</code>.\nA node in the <code>SortedLinkedList</code>.\nImplementation of <code>SortedLinkedListStorage</code> that stores the …\nThe linked list.\nBase struct for <code>SortedLinkedList</code> and <code>SortedLinkedListView</code>, …\nTrait defining how data for a container is stored.\nThe linked list.\nImplementation of <code>SortedLinkedListStorage</code> that stores the …\nGet a mutable reference to the <code>Vec</code>, erasing the <code>N</code> …\nGet a reference to the <code>SortedLinkedList</code>, erasing the <code>N</code> …\nFind an element in the list that can be changed and …\nThis will resort the element into the correct position in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the linked list is empty.\nChecks if the linked list is full.\nGet an iterator over the sorted list.\nCreate a new linked list.\nCreate a new linked list.\nCreate a new linked list.\nCreate a new linked list.\nCreate a new linked list.\nCreate a new linked list.\nPeek at the first element.\nPops the first element in the list.\nThis will pop the element from the list.\nPop an element from the list without checking so the list …\nPushes an element to the linked list and sorts it into …\nPushes a value onto the list without checking if the list …\nA consumer; it can dequeue items from the queue.\nAn iterator over the items of a queue.\nAn iterator over the items of a queue.\nA producer; it can enqueue items into the queue.\nA statically allocated single-producer, single-consumer …\nBase struct for <code>Queue</code> and <code>QueueView</code>, generic over the …\nA <code>Queue</code> with dynamic capacity.\nGet a mutable reference to the <code>Queue</code>, erasing the <code>N</code> …\nGet a reference to the <code>Queue</code>, erasing the <code>N</code> const-generic.\nReturns the maximum number of elements the queue can hold.\nReturns the maximum number of elements the queue can hold.\nReturns the maximum number of elements the queue can hold.\nReturns the item in the front of the queue, or <code>None</code> if the …\nReturns the item in the front of the queue, or <code>None</code> if the …\nReturns the item in the front of the queue, without …\nReturns the item in the front of the queue, without …\nAdds an <code>item</code> to the end of the queue.\nAdds an <code>item</code> to the end of the queue, returns back the <code>item</code>…\nAdds an <code>item</code> to the end of the queue, without checking if …\nAdds an <code>item</code> to the end of the queue, without checking if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the queue is empty.\nReturns whether the queue is empty.\nReturns whether the queue is empty.\nReturns whether the queue is full.\nIterates from the front of the queue to the back.\nReturns an iterator that allows modifying each value.\nReturns the number of elements in the queue.\nReturns the number of elements in the queue.\nReturns the number of elements in the queue.\nCreates an empty queue.\nCreates an empty queue.\nReturns a reference to the item in the front of the queue …\nReturns the item in the front of the queue without …\nReturns if there are any items to dequeue. When this …\nReturns if there is any space to enqueue a new item. When …\nSplits a queue into producer and consumer endpoints.\nSplits a queue into producer and consumer endpoints.\nSplits a queue into producer and consumer endpoints.\nSplits a queue into producer and consumer endpoints.\nSplits a queue into producer and consumer endpoints.\nImplementation of <code>Storage</code> that stores the data in an array …\nTrait defining how data for a container is stored.\nImplementation of <code>Storage</code> that stores the data in an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe capacity of the <code>String</code> is too small for the given …\nError decoding UTF-16.\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nImplementation of <code>StringStorage</code> that stores the data in an …\nA fixed capacity <code>String</code>.\nBase struct for <code>String</code> and <code>StringView</code>, generic over the …\nTrait defining how data for a String is stored.\nA dynamic capacity <code>String</code>.\nImplementation of <code>StringStorage</code> that stores the data in an …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nGet a mutable reference to the <code>String</code>, erasing the <code>N</code> …\nReturns the remaining (sub)string of this iterator as a …\nExtracts a string slice containing the entire string.\nGet a reference to the <code>String</code>, erasing the <code>N</code> const-generic.\nReturns the maximum number of elements the String can hold.\nTruncates this <code>String</code>, removing all contents.\nRemoves the specified range from the string in bulk, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a UTF-16–encoded slice <code>v</code> into a <code>String</code>, …\nDecodes a UTF-16–encoded slice <code>v</code> into a <code>String</code>, …\nConvert UTF-8 bytes into a <code>String</code>.\nConvert UTF-8 bytes into a <code>String</code>.\nConvert UTF-8 bytes into a <code>String</code>, without checking that …\nConvert UTF-8 bytes into a <code>String</code>, without checking that …\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>String</code> into a byte vector.\nConverts a <code>String</code> into a byte vector.\nConstructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …\nConstructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …\nRemoves the last character from the string buffer and …\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nShortens this <code>String</code> to the specified length.\nA draining iterator for <code>Vec</code>.\nAn iterator that moves out of an <code>Vec</code>.\nImplementation of <code>VecStorage</code> that stores the data in an …\nA fixed capacity <code>Vec</code>.\nBase struct for <code>Vec</code> and <code>VecView</code>, generic over the …\nTrait defining how data for a container is stored.\nA <code>Vec</code> with dynamic capacity\nImplementation of <code>VecStorage</code> that stores the data in an …\nReturns a raw pointer to the vector’s buffer, which may …\nExtracts a mutable slice containing the entire vector.\nGet a mutable reference to the <code>Vec</code>, erasing the <code>N</code> …\nReturns a raw pointer to the vector’s buffer.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nGet a reference to the <code>Vec</code>, erasing the <code>N</code> const-generic.\nReturns the maximum number of elements the vector can hold.\nCasts the <code>LenT</code> type to a new type, preserving everything …\nCasts the <code>LenT</code> type to a new type, preserving everything …\nClears the vector, removing all values.\nRemoves the specified range from the vector in bulk, …\nReturns <code>true</code> if <code>needle</code> is a suffix of the Vec.\nExtends the vec from an iterator.\nClones and appends all elements in a slice to the <code>Vec</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new vector with a fixed capacity of <code>N</code>, …\nConstructs a new vector with a fixed capacity of <code>N</code>, …\nConstructs a new vector with a fixed capacity of <code>N</code> and …\nConstructs a new vector with a fixed capacity of <code>N</code> and …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contents of the vector as an array of length <code>M</code> …\nReturns the contents of the vector as an array of length <code>M</code> …\nReturns true if the vec is empty\nReturns true if the vec is full\nConstructs a new, empty vector with a fixed capacity of <code>N</code>\nConstructs a new, empty vector with a fixed capacity of <code>N</code>\nRemoves the last element from a vector and returns it, or …\nRemoves the last element from a vector and returns it\nAppends an <code>item</code> to the back of the collection\nAppends an <code>item</code> to the back of the collection\nRemoves and returns the element at position <code>index</code> within …\nResizes the Vec in-place so that len is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nReturns the remaining spare capacity of the vector as a …\nReturns <code>true</code> if <code>needle</code> is a prefix of the Vec.\nRemoves an element from the vector and returns it.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …")
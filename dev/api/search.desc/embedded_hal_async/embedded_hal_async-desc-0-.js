searchState.loadedDescShard("embedded_hal_async", 0, "crates.io crates.io Documentation\nDelays.\nAsynchronous digital I/O.\nAsync I2C API.\nSPI master mode traits.\nDelay with up to nanosecond precision.\nPauses execution for at minimum <code>ms</code> milliseconds. Pause can …\nPauses execution for at minimum <code>ns</code> nanoseconds. Pause can …\nPauses execution for at minimum <code>us</code> microseconds. Pause can …\nAsynchronously wait for GPIO pin state.\nWait for the pin to undergo any transition, i.e low to …\nWait for the pin to undergo a transition from high to low.\nWait until the pin is high. If it is already high, return …\nWait until the pin is low. If it is already low, return …\nWait for the pin to undergo a transition from low to high.\nThe device did not acknowledge its address. The device may …\nAddress mode (7-bit / 10-bit).\nThe arbitration was lost, e.g. electrical problems with …\nBus error occurred. e.g. A START or a STOP condition is …\nThe device did not acknowledge the data. It may not be …\nI2C error.\nError type\nI2C error kind.\nI2C error type trait.\nAsync I2c.\nA bus operation was not acknowledged, e.g. due to the …\nI2C no acknowledge error source.\nI2C operation.\nA different error occurred. The original error may contain …\nThe peripheral receive buffer was overrun.\nRead data into the provided buffer.\n7-bit address mode type.\n10-bit address mode type.\nEither the device did not acknowledge its address or the …\nWrite data from the provided buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert error to a generic I2C error kind.\nReads enough bytes from slave with <code>address</code> to fill <code>buffer</code>.\nExecute the provided operations on the I2C bus as a single …\nWrites bytes to slave with address <code>address</code>.\nWrites bytes to slave with address <code>address</code> and then reads …\nData in “captured” on the first clock transition.\nData in “captured” on the second clock transition.\nAn error occurred while asserting or deasserting the Chip …\nDelay for at least the specified number of nanoseconds.\nSPI error.\nError type.\nSPI error kind.\nSPI error type trait.\nReceived data does not conform to the peripheral …\nClock signal high when idle.\nClock signal low when idle.\nHelper for CPOL = 0, CPHA = 0.\nHelper for CPOL = 0, CPHA = 1.\nHelper for CPOL = 1, CPHA = 0.\nHelper for CPOL = 1, CPHA = 1.\nSPI mode.\nMultiple devices on the SPI bus are trying to drive the …\nSPI transaction operation.\nA different error occurred. The original error may contain …\nThe peripheral receive buffer was overrun.\nClock phase.\nClock polarity.\nRead data into the provided buffer.\nSPI bus.\nSPI device trait.\nRead data into the first buffer, while writing data from …\nWrite data out while reading data into the provided buffer.\nWrite data from the provided buffer, discarding read data.\nWait until all operations have completed and the bus is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert error to a generic SPI error kind.\nClock phase.\nClock polarity.\nRead <code>words</code> from the slave.\nDo a read within a transaction.\nPerform a transaction against the device.\nWrite and read simultaneously. <code>write</code> is written to the …\nDo a transfer within a transaction.\nWrite and read simultaneously. The contents of <code>words</code> are …\nDo an in-place transfer within a transaction.\nWrite <code>words</code> to the slave, ignoring all the incoming words.\nDo a write within a transaction.")
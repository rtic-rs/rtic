searchState.loadedDescShard("embedded_hal_bus", 0, "crates.io crates.io Documentation Minimum Supported Rust …\n<code>I2c</code> shared bus implementations.\n<code>SpiDevice</code> implementations.\nUtilities shared by all bus types.\nAtomics-based shared bus <code>I2c</code> implementation.\nWrapper type for errors originating from the …\nThis error is returned if the I2C bus was already in use …\n<code>critical-section</code>-based shared bus <code>I2c</code> implementation.\nAn I2C-related error occurred, and the internal error …\n<code>RefCell</code>-based shared bus <code>I2c</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RefCellDevice</code>.\nCreate a new <code>CriticalSectionDevice</code>.\nCreate a new <code>AtomicDevice</code>.\nAtomics-based shared bus <code>SpiDevice</code> implementation.\nWrapper type for errors returned by <code>AtomicDevice</code>.\nThis error is returned if the SPI bus was already in use …\n<code>critical-section</code>-based shared bus <code>SpiDevice</code> implementation.\nAsserting or deasserting CS failed.\nError type for <code>ExclusiveDevice</code> operations.\n<code>SpiDevice</code> implementation with exclusive access to the bus …\nDummy <code>DelayNs</code> implementation that panics on use.\nAn SPI-related error occurred, and the internal error …\n<code>RefCell</code>-based shared bus <code>SpiDevice</code> implementation.\nAn inner SPI bus operation failed.\nReturns a reference to the underlying bus object.\nReturns a mutable reference to the underlying bus object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ExclusiveDevice</code>.\nCreate a new <code>RefCellDevice</code>.\nCreate a new <code>AtomicDevice</code>.\nCreate a new <code>CriticalSectionDevice</code>.\nCreate a new <code>ExclusiveDevice</code> without support for …\nCreate a new <code>RefCellDevice</code> without support for …\nCreate a new <code>AtomicDevice</code> without support for …\nCreate a new <code>CriticalSectionDevice</code> without support for …\nCell type used by <code>spi::AtomicDevice</code> and <code>i2c::AtomicDevice</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AtomicCell</code>")